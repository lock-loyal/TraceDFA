{
    "fp": [
        {
            "ServletMostraAccessoA": "- view access information, allow citizen to view their access information, citizen. citizen accesses system, system retrieves access details from database, system displays access information on user interface, exit when citizen views data or error occurs, citizen must be authenticated in the system.",
            "EA79": "view information, allow citizen to view territory information, citizen. citizen requests territory information display, system returns information including libraries, events, museums, promotions, handle service unavailable by invoking service unavailable use case, exit conditions are citizen viewing information or service unavailable, citizen must have logged into the system.",
            "score": 0.8625945031642913,
            "correct": false
        },
        {
            "ServletRicercaImpiegato": "- search employee, allow administrator to search for employee data, administrator. administrator accesses employee search form, system displays search criteria input, administrator enters employee identifier (matricola), system retrieves employee data, administrator must have valid system access, exit conditions include system displaying employee details or invoking employee not found error if identifier invalid or service unavailable use case if database error occurs, employee identifier must exist and follow valid format.\n- employee not found error, handle invalid employee identifier during search, administrator. system displays error message indicating no employee found, administrator reviews error notification, system returns to search form, exit when error message displayed, extends employee search use case when invalid identifier provided.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.8471801280975342,
            "correct": false
        },
        {
            "ServletVisualizzaPratiche": "- view applications, allow employee to view all submitted applications, employee. employee accesses application list, system retrieves and displays list of applications, employee scrolls through list to inspect application details, exit when list is displayed or service unavailable invoking service unavailable use case, employee must have system access.",
            "EA44": "view pending applications employee, allow employee to view pending applications, employee. employee selects view pending requests, system displays list of pending applications, exit conditions include employee selecting request invoking show pending application employee use case, returning to previous screen, or system invoking service unavailable use case for unexpected errors, employee must be logged in.",
            "score": 0.8440908730030059,
            "correct": false
        },
        {
            "ServletEliminaImpiegato": "- delete employee, allow administrator to remove an employee from the system, administrator. administrator enters employee identification number, system verifies employee existence, administrator confirms deletion request, system removes employee record and associated access credentials, administrator must be authenticated in the system, exit conditions include successful deletion or invalid employee id invoking incorrect data use case. employee identification number must exist in system records.",
            "EA72": "delete information, allows employee to delete a news item, employee. employee requests news deletion, system displays existing news list, employee selects news, system shows confirmation form, employee confirms via form, system processes form and deletes news data, exit conditions include system completing deletion or invoking service unavailable use case on error, employee must be authenticated.",
            "score": 0.8169055640697479,
            "correct": false
        },
        {
            "Accesso": "- register citizen access, allow citizen to create system access credentials, citizen. citizen accesses registration form, system displays login, password, and type fields, citizen enters data and submits, system stores credentials with type 'cittadino', citizen must provide unique login and valid password format, exit conditions include successful registration or duplicate login error.  \n- register employee access, allow administrator to create employee system access, administrator. administrator accesses employee registration interface, enters employee login, password, and sets type 'impiegato', system validates and stores credentials, administrator must have valid privileges, login must follow [a-za-z0-9._-] format under 30 characters.  \n- register administrator access, allow system to initialize administrator credentials, administrator. system administrator accesses privileged registration module, inputs login, password, and assigns type 'amministratore', system encrypts and stores credentials, requires unique login matching [a-za-z0-9._-] pattern under 30 characters.",
            "EA23": "register citizen, allow citizen to register in the system, citizen. citizen accesses registration form, system displays form, citizen enters data and confirms, system verifies data correctness, saves data and sends registration email, handle invalid data by invoking invalid data use case, handle service unavailable by invoking service unavailable use case, citizen must have system access. name string matches identity card holder, well-formed with [a-za-z'àéèìòù], length <30, not empty. surname string matches identity card holder, well-formed with [a-za-z'àéèìòù], length <30, not empty. fiscal code string complies with regulations, 16 characters. identity card string exists in system, format xxnnnnnnn, 9 characters. email string format x@x.x, length <31, not empty. username string unique, well-formed with [a-za-z0-9.-_], length <30, not empty. password string well-formed with [a-za-z0-9.-_*+!?,:;àèéìòù], length 8-15.",
            "score": 0.8147841334342957,
            "correct": false
        },
        {
            "ServletInserisciAmministratore": "- register administrator, allow administrator to register new administrator accounts, administrator. administrator accesses registration form, system displays input fields for personal and access data, administrator enters details and submits, system validates and creates account, exit conditions include account creation success or failure due to existing login/matricola or invalid data, administrator must have registration privileges. surname must be [a-za-zàèéìòù] 1-30 characters, name same as surname, email valid format, matricola unique numeric code, login unique [a-za-z0-9._-] under 30 characters, password [a-za-z0-9._-*+!?,:;àèéìòù] 8-15 characters.  \n- incorrect data, handle invalid administrator registration inputs by displaying error, administrator. system shows error message for invalid/missing fields, administrator reviews data, system redisplays form with validation hints, exit when corrected submission occurs, extends registration use case for data correction.",
            "EA7": "insert employee, allow administrator to register a new employee, administrator. administrator accesses system via admin terminal, initiates registration, system displays form, administrator enters employee data and submits, system checks for existing employee id, generates password, saves data, confirms registration with password, handle existing id with incorrect data use case or service unavailable via service unavailable use case. administrator must be authenticated. name allows [a-z a-z ' accents], <31 chars, non-empty. surname same as name. email format x@x.x, <31 chars. employee id numeric, 6 chars. username unique, [a-z a-z 0-9 .-_], <31, non-empty. password [a-z a-z 0-9 .-_*+!?,:; accents], 8-15 chars. confirm password matches.",
            "score": 0.7995179653167725,
            "correct": false
        },
        {
            "ServletEliminaImpiegato": "- delete employee, allow administrator to remove an employee from the system, administrator. administrator enters employee identification number, system verifies employee existence, administrator confirms deletion request, system removes employee record and associated access credentials, administrator must be authenticated in the system, exit conditions include successful deletion or invalid employee id invoking incorrect data use case. employee identification number must exist in system records.",
            "EA4": "delete citizen, allows employee to delete a citizen, employee. employee presses delete citizen button, system requests confirmation, employee confirms operation, system deletes citizen. employee must be authenticated in the system, includes search citizen use case when employee wants to delete citizen. exit conditions: employee does not confirm operation, system deletes citizen, or invokes service unavailable use case if service is unavailable.",
            "score": 0.7976315200328827,
            "correct": false
        },
        {
            "ServletInserisciAmministratore": "- register administrator, allow administrator to register new administrator accounts, administrator. administrator accesses registration form, system displays input fields for personal and access data, administrator enters details and submits, system validates and creates account, exit conditions include account creation success or failure due to existing login/matricola or invalid data, administrator must have registration privileges. surname must be [a-za-zàèéìòù] 1-30 characters, name same as surname, email valid format, matricola unique numeric code, login unique [a-za-z0-9._-] under 30 characters, password [a-za-z0-9._-*+!?,:;àèéìòù] 8-15 characters.  \n- incorrect data, handle invalid administrator registration inputs by displaying error, administrator. system shows error message for invalid/missing fields, administrator reviews data, system redisplays form with validation hints, exit when corrected submission occurs, extends registration use case for data correction.",
            "EA1": "administrator authentication, allow administrator to authenticate into the system, administrator. administrator accesses system, system displays login form for credentials input, administrator enters data and submits authentication request, system verifies data and grants access with specified permissions, exit conditions include successful access or invalid credentials invoking invalid data use case or service unavailable invoking service unavailable use case, username must be present with [a-za-z0-9._-] characters under 30 length, password must be present with [a-za-z0-9._-*+!?,:;àèéìòù] characters between 8-15 length.",
            "score": 0.7909021854400635,
            "correct": false
        },
        {
            "ServletMostraAccessoA": "- view access information, allow citizen to view their access information, citizen. citizen accesses system, system retrieves access details from database, system displays access information on user interface, exit when citizen views data or error occurs, citizen must be authenticated in the system.",
            "EA113": "civil service, allow citizen to obtain information about civil service utility, citizen. citizen accesses section for information, system displays screen clarifying objectives and general information with download enrollment use case option, citizen acknowledges information or fails to view page invoking service unavailable use case, response time in hundredths of seconds if successful or seconds if failure occurs, citizen must be authenticated in municipal system or have system access.",
            "score": 0.7839411139488219,
            "correct": false
        },
        {
            "ServletCreaPdfCambioAbitazione": "- declare residence change, allow citizen to declare change of residence, citizen. citizen accesses residence change form, system displays data entry fields for new address and family unit details, citizen submits declaration, system generates official pdf document with declared information, citizen must provide valid identity document and authenticate in the system, exit conditions include system generating pdf or invoking incorrect data use case if required fields missing, new address must follow [a-zàèéìòù' .] characters with minimum 1 character length, civic number must be numeric 1-5 digits.  \n- update family unit composition, enable citizen to specify family members moving together, citizen. citizen lists family members in declaration form including parentage relations, system validates family status consistency, system records updated family unit data, exit when family member table appears in generated pdf, family member names must use [a-zàèéìòù' .] characters with 1-30 length, birth dates require valid dd/mm/yyyy format.  \n- remove citizen record, handle citizen relocation outside municipality, employee. system detects residence change to external municipality, employee verifies relocation authenticity, system deletes citizen access and family unit records, exit when citizen data removed from database, requires municipal police confirmation of address validity.  \n- validate property occupancy, ensure declared residence occupancy compliance, employee. system cross-checks property ownership/rental status with municipal registry, employee confirms occupancy legitimacy through police municipal report, exit when pdf includes authorized officer's disposition statement, rental properties require active contract registration in municipal archive.",
            "EA26": "change of residence another municipality, allow citizen to change residence to another municipality, citizen and employee. citizen presses change of residence button, system displays form, citizen enters new residence data, system confirms submission and stores request, employee accesses system and views request, employee verifies data completes document confirms operation, system saves form and updates data, employee sends document to other municipality's employee, other municipality's employee verifies document sends positive notification to original employee and citizen, handle service unavailable by invoking service unavailable use case, citizen must be authenticated in the system. new residence municipality name allows [a-z a-z ' àéèìòù .], non-empty. address allows [a-z a-z ' àéèìòù , .], non-empty. civic number allows [0-9 a-z], max 4 characters. phone prefix numeric 2-5 digits. phone number numeric 5-8 digits. family member surname/name allows [a-z a-z ' àéèìòù], max 30 chars non-empty. family member birth place allows [a-z a-z ' àéèìòù .], non-empty. birth date valid format dd/mm/yyyy. external requester card code format xxnnnnnnn (x=letter, n=number), 9 chars.",
            "score": 0.7835121870040893,
            "correct": false
        },
        {
            "ServletMostraAccessoA": "- view access information, allow citizen to view their access information, citizen. citizen accesses system, system retrieves access details from database, system displays access information on user interface, exit when citizen views data or error occurs, citizen must be authenticated in the system.",
            "EA73": "library information, allow citizen to view library details, citizen. citizen requests to display library list, system shows library list, citizen selects library, system returns library information including location, opening dates and hours, website link, citizen must be logged into the system, exit when citizen views information or redirects to library website for book viewing.",
            "score": 0.7798756241798401,
            "correct": false
        },
        {
            "ServletMostraAccessoA": "- view access information, allow citizen to view their access information, citizen. citizen accesses system, system retrieves access details from database, system displays access information on user interface, exit when citizen views data or error occurs, citizen must be authenticated in the system.",
            "EA137": "consult online help, allow citizen to access online help information, citizen. citizen enters online help section, system displays functionality list, citizen clicks relevant link, system presents help information explaining procedures and actions, citizen must be authenticated in the system, exit when citizen accesses specific functionality information.",
            "score": 0.77004634141922,
            "correct": false
        },
        {
            "ServletMostraAccessoA": "- view access information, allow citizen to view their access information, citizen. citizen accesses system, system retrieves access details from database, system displays access information on user interface, exit when citizen views data or error occurs, citizen must be authenticated in the system.",
            "EA41": "view application, allow citizen to view their applications, citizen. citizen clicks view applications button (identity card, change of residence), system displays screen with citizen's applications, exit conditions include viewing screen or invoking delete application when deleting or invoking modify application when modifying or invoking service unavailable use case, citizen must be authenticated in the system.",
            "score": 0.7694004833698272,
            "correct": false
        },
        {
            "ServletMostraAccessoA": "- view access information, allow citizen to view their access information, citizen. citizen accesses system, system retrieves access details from database, system displays access information on user interface, exit when citizen views data or error occurs, citizen must be authenticated in the system.",
            "EA74": "view territory events information, allow citizen to view event details, citizen. citizen requests event list display, system shows event list, citizen selects event, system displays event information including location, date and time, pro-loco event management site, citizen must be logged into the system, exit when citizen views information or is redirected to event site for booking.",
            "score": 0.765656304359436,
            "correct": false
        },
        {
            "ServletCaricaPratica": "- load application data, allow employee to access citizen and identity card information for application processing, employee. employee selects citizen application from list, system retrieves citizen data and identity card details, system displays application form with pre-filled data, employee must have valid access permissions, citizen must exist in system with valid identity card.",
            "EA30": "request identity card, allow citizen to request an identity card and employee to process it, citizen, employee. citizen views family status and selects family member, system displays form for personal data input (height, distinctive features etc.), citizen enters data, selects payment method, confirms, system shows documentation to present at office counter during opening hours, citizen confirms, system notifies employee of request, employee receives application and chooses to accept or reject invoking request identity card rejected or request identity card accepted use cases, handle service unavailable by invoking service unavailable use case, citizen must be authenticated in the system and exercise parental authority over subject.",
            "score": 0.7629001021385193,
            "correct": false
        },
        {
            "ServletMostraAccessoA": "- view access information, allow citizen to view their access information, citizen. citizen accesses system, system retrieves access details from database, system displays access information on user interface, exit when citizen views data or error occurs, citizen must be authenticated in the system.",
            "EA83": "view regulatory plan, allow citizen to view the regulatory plan document, citizen. citizen accesses regulatory plan area via specific link, system displays document, citizen must have accessed the system, exit conditions include system showing plan or invoking service unavailable use case for technical failures.",
            "score": 0.7538443326950074,
            "correct": false
        },
        {
            "ServletCaricaPratica": "- load application data, allow employee to access citizen and identity card information for application processing, employee. employee selects citizen application from list, system retrieves citizen data and identity card details, system displays application form with pre-filled data, employee must have valid access permissions, citizen must exist in system with valid identity card.",
            "EA31": "accept identity card request, allow employee to process and confirm citizen's identity card request, employee, citizen. employee views notification, system displays identity card creation request, employee certifies request validity by checking data accuracy and enables creation procedure, system sends confirmation email to citizen, citizen goes to counter, extends request identity card use case when employee confirms citizen's request, system notifies citizen as exit condition, employee must be authenticated in the system.",
            "score": 0.753684002161026,
            "correct": false
        },
        {
            "Impiegato": "- manage employee information, allow administrator to manage employee records, administrator. administrator accesses employee management section, system displays employee list, administrator selects to add or edit an employee, system shows form with fields (name, surname, matriculation number, email, login), administrator enters or updates data and submits, system validates and saves employee details, exit conditions include data saved successfully or error due to invalid input, employee matriculation number must be unique and follow [a-z0-9] format, email must be valid format.",
            "EA104": "manage modifications, allow employee to manage civil protection forms, employee. employee authenticates and accesses civil protection functionality to modify forms, system displays update options including update weather conditions update environmental analyses update bansandcompetitions, employee selects functionality, system provides requested edit form, handle technical failures by invoking service unavailable use case when employee cannot view form page, correct form submission or service failure are exit conditions, employee must be authenticated in municipal system.",
            "score": 0.7531801879405975,
            "correct": false
        },
        {
            "Impiegato": "- manage employee information, allow administrator to manage employee records, administrator. administrator accesses employee management section, system displays employee list, administrator selects to add or edit an employee, system shows form with fields (name, surname, matriculation number, email, login), administrator enters or updates data and submits, system validates and saves employee details, exit conditions include data saved successfully or error due to invalid input, employee matriculation number must be unique and follow [a-z0-9] format, email must be valid format.",
            "EA12": "modify administrator email, allow administrator to update their email address, administrator. administrator accesses email modification form, system displays new email entry form, administrator enters new email and confirms, system updates email, administrator must be authenticated in the system, exit conditions include system saving new email, detecting error invoking invalid data use case, or service unavailable invoking service unavailable use case.",
            "score": 0.7515258193016052,
            "correct": false
        },
        {
            "ServletLogin": "- administrator authentication, allow administrator to authenticate into the system, administrator. administrator accesses system, system displays login form for credentials input, administrator enters data and submits authentication request, system verifies data and grants access with specified permissions, exit conditions include successful access or invalid credentials invoking invalid data use case or service unavailable invoking service unavailable use case, username must be present with [a-za-z0-9._-] characters under 30 length, password must be present with [a-za-z0-9._-*+!?,:;àèéìòù] characters between 8-15 length.\n- authenticate citizen, allow citizen to log in handling incorrect data and service unavailability, citizen. citizen accesses authentication session, system displays login form, citizen enters credentials and submits, system verifies and grants access, handle incorrect data by invoking incorrect data use case, handle service unavailable by invoking service unavailable use case, username must exist in system with [a-za-z0-9.-_] characters and length <30, password must exist in system with [a-za-z0-9.-_*+!?,:;àèéìòù] characters and length 8-15.\n- employee authentication, allow employee to authenticate into the system, employee. employee accesses authentication session, system displays login form for data entry, employee enters credentials and submits authentication request, system verifies data correctness and grants access, handle incorrect data by invoking incorrect data use case or service unavailable by invoking service unavailable use case, employee must have system access. username must exist, be well-formed with [a-za-z0-9 .-_], length under 30 characters, and not empty. password must exist, be well-formed with [a-za-z0-9.-_*+!?,:;àèéìòù], length between 8-15 characters.\n- incorrect data, handle incorrect input exceptions by redisplaying form, citizen. system displays error message indicating incorrect request, citizen reads notification message, system redisplays input form, exit when form is redisplayed, extends other use cases to handle input error failures.",
            "EA22": "register citizen, allow citizen to register in the system, citizen. citizen accesses registration form, system displays registration form, citizen enters data and confirms, system verifies data correctness, saves data and sends registration email to citizen, entry condition: citizen has accessed the system, exit conditions: system registers citizen or invalid data invoking invalid data use case or service unavailable invoking service unavailable use case, quality requirements: name string matches identity card holder's name with [a-za-z'àéèìòù], length <30, not empty, surname string matches identity card holder's surname with [a-za-z'àéèìòù], length <30, not empty, fiscal code string complies with regulations and 16 characters, identity card string exists in system as xxnnnnnnn format (9 characters), email string follows x@x.x format, length <31, not empty, username not existing in system, contains [a-za-z0-9.-_], length <30, not empty, password contains [a-za-z0-9.-_*+!?,:;àèéìòù], length 8-15.",
            "score": 0.7503390192985535,
            "correct": false
        }
    ],
    "fn": [
        {
            "DbCittadino": "- register citizen, allow citizen to create a municipal service account, citizen. citizen accesses registration form, enters personal details (name, surname, tax code, birth date/place, email, family unit), submits data, system validates and stores record, exit conditions include successful registration or error handling for duplicate tax code/login or invalid data formats, tax code must follow [a-z0-9] 16-character format, email must contain @ and valid domain structure.  \n- modify citizen profile, allow citizen to update personal information, citizen. citizen accesses profile modification interface, edits editable fields (name, surname, email, family unit), confirms changes, system validates and updates records, citizen must have active authenticated session, exit conditions include successful update or error handling for invalid email format or non-existent family unit.  \n- delete citizen record, allow administrator to remove citizen from system, administrator. administrator searches citizen by id/tax code/name, selects delete action, confirms removal, system removes citizen data and related records, administrator must have deletion privileges, exit conditions include permanent deletion or error handling for non-existent citizen id.  \n- search citizen records, allow employee to retrieve citizen information, employee. employee enters search criteria (full name or tax code), system returns matching citizen profiles with core attributes, employee must have search permissions, exit conditions include displaying results or handling no-match scenarios through empty result set.  \n- manage family unit association, enable citizens to update household membership, citizen. citizen accesses family status section, requests modification to family unit id, system validates new household existence, updates database linkage, exit conditions include successful association change or error handling for invalid family unit id, family unit must be pre-registered in municipal registry.",
            "EA28": "delete application, allow citizen to delete an application, citizen. press application deletion button for identity card or change of residence if not initialized, system requests confirmation, citizen confirms, system deletes application, citizen must be authenticated in the system, extends view application use case, exit conditions include citizen not confirming or system deleting application or invoking service unavailable use case.",
            "score": 0.4699954897165298,
            "correct": true
        },
        {
            "Accesso": "- register citizen access, allow citizen to create system access credentials, citizen. citizen accesses registration form, system displays login, password, and type fields, citizen enters data and submits, system stores credentials with type 'cittadino', citizen must provide unique login and valid password format, exit conditions include successful registration or duplicate login error.  \n- register employee access, allow administrator to create employee system access, administrator. administrator accesses employee registration interface, enters employee login, password, and sets type 'impiegato', system validates and stores credentials, administrator must have valid privileges, login must follow [a-za-z0-9._-] format under 30 characters.  \n- register administrator access, allow system to initialize administrator credentials, administrator. system administrator accesses privileged registration module, inputs login, password, and assigns type 'amministratore', system encrypts and stores credentials, requires unique login matching [a-za-z0-9._-] pattern under 30 characters.",
            "EA21": "employee password recovery, allow employee to recover password, employee. employee forgets password and presses recovery button, system displays form for entering employee id, employee enters id and confirms, system verifies data and sends password to email, handle incorrect data by invoking incorrect data use case or service unavailable by invoking service unavailable use case, employee must be authenticated in the system.",
            "score": 0.46378896236419676,
            "correct": true
        },
        {
            "ServletMostraAccesso": "- view access details, allow administrator and employee to view their access credentials, administrator and employee. user navigates to access details section, system retrieves stored login information from database, system displays login details on interface, user must have active authentication session, exit conditions include successful credential display or database error invoking service unavailable use case.",
            "EA138": "incorrect data, handle incorrect input exceptions by redisplaying form, citizen. system displays error message indicating incorrect request, citizen reads notification message, system redisplays input form, exit when form is redisplayed, extends other use cases to handle input error failures.",
            "score": 0.45809814929962156,
            "correct": true
        },
        {
            "ControllerFiles": "- upload change of residence request documents, allow employee to upload supporting documents for residence change requests, employee. employee selects document upload function, system displays upload form, employee enters document description and selects file, system validates file type and size, employee confirms upload, system saves document to residence change request folder, exit conditions include successful upload or invalid file type/size invoking invalid data use case, maximum file size 500mb, supported file types determined by system mime types.  \n- invalid file upload, handle invalid file upload exceptions by redisplaying form, employee. system detects invalid file type or size exceeding limit, displays error message, employee reviews error and retries upload, exit when form is redisplayed with error notification, extends upload change of residence request documents use case.",
            "EA33": "request certificates, allow citizen to request certificates, citizen. citizen selects specific certificate (civil registry certificates, civil status certificates), system displays data entry form, citizen enters subject's data, system shows requested certificate, citizen selects payment and delivery method, system sends certificate, citizen must be authenticated in the system, exit conditions include system sending certificate or invoking incorrect data use case if person not found or service unavailable use case if service unavailable, surname can contain [a-z, a-z, ', àéèìòù] with length 1-30, name same as surname, birth place same characters with minimum length 1, birth province same characters minimum length 1, birth date must be real in dd/mm/yyyy numeric format (day 1-31, month 1-12, year 1900-current), residence can contain [a-z, a-z, ', àéèìòù, .] minimum length 1, residence province same characters minimum length 1, address same characters minimum length 1.",
            "score": 0.4570427745580673,
            "correct": true
        },
        {
            "ServletRisposta": "- change of residence, allow citizen to declare residence change with family unit details, citizen. citizen accesses residence change form, system displays data entry fields for old and new address, family members, and occupancy status, citizen enters data and submits, system generates pdf declaration, citizen must be authenticated, exit conditions include system storing declaration as pending request, invoking incorrect data use case if mandatory fields missing or invalid dates, invoking service unavailable use case if pdf generation fails. surname must be [a-zàéèìòù'] uppercase, name same as surname, birth city same characters, birth date valid dd/mm/yyyy, new address same characters, new municipality same characters, family members require name, surname, birth details, occupancy status must be specified.\n- declare third party occupants, allow citizen to list occupants in new residence, citizen. citizen selects occupied residence option, system displays occupant entry form, citizen enters occupant names and relationships, system includes occupants in declaration, exit conditions include system saving occupant details or invoking incorrect data use case if occupant names invalid, citizen must declare occupancy status as occupied. occupant names must be [a-zàéèìòù'] uppercase, minimum 1 character, relationship must be specified.\n- incorrect data, handle incorrect input exceptions by redisplaying form, citizen. system displays error message indicating incorrect request, citizen reads notification message, system redisplays input form, exit when form is redisplayed, extends other use cases to handle input error failures.",
            "EA32": "request rejected identity card, allow employee to reject an identity card request when errors are detected, employee, citizen. employee views received notification, system displays identity card creation request, employee detects data error and rejects procedure, system sends email notification to requesting citizen, system must notify citizen as exit condition, employee must be authenticated in the system, extends request identity card use case when employee does not confirm citizen request.",
            "score": 0.4548445165157318,
            "correct": true
        },
        {
            "ServletVisualizzaPratiche": "- view applications, allow employee to view all submitted applications, employee. employee accesses application list, system retrieves and displays list of applications, employee scrolls through list to inspect application details, exit when list is displayed or service unavailable invoking service unavailable use case, employee must have system access.",
            "EA28": "delete application, allow citizen to delete an application, citizen. press application deletion button for identity card or change of residence if not initialized, system requests confirmation, citizen confirms, system deletes application, citizen must be authenticated in the system, extends view application use case, exit conditions include citizen not confirming or system deleting application or invoking service unavailable use case.",
            "score": 0.4481847196817398,
            "correct": true
        },
        {
            "DbCittadino": "- register citizen, allow citizen to create a municipal service account, citizen. citizen accesses registration form, enters personal details (name, surname, tax code, birth date/place, email, family unit), submits data, system validates and stores record, exit conditions include successful registration or error handling for duplicate tax code/login or invalid data formats, tax code must follow [a-z0-9] 16-character format, email must contain @ and valid domain structure.  \n- modify citizen profile, allow citizen to update personal information, citizen. citizen accesses profile modification interface, edits editable fields (name, surname, email, family unit), confirms changes, system validates and updates records, citizen must have active authenticated session, exit conditions include successful update or error handling for invalid email format or non-existent family unit.  \n- delete citizen record, allow administrator to remove citizen from system, administrator. administrator searches citizen by id/tax code/name, selects delete action, confirms removal, system removes citizen data and related records, administrator must have deletion privileges, exit conditions include permanent deletion or error handling for non-existent citizen id.  \n- search citizen records, allow employee to retrieve citizen information, employee. employee enters search criteria (full name or tax code), system returns matching citizen profiles with core attributes, employee must have search permissions, exit conditions include displaying results or handling no-match scenarios through empty result set.  \n- manage family unit association, enable citizens to update household membership, citizen. citizen accesses family status section, requests modification to family unit id, system validates new household existence, updates database linkage, exit conditions include successful association change or error handling for invalid family unit id, family unit must be pre-registered in municipal registry.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.4435437738895416,
            "correct": true
        },
        {
            "Cittadino": "- citizen registration, allow citizen to register in the system, citizen. citizen accesses registration form, system displays personal data entry fields (tax code, surname, name, birth date, birth place, email), citizen submits data, system stores citizen profile, citizen must provide valid tax code and birth details, exit conditions include successful registration or invalid data invoking error handling.  \n- update citizen profile, allow citizen to modify personal information, citizen. citizen accesses profile management, system displays editable fields (email, communication preferences), citizen updates data and confirms, system saves changes, citizen must be authenticated, exit conditions include profile updated or service unavailable error.  \n- manage family unit association, allow citizen to link to family unit, citizen. citizen accesses family unit section, system displays current association or input form, citizen enters family unit identifier, system validates and links citizen, exit conditions include successful linkage or invalid family unit invoking error handling.  \n- communication preference management, allow citizen to set advertisement subscription, citizen. citizen accesses settings, system displays subscription toggle, citizen enables/disables preference, system updates subscription status, exit conditions include preference saved or service error.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.4310487270355225,
            "correct": true
        },
        {
            "DbComune": "- insert municipality, allow administrator to add new municipality records, administrator. administrator accesses municipality insertion form, system displays data entry fields, administrator enters municipality name and address identifier, system saves new record, exit conditions include successful insertion or error if municipality name already exists, municipality name must be unique and follow [a-za-zàèéìòùàèéìòù'] with length 1-50 characters, address identifier must follow [a-za-z0-9_-] with length 1-50 characters.  \n- delete municipality, allow administrator to remove municipality records, administrator. administrator selects municipality to delete, system verifies existence, administrator confirms deletion, system removes record, exit conditions include successful deletion or error if municipality does not exist, municipality must exist in system.  \n- view municipality details, allow employee to retrieve municipality information, employee. employee searches municipality by name, system displays name and associated address identifier, exit conditions include displaying details or error if municipality not found, municipality name must exist in system.",
            "EA2": "authenticate citizen, allow citizen to log in handling incorrect data and service unavailability, citizen. citizen accesses authentication session, system displays login form, citizen enters credentials and submits, system verifies and grants access, handle incorrect data by invoking incorrect data use case, handle service unavailable by invoking service unavailable use case, username must exist in system with [a-za-z0-9.-_] characters and length <30, password must exist in system with [a-za-z0-9.-_*+!?,:;àèéìòù] characters and length 8-15.",
            "score": 0.43046414852142334,
            "correct": true
        },
        {
            "ServletVisualizzaPratiche": "- view applications, allow employee to view all submitted applications, employee. employee accesses application list, system retrieves and displays list of applications, employee scrolls through list to inspect application details, exit when list is displayed or service unavailable invoking service unavailable use case, employee must have system access.",
            "EA29": "modify application, allow citizen to modify an application if not initialized, citizen. citizen presses modify application button (identity card, change of residence), system displays application modification form, citizen enters data, system saves changes, citizen must be authenticated in the system, extends view application use case when citizen wants to modify application, system modifies application or handles service unavailable by invoking service unavailable use case.",
            "score": 0.4278156220912933,
            "correct": true
        },
        {
            "ControllerFiles": "- upload change of residence request documents, allow employee to upload supporting documents for residence change requests, employee. employee selects document upload function, system displays upload form, employee enters document description and selects file, system validates file type and size, employee confirms upload, system saves document to residence change request folder, exit conditions include successful upload or invalid file type/size invoking invalid data use case, maximum file size 500mb, supported file types determined by system mime types.  \n- invalid file upload, handle invalid file upload exceptions by redisplaying form, employee. system detects invalid file type or size exceeding limit, displays error message, employee reviews error and retries upload, exit when form is redisplayed with error notification, extends upload change of residence request documents use case.",
            "EA34": "request third party certificates, allow citizen to request certificates for third parties, citizen. citizen selects specific certificate (civil status certificates, registry certificates), system displays data entry form for subject person, citizen enters subject's data (see note), system stores citizen and subject data in dedicated module, system displays requested certificate screen, citizen selects payment and delivery method, system sends certificate, citizen must be authenticated in system, exit conditions include system sending certificate or invoking service unavailable use case, if citizen is not close relative of subject must specify valid request reason.",
            "score": 0.4266799569129944,
            "correct": true
        },
        {
            "ServletStatoDiFamiglia": "- view family status, allow citizen to view their family unit composition, citizen. citizen accesses family status section, system requests family unit id, citizen provides id, system retrieves and displays family members list, exit conditions include family members list displayed or invalid id invoking invalid data use case, family unit id must exist in system and be valid.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.4241838902235031,
            "correct": true
        },
        {
            "ServletRicercaCittadino": "- search citizen by name and surname, allow employee to find citizen records using name and surname, employee. employee accesses search form, system displays input fields for name and surname, employee enters data and submits search request, system retrieves matching citizen records, employee must have valid system access, exit conditions include system displaying matching results or no results message, name must be non-empty with [a-zàèéìòù'] characters, surname same as name.\n\n- search citizen by identity card code, allow employee to retrieve citizen data via identity card number, employee. employee inputs identity card code in search form, system queries database for matching code, system displays citizen details if found, employee must be authenticated, exit conditions include citizen details shown or error message if code not found, identity card code must exist in system and be valid format.\n\n- handle no search results, manage scenarios where citizen search yields no matches, employee. system displays no results message, employee reviews search criteria, system redisplays search form, exit when form is redisplayed, extends citizen search use cases to handle empty result sets.\n\n- session validation for citizen search, ensure employee session is active during search operations, employee. system checks session validity upon search request, redirects to login if session invalid, employee must have active session to perform searches, exit conditions include valid session proceeding to search or invalid session redirecting to login.",
            "EA21": "employee password recovery, allow employee to recover password, employee. employee forgets password and presses recovery button, system displays form for entering employee id, employee enters id and confirms, system verifies data and sends password to email, handle incorrect data by invoking incorrect data use case or service unavailable by invoking service unavailable use case, employee must be authenticated in the system.",
            "score": 0.4232130169868469,
            "correct": true
        },
        {
            "CittadinoManager": "- register citizen, allow citizen to register in the system, citizen. citizen accesses registration form, system displays input fields for personal data, citizen enters details and submits, system saves citizen information, exit conditions include successful registration or invalid data invoking error handling, login must be unique and follow [a-za-z0-9.-_] format, email must be valid format.  \n- modify citizen login, allow citizen to update their login credentials, citizen. citizen accesses profile settings, system displays login modification form, citizen enters new login and confirms, system updates login information, citizen must exist in the system, exit includes successful update or error if login already exists.  \n- modify citizen email, allow citizen to change their email address, citizen. citizen navigates to email settings, system displays email update form, citizen enters new email and submits, system validates and saves new email, exit when email updated or invalid format error occurs.  \n- search citizen, allow employee to find citizens by name and surname, employee. employee enters search criteria (name and/or surname), system retrieves matching citizens, employee views results list, exit when results displayed or no matches found.  \n- delete citizen record, allow administrator to remove citizen from system, administrator. administrator selects citizen record, confirms deletion request, system permanently removes citizen data, citizen must exist in the system prior to deletion.  \n- update family unit, allow employee to modify citizen's family unit association, employee. employee selects citizen and new family unit, system updates family unit linkage, exit when association changed or invalid unit error occurs.  \n- modify citizen name, allow citizen to update their legal name, citizen. citizen accesses name change form, enters new name and submits, system validates and updates record, name must contain only [a-zàèéìòù] characters with 1-30 length.  \n- modify citizen surname, allow citizen to update their legal surname, citizen. citizen accesses surname modification form, enters new surname and confirms, system validates and saves changes, surname follows same format constraints as name.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.4185545206069946,
            "correct": true
        },
        {
            "ServletRisposta": "- change of residence, allow citizen to declare residence change with family unit details, citizen. citizen accesses residence change form, system displays data entry fields for old and new address, family members, and occupancy status, citizen enters data and submits, system generates pdf declaration, citizen must be authenticated, exit conditions include system storing declaration as pending request, invoking incorrect data use case if mandatory fields missing or invalid dates, invoking service unavailable use case if pdf generation fails. surname must be [a-zàéèìòù'] uppercase, name same as surname, birth city same characters, birth date valid dd/mm/yyyy, new address same characters, new municipality same characters, family members require name, surname, birth details, occupancy status must be specified.\n- declare third party occupants, allow citizen to list occupants in new residence, citizen. citizen selects occupied residence option, system displays occupant entry form, citizen enters occupant names and relationships, system includes occupants in declaration, exit conditions include system saving occupant details or invoking incorrect data use case if occupant names invalid, citizen must declare occupancy status as occupied. occupant names must be [a-zàéèìòù'] uppercase, minimum 1 character, relationship must be specified.\n- incorrect data, handle incorrect input exceptions by redisplaying form, citizen. system displays error message indicating incorrect request, citizen reads notification message, system redisplays input form, exit when form is redisplayed, extends other use cases to handle input error failures.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.406717899441719,
            "correct": true
        },
        {
            "ServletCreaPdfCambioAbitazione": "- declare residence change, allow citizen to declare change of residence, citizen. citizen accesses residence change form, system displays data entry fields for new address and family unit details, citizen submits declaration, system generates official pdf document with declared information, citizen must provide valid identity document and authenticate in the system, exit conditions include system generating pdf or invoking incorrect data use case if required fields missing, new address must follow [a-zàèéìòù' .] characters with minimum 1 character length, civic number must be numeric 1-5 digits.  \n- update family unit composition, enable citizen to specify family members moving together, citizen. citizen lists family members in declaration form including parentage relations, system validates family status consistency, system records updated family unit data, exit when family member table appears in generated pdf, family member names must use [a-zàèéìòù' .] characters with 1-30 length, birth dates require valid dd/mm/yyyy format.  \n- remove citizen record, handle citizen relocation outside municipality, employee. system detects residence change to external municipality, employee verifies relocation authenticity, system deletes citizen access and family unit records, exit when citizen data removed from database, requires municipal police confirmation of address validity.  \n- validate property occupancy, ensure declared residence occupancy compliance, employee. system cross-checks property ownership/rental status with municipal registry, employee confirms occupancy legitimacy through police municipal report, exit when pdf includes authorized officer's disposition statement, rental properties require active contract registration in municipal archive.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.4010940045118332,
            "correct": true
        },
        {
            "DbCambioResidenza": "- update residence, allow citizen to change residence address within the same municipality, citizen. citizen submits new address details, system updates identity card with new address, citizen must have valid identity card, exit conditions include system updating address or invalid identity card number invoking incorrect data use case, new address must include valid street name and civic number.  \n- delete identity card, allow system to delete identity card when citizen changes residence to external municipality, administrator. system detects external municipality change, system deletes citizen's identity card, exit conditions include identity card deletion or service unavailable invoking service unavailable use case, citizen must have valid identity card registered in the system.  \n- modify residence data, allow system to update residence information in identity card, employee. employee accesses residence modification function, system retrieves identity card data, employee enters new residence details and confirms, system updates identity card, exit conditions include data updated or invalid input invoking incorrect data use case, new residence must have valid street name and numeric civic number.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.38198568820953366,
            "correct": true
        },
        {
            "ServletCreaPdfCittadino": "- declare residence change, allow citizen to submit change of residence declaration, citizen. citizen accesses residence change form, enters personal data, previous and new address details, system generates pdf declaration, citizen must provide valid identity data and family member details, exit conditions include pdf generation or error due to invalid input, name and surname must contain [a-z, àèéìòù] with length 1-30, birth date in dd/mm/yyyy format, addresses must have valid municipality names and street formats.  \n- declare family status, allow citizen to declare family unit composition during residence change, citizen. citizen lists family members with names, birthplaces, and birth dates, system includes family data in residence declaration pdf, family members must be valid with correctly formatted data, parentela fields require valid kinship terms.  \n- specify occupancy status, allow citizen to indicate new residence occupancy status, citizen. citizen selects if residence is free or occupied, if occupied enters occupant details, system adds occupancy information to pdf, occupants' names and surnames must follow [a-z, àèéìòù] format, relationship to declarant must be specified if applicable.  \n- incorrect data, handle invalid input during residence declaration, citizen. system redisplays form with error messages for invalid fields, citizen corrects entries and resubmits, exit when valid submission occurs, extends residence change use case.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.3482141137123108,
            "correct": true
        },
        {
            "Cittadino": "- citizen registration, allow citizen to register in the system, citizen. citizen accesses registration form, system displays personal data entry fields (tax code, surname, name, birth date, birth place, email), citizen submits data, system stores citizen profile, citizen must provide valid tax code and birth details, exit conditions include successful registration or invalid data invoking error handling.  \n- update citizen profile, allow citizen to modify personal information, citizen. citizen accesses profile management, system displays editable fields (email, communication preferences), citizen updates data and confirms, system saves changes, citizen must be authenticated, exit conditions include profile updated or service unavailable error.  \n- manage family unit association, allow citizen to link to family unit, citizen. citizen accesses family unit section, system displays current association or input form, citizen enters family unit identifier, system validates and links citizen, exit conditions include successful linkage or invalid family unit invoking error handling.  \n- communication preference management, allow citizen to set advertisement subscription, citizen. citizen accesses settings, system displays subscription toggle, citizen enables/disables preference, system updates subscription status, exit conditions include preference saved or service error.",
            "EA21": "employee password recovery, allow employee to recover password, employee. employee forgets password and presses recovery button, system displays form for entering employee id, employee enters id and confirms, system verifies data and sends password to email, handle incorrect data by invoking incorrect data use case or service unavailable by invoking service unavailable use case, employee must be authenticated in the system.",
            "score": 0.33865487873554234,
            "correct": true
        },
        {
            "DbCittadino": "- register citizen, allow citizen to create a municipal service account, citizen. citizen accesses registration form, enters personal details (name, surname, tax code, birth date/place, email, family unit), submits data, system validates and stores record, exit conditions include successful registration or error handling for duplicate tax code/login or invalid data formats, tax code must follow [a-z0-9] 16-character format, email must contain @ and valid domain structure.  \n- modify citizen profile, allow citizen to update personal information, citizen. citizen accesses profile modification interface, edits editable fields (name, surname, email, family unit), confirms changes, system validates and updates records, citizen must have active authenticated session, exit conditions include successful update or error handling for invalid email format or non-existent family unit.  \n- delete citizen record, allow administrator to remove citizen from system, administrator. administrator searches citizen by id/tax code/name, selects delete action, confirms removal, system removes citizen data and related records, administrator must have deletion privileges, exit conditions include permanent deletion or error handling for non-existent citizen id.  \n- search citizen records, allow employee to retrieve citizen information, employee. employee enters search criteria (full name or tax code), system returns matching citizen profiles with core attributes, employee must have search permissions, exit conditions include displaying results or handling no-match scenarios through empty result set.  \n- manage family unit association, enable citizens to update household membership, citizen. citizen accesses family status section, requests modification to family unit id, system validates new household existence, updates database linkage, exit conditions include successful association change or error handling for invalid family unit id, family unit must be pre-registered in municipal registry.",
            "EA21": "employee password recovery, allow employee to recover password, employee. employee forgets password and presses recovery button, system displays form for entering employee id, employee enters id and confirms, system verifies data and sends password to email, handle incorrect data by invoking incorrect data use case or service unavailable by invoking service unavailable use case, employee must be authenticated in the system.",
            "score": 0.32318574488163,
            "correct": true
        }
    ]
}