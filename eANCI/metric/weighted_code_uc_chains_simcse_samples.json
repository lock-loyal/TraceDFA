{
    "fp": [
        {
            "CIManager": "- retrieve identity card by number, allow employee to retrieve citizen's identity card details using card number, employee. employee accesses identity card retrieval function, system prompts for card number input, employee enters number and submits request, system displays identity card data, employee must have system access, exit conditions include system displaying data or invoking invalid data use case if card not found, card number must exist in system and be valid.  \n- retrieve identity card by citizen id, allow employee to retrieve identity card details by citizen identifier, employee. employee selects citizen identifier, system retrieves associated identity card information, employee views identity card data, exit conditions include system displaying data or invoking invalid data use case if citizen id not found, citizen must have valid identity card registered in system.  \n- incorrect data, handle incorrect input exceptions by redisplaying form, citizen. system displays error message indicating incorrect request, citizen reads notification message, system redisplays input form, exit when form is redisplayed, extends other use cases to handle input error failures.",
            "EA139": "service unavailable, handle technical failure exceptions by displaying notification messages, citizen. system displays terminal message indicating request cannot be processed, citizen reads notification message, system redisplays input form, use case extends other cases to handle technical failure exceptions, exit when input form is redisplayed.",
            "score": 0.9343585312366487,
            "correct": false
        },
        {
            "ServletLogin": "- administrator authentication, allow administrator to authenticate into the system, administrator. administrator accesses system, system displays login form for credentials input, administrator enters data and submits authentication request, system verifies data and grants access with specified permissions, exit conditions include successful access or invalid credentials invoking invalid data use case or service unavailable invoking service unavailable use case, username must be present with [a-za-z0-9._-] characters under 30 length, password must be present with [a-za-z0-9._-*+!?,:;àèéìòù] characters between 8-15 length.\n- authenticate citizen, allow citizen to log in handling incorrect data and service unavailability, citizen. citizen accesses authentication session, system displays login form, citizen enters credentials and submits, system verifies and grants access, handle incorrect data by invoking incorrect data use case, handle service unavailable by invoking service unavailable use case, username must exist in system with [a-za-z0-9.-_] characters and length <30, password must exist in system with [a-za-z0-9.-_*+!?,:;àèéìòù] characters and length 8-15.\n- employee authentication, allow employee to authenticate into the system, employee. employee accesses authentication session, system displays login form for data entry, employee enters credentials and submits authentication request, system verifies data correctness and grants access, handle incorrect data by invoking incorrect data use case or service unavailable by invoking service unavailable use case, employee must have system access. username must exist, be well-formed with [a-za-z0-9 .-_], length under 30 characters, and not empty. password must exist, be well-formed with [a-za-z0-9.-_*+!?,:;àèéìòù], length between 8-15 characters.\n- incorrect data, handle incorrect input exceptions by redisplaying form, citizen. system displays error message indicating incorrect request, citizen reads notification message, system redisplays input form, exit when form is redisplayed, extends other use cases to handle input error failures.",
            "EA139": "service unavailable, handle technical failure exceptions by displaying notification messages, citizen. system displays terminal message indicating request cannot be processed, citizen reads notification message, system redisplays input form, use case extends other cases to handle technical failure exceptions, exit when input form is redisplayed.",
            "score": 0.9343585312366487,
            "correct": false
        },
        {
            "ServletRisposta": "- change of residence, allow citizen to declare residence change with family unit details, citizen. citizen accesses residence change form, system displays data entry fields for old and new address, family members, and occupancy status, citizen enters data and submits, system generates pdf declaration, citizen must be authenticated, exit conditions include system storing declaration as pending request, invoking incorrect data use case if mandatory fields missing or invalid dates, invoking service unavailable use case if pdf generation fails. surname must be [a-zàéèìòù'] uppercase, name same as surname, birth city same characters, birth date valid dd/mm/yyyy, new address same characters, new municipality same characters, family members require name, surname, birth details, occupancy status must be specified.\n- declare third party occupants, allow citizen to list occupants in new residence, citizen. citizen selects occupied residence option, system displays occupant entry form, citizen enters occupant names and relationships, system includes occupants in declaration, exit conditions include system saving occupant details or invoking incorrect data use case if occupant names invalid, citizen must declare occupancy status as occupied. occupant names must be [a-zàéèìòù'] uppercase, minimum 1 character, relationship must be specified.\n- incorrect data, handle incorrect input exceptions by redisplaying form, citizen. system displays error message indicating incorrect request, citizen reads notification message, system redisplays input form, exit when form is redisplayed, extends other use cases to handle input error failures.",
            "EA139": "service unavailable, handle technical failure exceptions by displaying notification messages, citizen. system displays terminal message indicating request cannot be processed, citizen reads notification message, system redisplays input form, use case extends other cases to handle technical failure exceptions, exit when input form is redisplayed.",
            "score": 0.9343585312366487,
            "correct": false
        },
        {
            "ServletRicercaImpiegato": "- search employee, allow administrator to search for employee data, administrator. administrator accesses employee search form, system displays search criteria input, administrator enters employee identifier (matricola), system retrieves employee data, administrator must have valid system access, exit conditions include system displaying employee details or invoking employee not found error if identifier invalid or service unavailable use case if database error occurs, employee identifier must exist and follow valid format.\n- employee not found error, handle invalid employee identifier during search, administrator. system displays error message indicating no employee found, administrator reviews error notification, system returns to search form, exit when error message displayed, extends employee search use case when invalid identifier provided.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.928816020488739,
            "correct": false
        },
        {
            "ServletLogin": "- administrator authentication, allow administrator to authenticate into the system, administrator. administrator accesses system, system displays login form for credentials input, administrator enters data and submits authentication request, system verifies data and grants access with specified permissions, exit conditions include successful access or invalid credentials invoking invalid data use case or service unavailable invoking service unavailable use case, username must be present with [a-za-z0-9._-] characters under 30 length, password must be present with [a-za-z0-9._-*+!?,:;àèéìòù] characters between 8-15 length.\n- authenticate citizen, allow citizen to log in handling incorrect data and service unavailability, citizen. citizen accesses authentication session, system displays login form, citizen enters credentials and submits, system verifies and grants access, handle incorrect data by invoking incorrect data use case, handle service unavailable by invoking service unavailable use case, username must exist in system with [a-za-z0-9.-_] characters and length <30, password must exist in system with [a-za-z0-9.-_*+!?,:;àèéìòù] characters and length 8-15.\n- employee authentication, allow employee to authenticate into the system, employee. employee accesses authentication session, system displays login form for data entry, employee enters credentials and submits authentication request, system verifies data correctness and grants access, handle incorrect data by invoking incorrect data use case or service unavailable by invoking service unavailable use case, employee must have system access. username must exist, be well-formed with [a-za-z0-9 .-_], length under 30 characters, and not empty. password must exist, be well-formed with [a-za-z0-9.-_*+!?,:;àèéìòù], length between 8-15 characters.\n- incorrect data, handle incorrect input exceptions by redisplaying form, citizen. system displays error message indicating incorrect request, citizen reads notification message, system redisplays input form, exit when form is redisplayed, extends other use cases to handle input error failures.",
            "EA21": "employee password recovery, allow employee to recover password, employee. employee forgets password and presses recovery button, system displays form for entering employee id, employee enters id and confirms, system verifies data and sends password to email, handle incorrect data by invoking incorrect data use case or service unavailable by invoking service unavailable use case, employee must be authenticated in the system.",
            "score": 0.9236533403396606,
            "correct": false
        },
        {
            "ServletModificaImpiegato": "- modify employee personal information, allow administrator to update employee's personal details, administrator. administrator accesses employee modification form, system displays employee search by id, administrator enters valid employee id and submits, system retrieves employee data and displays edit form, administrator modifies details (name, surname, email) and confirms, system saves updated information, administrator must be authenticated, exit conditions include successful update or error if invalid employee id.  \n- update employee access credentials, allow administrator to change employee's login credentials, administrator. administrator selects employee via valid id search, system displays current login/password fields, administrator enters new credentials and confirms, system verifies format and updates records, exit when credentials modified or error if password violates length/special character rules.  \n- employee search by id, enable administrator to locate employee records, administrator. administrator initiates employee modification process, system requires valid employee id input, administrator enters id and submits search, system verifies id existence and retrieves data, invalid id triggers error notification.  \n- handle modification errors, manage database exceptions during employee updates, administrator. system detects database errors during save operation, displays service unavailable message, administrator returns to employee management dashboard, extends modification use cases with error recovery path.",
            "EA18": "modify password employee, allow employee to modify their password, employee. employee presses password modification button, system displays form for old and new password entry, employee enters old and new passwords and confirms, system notifies password updated, exit conditions include password modified, invalid data use case called if password under 8 characters or old password incorrect, service unavailable use case invoked if service down, employee must be authenticated in the system.",
            "score": 0.9232729792594909,
            "correct": false
        },
        {
            "Impiegato": "- manage employee information, allow administrator to manage employee records, administrator. administrator accesses employee management section, system displays employee list, administrator selects to add or edit an employee, system shows form with fields (name, surname, matriculation number, email, login), administrator enters or updates data and submits, system validates and saves employee details, exit conditions include data saved successfully or error due to invalid input, employee matriculation number must be unique and follow [a-z0-9] format, email must be valid format.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.9149671256542207,
            "correct": false
        },
        {
            "ServletRegistraCittadino": "- citizen registration, allow citizen to register into the system, citizen. citizen accesses registration form, system displays data entry fields (name, surname, email, identity card number, tax code, login, password), citizen submits form, system checks identity card existence and login availability, system validates data consistency with existing records, system confirms registration, exit conditions include successful registration or error due to existing login or invalid identity card, identity card number must exist in system, login must be unique with [a-za-z0-9._-] characters under 30 length, personal data must match identity card records.\n- identity card validation, verify citizen's identity document during registration, citizen. system checks identity card number against municipal database, system confirms document validity, exit when validation succeeds or fails, extends citizen registration use case, identity card number must be registered in municipality database.\n- login uniqueness check, ensure citizen's login credentials are unique, citizen. system verifies login availability during registration, system blocks duplicate logins, exit when login availability confirmed or denied, extends citizen registration use case, login must not exist in system before registration.\n- personal data consistency, validate citizen's input against official records, citizen. system compares entered name/surname/tax code with identity card database, system rejects mismatched information, exit when data matches or shows inconsistency error, extends citizen registration use case, tax code must correspond to identity card holder's data.",
            "EA22": "register citizen, allow citizen to register in the system, citizen. citizen accesses registration form, system displays registration form, citizen enters data and confirms, system verifies data correctness, saves data and sends registration email to citizen, entry condition: citizen has accessed the system, exit conditions: system registers citizen or invalid data invoking invalid data use case or service unavailable invoking service unavailable use case, quality requirements: name string matches identity card holder's name with [a-za-z'àéèìòù], length <30, not empty, surname string matches identity card holder's surname with [a-za-z'àéèìòù], length <30, not empty, fiscal code string complies with regulations and 16 characters, identity card string exists in system as xxnnnnnnn format (9 characters), email string follows x@x.x format, length <31, not empty, username not existing in system, contains [a-za-z0-9.-_], length <30, not empty, password contains [a-za-z0-9.-_*+!?,:;àèéìòù], length 8-15.",
            "score": 0.9141528964042664,
            "correct": false
        },
        {
            "ServletInserisciImpiegato": "- insert employee, allow administrator to register new employees into the system, administrator. administrator navigates to employee registration form, system displays input fields for employee details (name, surname, email, matricola, login, password, type), administrator submits form, system validates data and creates employee account, exit conditions include successful registration or error due to duplicate matricola/login invoking invalid data use case, employee's matricola must be unique and not existing in the system, login must follow [a-za-z0-9._-] format under 30 characters, password must meet [a-za-z0-9._-*+!?,:;àèéìòù] criteria with 8-15 length.  \n- handle duplicate employee, manage duplicate employee registration attempts, administrator. system detects duplicate matricola or login during registration, displays error message, administrator reviews entered data and resubmits corrected information, exit when registration succeeds or administrator cancels operation, extends insert employee use case to handle conflicts.  \n- assign employee access, enable administrator to set employee system access credentials, administrator. administrator selects access type (employee role) during registration, system creates login credentials linked to employee profile, exit conditions include successful access setup or error due to invalid access type, access type must be 'impiegato' for employees.  \n- incorrect data, handle invalid input during employee registration by redisplaying form, administrator. system validates input fields, detects invalid format or missing data, shows error messages, administrator corrects data and resubmits, exit when valid submission occurs, extends insert employee use case to enforce data integrity rules.",
            "EA3": "employee authentication, allow employee to authenticate into the system, employee. employee accesses authentication session, system displays login form for data entry, employee enters credentials and submits authentication request, system verifies data correctness and grants access, handle incorrect data by invoking incorrect data use case or service unavailable by invoking service unavailable use case, employee must have system access. username must exist, be well-formed with [a-za-z0-9 .-_], length under 30 characters, and not empty. password must exist, be well-formed with [a-za-z0-9.-_*+!?,:;àèéìòù], length between 8-15 characters.",
            "score": 0.9103796720504761,
            "correct": false
        },
        {
            "ServletVisualizzaPratiche": "- view applications, allow employee to view all submitted applications, employee. employee accesses application list, system retrieves and displays list of applications, employee scrolls through list to inspect application details, exit when list is displayed or service unavailable invoking service unavailable use case, employee must have system access.",
            "EA44": "view pending applications employee, allow employee to view pending applications, employee. employee selects view pending requests, system displays list of pending applications, exit conditions include employee selecting request invoking show pending application employee use case, returning to previous screen, or system invoking service unavailable use case for unexpected errors, employee must be logged in.",
            "score": 0.9077453672885896,
            "correct": false
        },
        {
            "ServletModificaImpiegato": "- modify employee personal information, allow administrator to update employee's personal details, administrator. administrator accesses employee modification form, system displays employee search by id, administrator enters valid employee id and submits, system retrieves employee data and displays edit form, administrator modifies details (name, surname, email) and confirms, system saves updated information, administrator must be authenticated, exit conditions include successful update or error if invalid employee id.  \n- update employee access credentials, allow administrator to change employee's login credentials, administrator. administrator selects employee via valid id search, system displays current login/password fields, administrator enters new credentials and confirms, system verifies format and updates records, exit when credentials modified or error if password violates length/special character rules.  \n- employee search by id, enable administrator to locate employee records, administrator. administrator initiates employee modification process, system requires valid employee id input, administrator enters id and submits search, system verifies id existence and retrieves data, invalid id triggers error notification.  \n- handle modification errors, manage database exceptions during employee updates, administrator. system detects database errors during save operation, displays service unavailable message, administrator returns to employee management dashboard, extends modification use cases with error recovery path.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.9068389534950256,
            "correct": false
        },
        {
            "ServletLogin": "- administrator authentication, allow administrator to authenticate into the system, administrator. administrator accesses system, system displays login form for credentials input, administrator enters data and submits authentication request, system verifies data and grants access with specified permissions, exit conditions include successful access or invalid credentials invoking invalid data use case or service unavailable invoking service unavailable use case, username must be present with [a-za-z0-9._-] characters under 30 length, password must be present with [a-za-z0-9._-*+!?,:;àèéìòù] characters between 8-15 length.\n- authenticate citizen, allow citizen to log in handling incorrect data and service unavailability, citizen. citizen accesses authentication session, system displays login form, citizen enters credentials and submits, system verifies and grants access, handle incorrect data by invoking incorrect data use case, handle service unavailable by invoking service unavailable use case, username must exist in system with [a-za-z0-9.-_] characters and length <30, password must exist in system with [a-za-z0-9.-_*+!?,:;àèéìòù] characters and length 8-15.\n- employee authentication, allow employee to authenticate into the system, employee. employee accesses authentication session, system displays login form for data entry, employee enters credentials and submits authentication request, system verifies data correctness and grants access, handle incorrect data by invoking incorrect data use case or service unavailable by invoking service unavailable use case, employee must have system access. username must exist, be well-formed with [a-za-z0-9 .-_], length under 30 characters, and not empty. password must exist, be well-formed with [a-za-z0-9.-_*+!?,:;àèéìòù], length between 8-15 characters.\n- incorrect data, handle incorrect input exceptions by redisplaying form, citizen. system displays error message indicating incorrect request, citizen reads notification message, system redisplays input form, exit when form is redisplayed, extends other use cases to handle input error failures.",
            "EA7": "insert employee, allow administrator to register a new employee, administrator. administrator accesses system via admin terminal, initiates registration, system displays form, administrator enters employee data and submits, system checks for existing employee id, generates password, saves data, confirms registration with password, handle existing id with incorrect data use case or service unavailable via service unavailable use case. administrator must be authenticated. name allows [a-z a-z ' accents], <31 chars, non-empty. surname same as name. email format x@x.x, <31 chars. employee id numeric, 6 chars. username unique, [a-z a-z 0-9 .-_], <31, non-empty. password [a-z a-z 0-9 .-_*+!?,:; accents], 8-15 chars. confirm password matches.",
            "score": 0.9067176938056946,
            "correct": false
        },
        {
            "ServletModificaAccesso": "- modify access credentials, allow citizen to update login and password, citizen. citizen accesses credentials modification form, system displays login and password fields, citizen enters new data and confirms, system updates credentials, exit conditions include successful update or error invoking invalid data use case, password must match confirmation field and comply with length/special character rules.  \n- modify employee access, allow employee to change login credentials, employee. employee accesses modification form, system displays current login and password fields, employee enters new data and submits, system verifies and updates credentials, employee must have active session, exit conditions include success or invalid data error if password mismatch or invalid format.  \n- handle session expiration, redirect unauthenticated users to login page, system. system detects expired or invalid session during access modification, redirects user to appropriate login page based on origin (citizen/employee portal), exit when user reaches login screen.",
            "EA21": "employee password recovery, allow employee to recover password, employee. employee forgets password and presses recovery button, system displays form for entering employee id, employee enters id and confirms, system verifies data and sends password to email, handle incorrect data by invoking incorrect data use case or service unavailable by invoking service unavailable use case, employee must be authenticated in the system.",
            "score": 0.9052447974681854,
            "correct": false
        },
        {
            "ServletLogin": "- administrator authentication, allow administrator to authenticate into the system, administrator. administrator accesses system, system displays login form for credentials input, administrator enters data and submits authentication request, system verifies data and grants access with specified permissions, exit conditions include successful access or invalid credentials invoking invalid data use case or service unavailable invoking service unavailable use case, username must be present with [a-za-z0-9._-] characters under 30 length, password must be present with [a-za-z0-9._-*+!?,:;àèéìòù] characters between 8-15 length.\n- authenticate citizen, allow citizen to log in handling incorrect data and service unavailability, citizen. citizen accesses authentication session, system displays login form, citizen enters credentials and submits, system verifies and grants access, handle incorrect data by invoking incorrect data use case, handle service unavailable by invoking service unavailable use case, username must exist in system with [a-za-z0-9.-_] characters and length <30, password must exist in system with [a-za-z0-9.-_*+!?,:;àèéìòù] characters and length 8-15.\n- employee authentication, allow employee to authenticate into the system, employee. employee accesses authentication session, system displays login form for data entry, employee enters credentials and submits authentication request, system verifies data correctness and grants access, handle incorrect data by invoking incorrect data use case or service unavailable by invoking service unavailable use case, employee must have system access. username must exist, be well-formed with [a-za-z0-9 .-_], length under 30 characters, and not empty. password must exist, be well-formed with [a-za-z0-9.-_*+!?,:;àèéìòù], length between 8-15 characters.\n- incorrect data, handle incorrect input exceptions by redisplaying form, citizen. system displays error message indicating incorrect request, citizen reads notification message, system redisplays input form, exit when form is redisplayed, extends other use cases to handle input error failures.",
            "EA19": "recover password citizen, allow citizen to recover forgotten password, citizen. citizen forgets password and presses recover password button, system shows recovery screen requesting username and identity card code, citizen enters data and confirms, system verifies data correctness and sends password to citizen's email, exit conditions include system sending password, invoking incorrect data use case if administrator enters non-existent registration number, or service unavailable use case if service is down, entry condition requires citizen authentication, username must be valid format [a-za-z0-9.-_] under 30 characters, identity card code must be xxnnnnnnn format with 9 characters.",
            "score": 0.9041609644889831,
            "correct": false
        },
        {
            "ServletModificaImpiegato": "- modify employee personal information, allow administrator to update employee's personal details, administrator. administrator accesses employee modification form, system displays employee search by id, administrator enters valid employee id and submits, system retrieves employee data and displays edit form, administrator modifies details (name, surname, email) and confirms, system saves updated information, administrator must be authenticated, exit conditions include successful update or error if invalid employee id.  \n- update employee access credentials, allow administrator to change employee's login credentials, administrator. administrator selects employee via valid id search, system displays current login/password fields, administrator enters new credentials and confirms, system verifies format and updates records, exit when credentials modified or error if password violates length/special character rules.  \n- employee search by id, enable administrator to locate employee records, administrator. administrator initiates employee modification process, system requires valid employee id input, administrator enters id and submits search, system verifies id existence and retrieves data, invalid id triggers error notification.  \n- handle modification errors, manage database exceptions during employee updates, administrator. system detects database errors during save operation, displays service unavailable message, administrator returns to employee management dashboard, extends modification use cases with error recovery path.",
            "EA16": "modify administrator password, allow administrator to change their password, administrator. administrator presses password modification button, system displays old password entry form, administrator enters old and new password then confirms, system notifies password changed, exit conditions include password modified or invalid data case invoked if password under 8 characters or incorrect old password or service unavailable case called, administrator must be authenticated in the system.",
            "score": 0.9014916002750396,
            "correct": false
        },
        {
            "ServletInserisciCittadino": "- register citizen with new family unit, allow employee to register a citizen by creating a new family unit, employee. employee selects new family unit option, system displays citizen registration form, employee enters citizen details (name, surname, tax code, birth data), system creates new family unit with citizen as head, employee must have valid authentication, exit conditions include successful registration or error for invalid tax code format.  \n- add citizen to existing family unit, allow employee to add citizen to pre-registered family unit, employee. employee selects existing family unit id, system displays citizen data entry form, employee fills citizen information and submits, system verifies family unit existence and increments member count, exit conditions include successful addition or error for invalid family id.  \n- handle invalid family unit, notify employee when entering non-existent family unit identifier, employee. system displays error message indicating invalid family unit id, employee rechecks identifier, system prevents citizen registration until valid id provided, extends family unit management use cases.  \n- incorrect data, handle database exceptions during citizen registration by displaying failure page, employee. system redirects to operation failure screen with error details, employee reviews entered data, system terminates registration process, extends citizen registration use cases for constraint violations.",
            "EA27": "change of family status, allow citizen to request a change in family status continued by employee, citizen employee. citizen presses change family status button, system displays form, citizen enters new family unit data and submits request, system sends request to competent employee, system creates document for competent office or handle service unavailable by invoking service unavailable use case, citizen must be authenticated in the system.",
            "score": 0.899347722530365,
            "correct": false
        },
        {
            "ServletRegistraCittadino": "- citizen registration, allow citizen to register into the system, citizen. citizen accesses registration form, system displays data entry fields (name, surname, email, identity card number, tax code, login, password), citizen submits form, system checks identity card existence and login availability, system validates data consistency with existing records, system confirms registration, exit conditions include successful registration or error due to existing login or invalid identity card, identity card number must exist in system, login must be unique with [a-za-z0-9._-] characters under 30 length, personal data must match identity card records.\n- identity card validation, verify citizen's identity document during registration, citizen. system checks identity card number against municipal database, system confirms document validity, exit when validation succeeds or fails, extends citizen registration use case, identity card number must be registered in municipality database.\n- login uniqueness check, ensure citizen's login credentials are unique, citizen. system verifies login availability during registration, system blocks duplicate logins, exit when login availability confirmed or denied, extends citizen registration use case, login must not exist in system before registration.\n- personal data consistency, validate citizen's input against official records, citizen. system compares entered name/surname/tax code with identity card database, system rejects mismatched information, exit when data matches or shows inconsistency error, extends citizen registration use case, tax code must correspond to identity card holder's data.",
            "EA23": "register citizen, allow citizen to register in the system, citizen. citizen accesses registration form, system displays form, citizen enters data and confirms, system verifies data correctness, saves data and sends registration email, handle invalid data by invoking invalid data use case, handle service unavailable by invoking service unavailable use case, citizen must have system access. name string matches identity card holder, well-formed with [a-za-z'àéèìòù], length <30, not empty. surname string matches identity card holder, well-formed with [a-za-z'àéèìòù], length <30, not empty. fiscal code string complies with regulations, 16 characters. identity card string exists in system, format xxnnnnnnn, 9 characters. email string format x@x.x, length <31, not empty. username string unique, well-formed with [a-za-z0-9.-_], length <30, not empty. password string well-formed with [a-za-z0-9.-_*+!?,:;àèéìòù], length 8-15.",
            "score": 0.8983471274375916,
            "correct": false
        },
        {
            "DbCambioResidenza": "- update residence, allow citizen to change residence address within the same municipality, citizen. citizen submits new address details, system updates identity card with new address, citizen must have valid identity card, exit conditions include system updating address or invalid identity card number invoking incorrect data use case, new address must include valid street name and civic number.  \n- delete identity card, allow system to delete identity card when citizen changes residence to external municipality, administrator. system detects external municipality change, system deletes citizen's identity card, exit conditions include identity card deletion or service unavailable invoking service unavailable use case, citizen must have valid identity card registered in the system.  \n- modify residence data, allow system to update residence information in identity card, employee. employee accesses residence modification function, system retrieves identity card data, employee enters new residence details and confirms, system updates identity card, exit conditions include data updated or invalid input invoking incorrect data use case, new residence must have valid street name and numeric civic number.",
            "EA28": "delete application, allow citizen to delete an application, citizen. press application deletion button for identity card or change of residence if not initialized, system requests confirmation, citizen confirms, system deletes application, citizen must be authenticated in the system, extends view application use case, exit conditions include citizen not confirming or system deleting application or invoking service unavailable use case.",
            "score": 0.8968023180961608,
            "correct": false
        },
        {
            "ServletModificaImpiegato": "- modify employee personal information, allow administrator to update employee's personal details, administrator. administrator accesses employee modification form, system displays employee search by id, administrator enters valid employee id and submits, system retrieves employee data and displays edit form, administrator modifies details (name, surname, email) and confirms, system saves updated information, administrator must be authenticated, exit conditions include successful update or error if invalid employee id.  \n- update employee access credentials, allow administrator to change employee's login credentials, administrator. administrator selects employee via valid id search, system displays current login/password fields, administrator enters new credentials and confirms, system verifies format and updates records, exit when credentials modified or error if password violates length/special character rules.  \n- employee search by id, enable administrator to locate employee records, administrator. administrator initiates employee modification process, system requires valid employee id input, administrator enters id and submits search, system verifies id existence and retrieves data, invalid id triggers error notification.  \n- handle modification errors, manage database exceptions during employee updates, administrator. system detects database errors during save operation, displays service unavailable message, administrator returns to employee management dashboard, extends modification use cases with error recovery path.",
            "EA21": "employee password recovery, allow employee to recover password, employee. employee forgets password and presses recovery button, system displays form for entering employee id, employee enters id and confirms, system verifies data and sends password to email, handle incorrect data by invoking incorrect data use case or service unavailable by invoking service unavailable use case, employee must be authenticated in the system.",
            "score": 0.8966007113456727,
            "correct": false
        },
        {
            "Amministratore": "- view administrator profile, allow administrator to view their personal details, administrator. administrator accesses profile section, system displays name, surname, matriculation number, email, and login, administrator reviews information, exit when details are displayed, administrator must be authenticated in the system, email must follow valid format (e.g., user@domain.com), matricola must be unique system-wide.\n- modify administrator email, allow administrator to update their email address, administrator. administrator accesses email modification form, enters new valid email, system updates and confirms change, exit when email is updated or invalid format triggers error, email must comply with standard format and be unique if required.",
            "EA13": "modify citizen email, allow citizen to modify their email, citizen. citizen accesses email modification form, system displays form for new email entry, citizen enters new email and presses confirm button, system updates email, system saves new email or detects error invoking invalid data use case or handles service unavailable via service unavailable use case, citizen must be authenticated in the system.",
            "score": 0.8956011712551116,
            "correct": false
        }
    ],
    "fn": [
        {
            "AdminManager": "- modify administrator data, allow administrator to update administrator details, administrator. administrator accesses administrator modification form, system displays data entry fields, administrator enters new details and submits, system updates administrator record, administrator must have system access, exit conditions include successful update or error if administrator is only remaining, administrator cannot delete last existing administrator.\n- search administrator, allow administrator to find administrator by name, administrator. administrator accesses search function, system displays name entry fields, administrator enters name and submits, system displays matching administrators, exit when results are displayed or none found, administrator must be authenticated in system.\n- insert administrator, allow administrator to add new administrator, administrator. administrator accesses insertion form, system displays data entry fields, administrator enters required data and submits, system saves new administrator, exit conditions include successful insertion or error if data invalid, new administrator must have unique matricola and login.\n- delete administrator, allow administrator to remove administrator, administrator. administrator selects administrator to delete and confirms, system removes administrator record, exit conditions include successful deletion or error if last administrator, system must retain at least one administrator.",
            "EA2": "authenticate citizen, allow citizen to log in handling incorrect data and service unavailability, citizen. citizen accesses authentication session, system displays login form, citizen enters credentials and submits, system verifies and grants access, handle incorrect data by invoking incorrect data use case, handle service unavailable by invoking service unavailable use case, username must exist in system with [a-za-z0-9.-_] characters and length <30, password must exist in system with [a-za-z0-9.-_*+!?,:;àèéìòù] characters and length 8-15.",
            "score": 0.7441020309925079,
            "correct": true
        },
        {
            "ServletRicercaPratica": "- search by application id, allow employee to search for application using unique code, employee. employee accesses application search form, enters application code, system retrieves application details, employee views application data, employee must be authenticated, exit conditions include displaying application details or invoking invalid data use case if code does not exist.  \n- search by requester id, allow employee to list applications submitted by specific citizen, employee. employee selects requester search option, enters citizen identifier, system retrieves all applications linked to citizen, employee views application list, employee must have valid access permissions.  \n- search by application status, allow employee to filter applications by acceptance state, employee. employee selects status filter (accepted/rejected), system displays applications matching selected status, employee reviews filtered results, applications must exist in selected state.  \n- incorrect data, handle invalid search parameters by redisplaying form, employee. system shows error message for invalid code/status input, employee corrects search criteria, extends search use cases when invalid parameters detected.",
            "EA25": "change of residence, allow citizen to request residence change and employee to process it, citizen and employee. press change residence button, system displays form, citizen enters new residence data, system confirms submission and stores request, employee accesses system to view request, verifies data, completes document, confirms operation, system saves form and updates data, handle service unavailable by invoking service unavailable use case. citizen must be authenticated. new residence municipality name allows [a-z a-z ' àéèìòù .], non-empty. address allows [a-z a-z ' àéèìòù , .], non-empty. civic number allows [0-9 a-z], max 4 chars. phone prefix numeric 2-5 digits. phone number numeric 5-8 digits. family member surname allows [a-z a-z ' àéèìòù], max 30 chars. family member name same as surname. family member birth place allows [a-z a-z ' àéèìòù .], non-empty. family member birth date valid dd/mm/yyyy (1-31,1-12,1900-now). external requester card code format xxnnnnnnn (9 chars).",
            "score": 0.7436260640621185,
            "correct": true
        },
        {
            "ServletVisualizzaPratiche": "- view applications, allow employee to view all submitted applications, employee. employee accesses application list, system retrieves and displays list of applications, employee scrolls through list to inspect application details, exit when list is displayed or service unavailable invoking service unavailable use case, employee must have system access.",
            "EA41": "view application, allow citizen to view their applications, citizen. citizen clicks view applications button (identity card, change of residence), system displays screen with citizen's applications, exit conditions include viewing screen or invoking delete application when deleting or invoking modify application when modifying or invoking service unavailable use case, citizen must be authenticated in the system.",
            "score": 0.7424003183841705,
            "correct": true
        },
        {
            "NucleoFamiliare": "- create family unit record, allow employee to create a new family unit record, employee. employee accesses family unit creation form, system displays input fields for head of family and notes, employee enters data and submits, system stores new family unit, exit conditions include successful creation or error invoking invalid data use case, head of family must be valid citizen id, notes can contain [a-z, àèéìòù, 0-9, .,;:!?] with maximum 255 characters.  \n- modify family unit details, allow employee to update family unit information, employee. employee selects existing family unit, system displays current details, employee modifies head of family or notes then confirms, system updates record, exit when changes saved or error occurs, family unit must exist in system before modification.  \n- view family composition, allow employee to view family unit member details, employee. employee searches for family unit by id, system displays head of family and number of members, employee can request detailed member list, system shows complete family composition, family unit must be registered in system.  \n- update family member count, allow employee to adjust registered family members quantity, employee. employee accesses family unit management, selects target family, modifies member count field, system validates and updates total, member count must be positive integer matching actual registered members.",
            "EA36": "request family status, allow citizen to request their family status, citizen. citizen presses family status button, system displays family status, citizen chooses to print or send to email, system executes chosen operation, citizen must be authenticated in the system, handle service unavailable by invoking service unavailable use case.",
            "score": 0.7392469465732574,
            "correct": true
        },
        {
            "ServletAnnulla": "- cancel operation, allow administrator and employee to cancel ongoing administrative operation, administrator, employee. user initiates cancel action during operation, system removes temporary session data and redirects to main menu, user must be authenticated in the system.",
            "EA3": "employee authentication, allow employee to authenticate into the system, employee. employee accesses authentication session, system displays login form for data entry, employee enters credentials and submits authentication request, system verifies data correctness and grants access, handle incorrect data by invoking incorrect data use case or service unavailable by invoking service unavailable use case, employee must have system access. username must exist, be well-formed with [a-za-z0-9 .-_], length under 30 characters, and not empty. password must exist, be well-formed with [a-za-z0-9.-_*+!?,:;àèéìòù], length between 8-15 characters.",
            "score": 0.7389018535614014,
            "correct": true
        },
        {
            "DbAmministratore": "- register administrator, allow administrator to add new administrator to the system, administrator. administrator accesses registration form, system displays input fields for matricola, name, surname, email, and login, administrator enters data and submits, system checks for unique matricola and login, creates new administrator record, exit conditions include successful registration or error due to duplicate matricola/login, matricola must be unique and non-empty, login must be unique and exist in access credentials.\n\n- remove administrator, allow administrator to delete administrator records, administrator. administrator selects administrator to delete, system verifies no active references, removes administrator from database, exit conditions include successful deletion or error if administrator has linked records, administrator must exist in the system and have no associated active data.\n\n- view administrator by name, allow administrator to search administrators by name and surname, administrator. administrator enters name and surname in search form, system returns matching administrator records, exit when results display or no matches found, name and surname must be non-empty and exist in system records.\n\n- view administrator by matriculation, allow administrator to retrieve administrator details using matricola, administrator. administrator inputs matricola, system displays full administrator profile, exit when profile displays or invalid matricola error occurs, matricola must exist in the system and follow format rules.\n\n- view all administrators, allow administrator to list all registered administrators, administrator. administrator accesses administrator management section, system displays complete list of administrators with key details, exit when list displays or empty database notification occurs.\n\n- view administrator by login, allow administrator to find administrator via login credentials, administrator. administrator enters login identifier, system returns corresponding administrator data, exit when data displays or invalid login error occurs, login must exist in system and be associated with administrator role.\n\n- modify administrator details, allow administrator to update administrator information, administrator. administrator selects administrator and edits fields (matricola, name, surname, email, login), system validates new data uniqueness, updates database record, exit conditions include successful update or error from duplicate matricola/login/invalid format, all fields must comply with format rules and maintain referential integrity.",
            "EA138": "incorrect data, handle incorrect input exceptions by redisplaying form, citizen. system displays error message indicating incorrect request, citizen reads notification message, system redisplays input form, exit when form is redisplayed, extends other use cases to handle input error failures.",
            "score": 0.7343429088592529,
            "correct": true
        },
        {
            "AccessManager": "- register user access, allow administrator to create new system user, administrator. administrator navigates to user registration form, enters login, password, and type, system validates login uniqueness and creates access, exit conditions include access created or duplicate login error, login must be unique and conform to [a-za-z0-9._-] characters under 30 length.  \n- modify user access, allow administrator to update user credentials, administrator. administrator selects user from list, modifies login/password/type fields, system validates new data and updates access record, exit conditions include access modified or invalid format error, new login must follow [a-za-z0-9._-] format.  \n- delete user access, allow administrator to remove user from system, administrator. administrator selects target user, confirms deletion action, system deletes access record, exit conditions include access removed or dependency conflict error preventing deletion.  \n- check login existence, validate login uniqueness during registration, administrator. system verifies proposed login against existing records during user creation, administrator receives availability status, exit condition is unique login confirmed or duplicate error triggered.  \n- retrieve access details, allow administrator to view user access information, administrator. administrator searches user by login, system displays associated access type and credentials, exit condition is details shown or invalid login error.  \n- list all accesses, enable administrator to view registered system users, administrator. administrator requests full access list, system retrieves and displays all logins with types, exit condition is list displayed or empty database message.  \n- verify credentials, authenticate users during login process, user. system compares input login/password with stored access records, grants session upon match, exit conditions include successful login or invalid credentials error.",
            "EA138": "incorrect data, handle incorrect input exceptions by redisplaying form, citizen. system displays error message indicating incorrect request, citizen reads notification message, system redisplays input form, exit when form is redisplayed, extends other use cases to handle input error failures.",
            "score": 0.7339801907539367,
            "correct": true
        },
        {
            "ServletModificaImpiegato": "- modify employee personal information, allow administrator to update employee's personal details, administrator. administrator accesses employee modification form, system displays employee search by id, administrator enters valid employee id and submits, system retrieves employee data and displays edit form, administrator modifies details (name, surname, email) and confirms, system saves updated information, administrator must be authenticated, exit conditions include successful update or error if invalid employee id.  \n- update employee access credentials, allow administrator to change employee's login credentials, administrator. administrator selects employee via valid id search, system displays current login/password fields, administrator enters new credentials and confirms, system verifies format and updates records, exit when credentials modified or error if password violates length/special character rules.  \n- employee search by id, enable administrator to locate employee records, administrator. administrator initiates employee modification process, system requires valid employee id input, administrator enters id and submits search, system verifies id existence and retrieves data, invalid id triggers error notification.  \n- handle modification errors, manage database exceptions during employee updates, administrator. system detects database errors during save operation, displays service unavailable message, administrator returns to employee management dashboard, extends modification use cases with error recovery path.",
            "EA138": "incorrect data, handle incorrect input exceptions by redisplaying form, citizen. system displays error message indicating incorrect request, citizen reads notification message, system redisplays input form, exit when form is redisplayed, extends other use cases to handle input error failures.",
            "score": 0.7316790223121643,
            "correct": true
        },
        {
            "DbAccesso": "- register access, allow administrator to create new system access credentials, administrator. administrator navigates to access registration, system displays form, administrator enters login, password, and user type, system checks login uniqueness and saves credentials, exit conditions include access created or existing login error, login must be unique and follow [a-za-z0-9._-] format with maximum 30 characters, password must comply with [a-za-z0-9._-*+!?,:;àèéìòù] format between 8-15 characters.  \n- delete access, allow administrator to remove user system access, administrator. administrator selects target user login, system confirms deletion request, administrator confirms action, system removes access credentials, exit conditions include access removed or service error, administrator must have valid permissions.  \n- verify credentials, authenticate user login attempts, citizen/employee/administrator. user enters login and password during authentication, system checks credentials against stored data, grants access if valid, exit conditions include successful login or invalid credentials error.  \n- check login existence, validate login uniqueness during registration, citizen/employee/administrator. user enters desired login, system verifies database for existing matches, returns availability status, exit conditions include unique login confirmation or duplicate error.  \n- modify access credentials, allow users to update login/password, citizen/employee/administrator. user navigates to profile settings, edits login/password fields, system validates new credentials and updates database, exit conditions include updated credentials or invalid format error, new login must be unique if changed.  \n- retrieve access details, allow administrators to view user access information, administrator. administrator searches target user login, system displays associated credentials and user type, exit conditions include data retrieval or invalid user error.  \n- list all accesses, enable administrators to view all registered system users, administrator. administrator requests full access list, system displays logins with types, exit conditions include complete list display or database error.",
            "EA138": "incorrect data, handle incorrect input exceptions by redisplaying form, citizen. system displays error message indicating incorrect request, citizen reads notification message, system redisplays input form, exit when form is redisplayed, extends other use cases to handle input error failures.",
            "score": 0.7311133921146393,
            "correct": true
        },
        {
            "CittadinoManager": "- register citizen, allow citizen to register in the system, citizen. citizen accesses registration form, system displays input fields for personal data, citizen enters details and submits, system saves citizen information, exit conditions include successful registration or invalid data invoking error handling, login must be unique and follow [a-za-z0-9.-_] format, email must be valid format.  \n- modify citizen login, allow citizen to update their login credentials, citizen. citizen accesses profile settings, system displays login modification form, citizen enters new login and confirms, system updates login information, citizen must exist in the system, exit includes successful update or error if login already exists.  \n- modify citizen email, allow citizen to change their email address, citizen. citizen navigates to email settings, system displays email update form, citizen enters new email and submits, system validates and saves new email, exit when email updated or invalid format error occurs.  \n- search citizen, allow employee to find citizens by name and surname, employee. employee enters search criteria (name and/or surname), system retrieves matching citizens, employee views results list, exit when results displayed or no matches found.  \n- delete citizen record, allow administrator to remove citizen from system, administrator. administrator selects citizen record, confirms deletion request, system permanently removes citizen data, citizen must exist in the system prior to deletion.  \n- update family unit, allow employee to modify citizen's family unit association, employee. employee selects citizen and new family unit, system updates family unit linkage, exit when association changed or invalid unit error occurs.  \n- modify citizen name, allow citizen to update their legal name, citizen. citizen accesses name change form, enters new name and submits, system validates and updates record, name must contain only [a-zàèéìòù] characters with 1-30 length.  \n- modify citizen surname, allow citizen to update their legal surname, citizen. citizen accesses surname modification form, enters new surname and confirms, system validates and saves changes, surname follows same format constraints as name.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.7295530319213868,
            "correct": true
        },
        {
            "ServletAnnulla": "- cancel operation, allow administrator and employee to cancel ongoing administrative operation, administrator, employee. user initiates cancel action during operation, system removes temporary session data and redirects to main menu, user must be authenticated in the system.",
            "EA1": "administrator authentication, allow administrator to authenticate into the system, administrator. administrator accesses system, system displays login form for credentials input, administrator enters data and submits authentication request, system verifies data and grants access with specified permissions, exit conditions include successful access or invalid credentials invoking invalid data use case or service unavailable invoking service unavailable use case, username must be present with [a-za-z0-9._-] characters under 30 length, password must be present with [a-za-z0-9._-*+!?,:;àèéìòù] characters between 8-15 length.",
            "score": 0.7285761594772339,
            "correct": true
        },
        {
            "NucleoFamiliareManager": "- create family unit, allow employee to register a new family unit in the system, employee. employee accesses family unit registration form, system displays data entry fields, employee submits family composition details, system stores new family record, employee must have valid permissions to manage civil records, family unit must not pre-exist in the system.  \n- verify family existence, enable employee to confirm family unit validity before administrative operations, employee. employee enters family unit identifier during record processing, system checks database for matching entry, returns existence status, family identifier must be numeric and correspond to valid format.  \n- update family head, permit employee to designate new head of household for existing family unit, employee. employee selects target family unit, system displays current head information, employee inputs new head credentials, system updates leadership data, target citizen must belong to same family unit.  \n- adjust family membership count, let employee increment/decrement member numbers during lifecycle changes, employee. employee accesses family profile management, system shows current member count, employee triggers add/remove action based on civil events, system updates official composition records, changes require valid justification documentation.  \n- view family composition details, allow employee to inspect complete household member information, employee. employee searches family unit via identifier, system retrieves stored data including head and members, displays structured household overview, access limited to authorized personnel with civil registry privileges.",
            "EA22": "register citizen, allow citizen to register in the system, citizen. citizen accesses registration form, system displays registration form, citizen enters data and confirms, system verifies data correctness, saves data and sends registration email to citizen, entry condition: citizen has accessed the system, exit conditions: system registers citizen or invalid data invoking invalid data use case or service unavailable invoking service unavailable use case, quality requirements: name string matches identity card holder's name with [a-za-z'àéèìòù], length <30, not empty, surname string matches identity card holder's surname with [a-za-z'àéèìòù], length <30, not empty, fiscal code string complies with regulations and 16 characters, identity card string exists in system as xxnnnnnnn format (9 characters), email string follows x@x.x format, length <31, not empty, username not existing in system, contains [a-za-z0-9.-_], length <30, not empty, password contains [a-za-z0-9.-_*+!?,:;àèéìòù], length 8-15.",
            "score": 0.726180249452591,
            "correct": true
        },
        {
            "AdminManager": "- modify administrator data, allow administrator to update administrator details, administrator. administrator accesses administrator modification form, system displays data entry fields, administrator enters new details and submits, system updates administrator record, administrator must have system access, exit conditions include successful update or error if administrator is only remaining, administrator cannot delete last existing administrator.\n- search administrator, allow administrator to find administrator by name, administrator. administrator accesses search function, system displays name entry fields, administrator enters name and submits, system displays matching administrators, exit when results are displayed or none found, administrator must be authenticated in system.\n- insert administrator, allow administrator to add new administrator, administrator. administrator accesses insertion form, system displays data entry fields, administrator enters required data and submits, system saves new administrator, exit conditions include successful insertion or error if data invalid, new administrator must have unique matricola and login.\n- delete administrator, allow administrator to remove administrator, administrator. administrator selects administrator to delete and confirms, system removes administrator record, exit conditions include successful deletion or error if last administrator, system must retain at least one administrator.",
            "EA13": "modify citizen email, allow citizen to modify their email, citizen. citizen accesses email modification form, system displays form for new email entry, citizen enters new email and presses confirm button, system updates email, system saves new email or detects error invoking invalid data use case or handles service unavailable via service unavailable use case, citizen must be authenticated in the system.",
            "score": 0.7198245644569397,
            "correct": true
        },
        {
            "ServletVisualizzaPratiche": "- view applications, allow employee to view all submitted applications, employee. employee accesses application list, system retrieves and displays list of applications, employee scrolls through list to inspect application details, exit when list is displayed or service unavailable invoking service unavailable use case, employee must have system access.",
            "EA27": "change of family status, allow citizen to request a change in family status continued by employee, citizen employee. citizen presses change family status button, system displays form, citizen enters new family unit data and submits request, system sends request to competent employee, system creates document for competent office or handle service unavailable by invoking service unavailable use case, citizen must be authenticated in the system.",
            "score": 0.7132490038871766,
            "correct": true
        },
        {
            "DbComune": "- insert municipality, allow administrator to add new municipality records, administrator. administrator accesses municipality insertion form, system displays data entry fields, administrator enters municipality name and address identifier, system saves new record, exit conditions include successful insertion or error if municipality name already exists, municipality name must be unique and follow [a-za-zàèéìòùàèéìòù'] with length 1-50 characters, address identifier must follow [a-za-z0-9_-] with length 1-50 characters.  \n- delete municipality, allow administrator to remove municipality records, administrator. administrator selects municipality to delete, system verifies existence, administrator confirms deletion, system removes record, exit conditions include successful deletion or error if municipality does not exist, municipality must exist in system.  \n- view municipality details, allow employee to retrieve municipality information, employee. employee searches municipality by name, system displays name and associated address identifier, exit conditions include displaying details or error if municipality not found, municipality name must exist in system.",
            "EA28": "delete application, allow citizen to delete an application, citizen. press application deletion button for identity card or change of residence if not initialized, system requests confirmation, citizen confirms, system deletes application, citizen must be authenticated in the system, extends view application use case, exit conditions include citizen not confirming or system deleting application or invoking service unavailable use case.",
            "score": 0.7116478502750396,
            "correct": true
        },
        {
            "ServletVisualizzaPratiche": "- view applications, allow employee to view all submitted applications, employee. employee accesses application list, system retrieves and displays list of applications, employee scrolls through list to inspect application details, exit when list is displayed or service unavailable invoking service unavailable use case, employee must have system access.",
            "EA26": "change of residence another municipality, allow citizen to change residence to another municipality, citizen and employee. citizen presses change of residence button, system displays form, citizen enters new residence data, system confirms submission and stores request, employee accesses system and views request, employee verifies data completes document confirms operation, system saves form and updates data, employee sends document to other municipality's employee, other municipality's employee verifies document sends positive notification to original employee and citizen, handle service unavailable by invoking service unavailable use case, citizen must be authenticated in the system. new residence municipality name allows [a-z a-z ' àéèìòù .], non-empty. address allows [a-z a-z ' àéèìòù , .], non-empty. civic number allows [0-9 a-z], max 4 characters. phone prefix numeric 2-5 digits. phone number numeric 5-8 digits. family member surname/name allows [a-z a-z ' àéèìòù], max 30 chars non-empty. family member birth place allows [a-z a-z ' àéèìòù .], non-empty. birth date valid format dd/mm/yyyy. external requester card code format xxnnnnnnn (x=letter, n=number), 9 chars.",
            "score": 0.7087628424167634,
            "correct": true
        },
        {
            "DbComune": "- insert municipality, allow administrator to add new municipality records, administrator. administrator accesses municipality insertion form, system displays data entry fields, administrator enters municipality name and address identifier, system saves new record, exit conditions include successful insertion or error if municipality name already exists, municipality name must be unique and follow [a-za-zàèéìòùàèéìòù'] with length 1-50 characters, address identifier must follow [a-za-z0-9_-] with length 1-50 characters.  \n- delete municipality, allow administrator to remove municipality records, administrator. administrator selects municipality to delete, system verifies existence, administrator confirms deletion, system removes record, exit conditions include successful deletion or error if municipality does not exist, municipality must exist in system.  \n- view municipality details, allow employee to retrieve municipality information, employee. employee searches municipality by name, system displays name and associated address identifier, exit conditions include displaying details or error if municipality not found, municipality name must exist in system.",
            "EA25": "change of residence, allow citizen to request residence change and employee to process it, citizen and employee. press change residence button, system displays form, citizen enters new residence data, system confirms submission and stores request, employee accesses system to view request, verifies data, completes document, confirms operation, system saves form and updates data, handle service unavailable by invoking service unavailable use case. citizen must be authenticated. new residence municipality name allows [a-z a-z ' àéèìòù .], non-empty. address allows [a-z a-z ' àéèìòù , .], non-empty. civic number allows [0-9 a-z], max 4 chars. phone prefix numeric 2-5 digits. phone number numeric 5-8 digits. family member surname allows [a-z a-z ' àéèìòù], max 30 chars. family member name same as surname. family member birth place allows [a-z a-z ' àéèìòù .], non-empty. family member birth date valid dd/mm/yyyy (1-31,1-12,1900-now). external requester card code format xxnnnnnnn (9 chars).",
            "score": 0.703763234615326,
            "correct": true
        },
        {
            "ServletVisualizzaPratiche": "- view applications, allow employee to view all submitted applications, employee. employee accesses application list, system retrieves and displays list of applications, employee scrolls through list to inspect application details, exit when list is displayed or service unavailable invoking service unavailable use case, employee must have system access.",
            "EA25": "change of residence, allow citizen to request residence change and employee to process it, citizen and employee. press change residence button, system displays form, citizen enters new residence data, system confirms submission and stores request, employee accesses system to view request, verifies data, completes document, confirms operation, system saves form and updates data, handle service unavailable by invoking service unavailable use case. citizen must be authenticated. new residence municipality name allows [a-z a-z ' àéèìòù .], non-empty. address allows [a-z a-z ' àéèìòù , .], non-empty. civic number allows [0-9 a-z], max 4 chars. phone prefix numeric 2-5 digits. phone number numeric 5-8 digits. family member surname allows [a-z a-z ' àéèìòù], max 30 chars. family member name same as surname. family member birth place allows [a-z a-z ' àéèìòù .], non-empty. family member birth date valid dd/mm/yyyy (1-31,1-12,1900-now). external requester card code format xxnnnnnnn (9 chars).",
            "score": 0.6939355194568634,
            "correct": true
        },
        {
            "ServletRicercaImpiegato": "- search employee, allow administrator to search for employee data, administrator. administrator accesses employee search form, system displays search criteria input, administrator enters employee identifier (matricola), system retrieves employee data, administrator must have valid system access, exit conditions include system displaying employee details or invoking employee not found error if identifier invalid or service unavailable use case if database error occurs, employee identifier must exist and follow valid format.\n- employee not found error, handle invalid employee identifier during search, administrator. system displays error message indicating no employee found, administrator reviews error notification, system returns to search form, exit when error message displayed, extends employee search use case when invalid identifier provided.",
            "EA23": "register citizen, allow citizen to register in the system, citizen. citizen accesses registration form, system displays form, citizen enters data and confirms, system verifies data correctness, saves data and sends registration email, handle invalid data by invoking invalid data use case, handle service unavailable by invoking service unavailable use case, citizen must have system access. name string matches identity card holder, well-formed with [a-za-z'àéèìòù], length <30, not empty. surname string matches identity card holder, well-formed with [a-za-z'àéèìòù], length <30, not empty. fiscal code string complies with regulations, 16 characters. identity card string exists in system, format xxnnnnnnn, 9 characters. email string format x@x.x, length <31, not empty. username string unique, well-formed with [a-za-z0-9.-_], length <30, not empty. password string well-formed with [a-za-z0-9.-_*+!?,:;àèéìòù], length 8-15.",
            "score": 0.681718111038208,
            "correct": true
        },
        {
            "ControllerFiles": "- upload change of residence request documents, allow employee to upload supporting documents for residence change requests, employee. employee selects document upload function, system displays upload form, employee enters document description and selects file, system validates file type and size, employee confirms upload, system saves document to residence change request folder, exit conditions include successful upload or invalid file type/size invoking invalid data use case, maximum file size 500mb, supported file types determined by system mime types.  \n- invalid file upload, handle invalid file upload exceptions by redisplaying form, employee. system detects invalid file type or size exceeding limit, displays error message, employee reviews error and retries upload, exit when form is redisplayed with error notification, extends upload change of residence request documents use case.",
            "EA34": "request third party certificates, allow citizen to request certificates for third parties, citizen. citizen selects specific certificate (civil status certificates, registry certificates), system displays data entry form for subject person, citizen enters subject's data (see note), system stores citizen and subject data in dedicated module, system displays requested certificate screen, citizen selects payment and delivery method, system sends certificate, citizen must be authenticated in system, exit conditions include system sending certificate or invoking service unavailable use case, if citizen is not close relative of subject must specify valid request reason.",
            "score": 0.6710671544075013,
            "correct": true
        }
    ]
}