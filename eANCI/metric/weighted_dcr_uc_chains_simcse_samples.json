{
    "fp": [
        {
            "ServletRicercaImpiegato": "- search employee, allow administrator to search for employee data, administrator. administrator accesses employee search form, system displays search criteria input, administrator enters employee identifier (matricola), system retrieves employee data, administrator must have valid system access, exit conditions include system displaying employee details or invoking employee not found error if identifier invalid or service unavailable use case if database error occurs, employee identifier must exist and follow valid format.\n- employee not found error, handle invalid employee identifier during search, administrator. system displays error message indicating no employee found, administrator reviews error notification, system returns to search form, exit when error message displayed, extends employee search use case when invalid identifier provided.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.9340427815914154,
            "correct": false
        },
        {
            "ServletRegistraCittadino": "- citizen registration, allow citizen to register into the system, citizen. citizen accesses registration form, system displays data entry fields (name, surname, email, identity card number, tax code, login, password), citizen submits form, system checks identity card existence and login availability, system validates data consistency with existing records, system confirms registration, exit conditions include successful registration or error due to existing login or invalid identity card, identity card number must exist in system, login must be unique with [a-za-z0-9._-] characters under 30 length, personal data must match identity card records.\n- identity card validation, verify citizen's identity document during registration, citizen. system checks identity card number against municipal database, system confirms document validity, exit when validation succeeds or fails, extends citizen registration use case, identity card number must be registered in municipality database.\n- login uniqueness check, ensure citizen's login credentials are unique, citizen. system verifies login availability during registration, system blocks duplicate logins, exit when login availability confirmed or denied, extends citizen registration use case, login must not exist in system before registration.\n- personal data consistency, validate citizen's input against official records, citizen. system compares entered name/surname/tax code with identity card database, system rejects mismatched information, exit when data matches or shows inconsistency error, extends citizen registration use case, tax code must correspond to identity card holder's data.",
            "EA22": "register citizen, allow citizen to register in the system, citizen. citizen accesses registration form, system displays registration form, citizen enters data and confirms, system verifies data correctness, saves data and sends registration email to citizen, entry condition: citizen has accessed the system, exit conditions: system registers citizen or invalid data invoking invalid data use case or service unavailable invoking service unavailable use case, quality requirements: name string matches identity card holder's name with [a-za-z'àéèìòù], length <30, not empty, surname string matches identity card holder's surname with [a-za-z'àéèìòù], length <30, not empty, fiscal code string complies with regulations and 16 characters, identity card string exists in system as xxnnnnnnn format (9 characters), email string follows x@x.x format, length <31, not empty, username not existing in system, contains [a-za-z0-9.-_], length <30, not empty, password contains [a-za-z0-9.-_*+!?,:;àèéìòù], length 8-15.",
            "score": 0.9210288047790527,
            "correct": false
        },
        {
            "Impiegato": "- manage employee information, allow administrator to manage employee records, administrator. administrator accesses employee management section, system displays employee list, administrator selects to add or edit an employee, system shows form with fields (name, surname, matriculation number, email, login), administrator enters or updates data and submits, system validates and saves employee details, exit conditions include data saved successfully or error due to invalid input, employee matriculation number must be unique and follow [a-z0-9] format, email must be valid format.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.909149557352066,
            "correct": false
        },
        {
            "ServletVisualizzaPratiche": "- view applications, allow employee to view all submitted applications, employee. employee accesses application list, system retrieves and displays list of applications, employee scrolls through list to inspect application details, exit when list is displayed or service unavailable invoking service unavailable use case, employee must have system access.",
            "EA44": "view pending applications employee, allow employee to view pending applications, employee. employee selects view pending requests, system displays list of pending applications, exit conditions include employee selecting request invoking show pending application employee use case, returning to previous screen, or system invoking service unavailable use case for unexpected errors, employee must be logged in.",
            "score": 0.9055375337600708,
            "correct": false
        },
        {
            "ServletModificaImpiegato": "- modify employee personal information, allow administrator to update employee's personal details, administrator. administrator accesses employee modification form, system displays employee search by id, administrator enters valid employee id and submits, system retrieves employee data and displays edit form, administrator modifies details (name, surname, email) and confirms, system saves updated information, administrator must be authenticated, exit conditions include successful update or error if invalid employee id.  \n- update employee access credentials, allow administrator to change employee's login credentials, administrator. administrator selects employee via valid id search, system displays current login/password fields, administrator enters new credentials and confirms, system verifies format and updates records, exit when credentials modified or error if password violates length/special character rules.  \n- employee search by id, enable administrator to locate employee records, administrator. administrator initiates employee modification process, system requires valid employee id input, administrator enters id and submits search, system verifies id existence and retrieves data, invalid id triggers error notification.  \n- handle modification errors, manage database exceptions during employee updates, administrator. system detects database errors during save operation, displays service unavailable message, administrator returns to employee management dashboard, extends modification use cases with error recovery path.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.9045839846134185,
            "correct": false
        },
        {
            "ImpiegatoManager": "- modify employee data, allow administrator to update employee information, administrator. administrator selects employee by employee id, system displays current data, administrator edits data fields and confirms changes, system updates employee record, employee id must exist in system.  \n- search employee by id, allow administrator to retrieve employee details via unique identifier, administrator. administrator enters employee id in search form, system displays employee information, employee must be registered in system.  \n- insert employee, allow administrator to register new employee into system, administrator. administrator navigates to employee creation form, enters employee details (name, surname, id), submits data, system stores new employee record, employee id must be unique.  \n- delete employee, allow administrator to remove employee from system, administrator. administrator selects employee by id, confirms deletion request, system removes employee record, employee must exist in system.  \n- search employees by name, allow administrator to find employees via name criteria, administrator. administrator inputs employee name and surname, system returns matching employee records, at least one search parameter must be provided.  \n- list employees, allow administrator to view all registered employees, administrator. administrator accesses employee directory, system displays complete employee list sorted alphabetically.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.9041524350643158,
            "correct": false
        },
        {
            "ServletInserisciImpiegato": "- insert employee, allow administrator to register new employees into the system, administrator. administrator navigates to employee registration form, system displays input fields for employee details (name, surname, email, matricola, login, password, type), administrator submits form, system validates data and creates employee account, exit conditions include successful registration or error due to duplicate matricola/login invoking invalid data use case, employee's matricola must be unique and not existing in the system, login must follow [a-za-z0-9._-] format under 30 characters, password must meet [a-za-z0-9._-*+!?,:;àèéìòù] criteria with 8-15 length.  \n- handle duplicate employee, manage duplicate employee registration attempts, administrator. system detects duplicate matricola or login during registration, displays error message, administrator reviews entered data and resubmits corrected information, exit when registration succeeds or administrator cancels operation, extends insert employee use case to handle conflicts.  \n- assign employee access, enable administrator to set employee system access credentials, administrator. administrator selects access type (employee role) during registration, system creates login credentials linked to employee profile, exit conditions include successful access setup or error due to invalid access type, access type must be 'impiegato' for employees.  \n- incorrect data, handle invalid input during employee registration by redisplaying form, administrator. system validates input fields, detects invalid format or missing data, shows error messages, administrator corrects data and resubmits, exit when valid submission occurs, extends insert employee use case to enforce data integrity rules.",
            "EA3": "employee authentication, allow employee to authenticate into the system, employee. employee accesses authentication session, system displays login form for data entry, employee enters credentials and submits authentication request, system verifies data correctness and grants access, handle incorrect data by invoking incorrect data use case or service unavailable by invoking service unavailable use case, employee must have system access. username must exist, be well-formed with [a-za-z0-9 .-_], length under 30 characters, and not empty. password must exist, be well-formed with [a-za-z0-9.-_*+!?,:;àèéìòù], length between 8-15 characters.",
            "score": 0.9029227912425996,
            "correct": false
        },
        {
            "ServletRegistraCittadino": "- citizen registration, allow citizen to register into the system, citizen. citizen accesses registration form, system displays data entry fields (name, surname, email, identity card number, tax code, login, password), citizen submits form, system checks identity card existence and login availability, system validates data consistency with existing records, system confirms registration, exit conditions include successful registration or error due to existing login or invalid identity card, identity card number must exist in system, login must be unique with [a-za-z0-9._-] characters under 30 length, personal data must match identity card records.\n- identity card validation, verify citizen's identity document during registration, citizen. system checks identity card number against municipal database, system confirms document validity, exit when validation succeeds or fails, extends citizen registration use case, identity card number must be registered in municipality database.\n- login uniqueness check, ensure citizen's login credentials are unique, citizen. system verifies login availability during registration, system blocks duplicate logins, exit when login availability confirmed or denied, extends citizen registration use case, login must not exist in system before registration.\n- personal data consistency, validate citizen's input against official records, citizen. system compares entered name/surname/tax code with identity card database, system rejects mismatched information, exit when data matches or shows inconsistency error, extends citizen registration use case, tax code must correspond to identity card holder's data.",
            "EA23": "register citizen, allow citizen to register in the system, citizen. citizen accesses registration form, system displays form, citizen enters data and confirms, system verifies data correctness, saves data and sends registration email, handle invalid data by invoking invalid data use case, handle service unavailable by invoking service unavailable use case, citizen must have system access. name string matches identity card holder, well-formed with [a-za-z'àéèìòù], length <30, not empty. surname string matches identity card holder, well-formed with [a-za-z'àéèìòù], length <30, not empty. fiscal code string complies with regulations, 16 characters. identity card string exists in system, format xxnnnnnnn, 9 characters. email string format x@x.x, length <31, not empty. username string unique, well-formed with [a-za-z0-9.-_], length <30, not empty. password string well-formed with [a-za-z0-9.-_*+!?,:;àèéìòù], length 8-15.",
            "score": 0.9011991560459136,
            "correct": false
        },
        {
            "DbImpiegato": "- register employee, allow administrator to add new employee records, administrator. administrator accesses employee registration form, enters employee details (name, surname, email, matricola, login), system validates and stores data, administrator must ensure unique matricola and valid login credentials, exit conditions include successful registration or error for duplicate entries.\n- delete employee record, allow administrator to remove employee from system, administrator. administrator selects employee via matricola, system verifies identity, removes employee data, exit when deletion confirmed or error occurs for invalid matricola.\n- search employee by name, allow employee to find colleagues via name criteria, employee. employee enters name and surname in search form, system returns matching records, exit when results displayed or no matches found.\n- view employee details, allow employee to access colleague profiles, employee. employee selects colleague via matricola/login, system displays full profile (name, surname, email, credentials), exit when data appears or invalid identifier error occurs.\n- modify employee information, allow administrator to update employee data, administrator. administrator selects target employee, edits fields (matricola, email, login), system validates changes and updates records, exit when changes saved or error occurs for invalid formats.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.8992014110088349,
            "correct": false
        },
        {
            "ServletModificaImpiegato": "- modify employee personal information, allow administrator to update employee's personal details, administrator. administrator accesses employee modification form, system displays employee search by id, administrator enters valid employee id and submits, system retrieves employee data and displays edit form, administrator modifies details (name, surname, email) and confirms, system saves updated information, administrator must be authenticated, exit conditions include successful update or error if invalid employee id.  \n- update employee access credentials, allow administrator to change employee's login credentials, administrator. administrator selects employee via valid id search, system displays current login/password fields, administrator enters new credentials and confirms, system verifies format and updates records, exit when credentials modified or error if password violates length/special character rules.  \n- employee search by id, enable administrator to locate employee records, administrator. administrator initiates employee modification process, system requires valid employee id input, administrator enters id and submits search, system verifies id existence and retrieves data, invalid id triggers error notification.  \n- handle modification errors, manage database exceptions during employee updates, administrator. system detects database errors during save operation, displays service unavailable message, administrator returns to employee management dashboard, extends modification use cases with error recovery path.",
            "EA21": "employee password recovery, allow employee to recover password, employee. employee forgets password and presses recovery button, system displays form for entering employee id, employee enters id and confirms, system verifies data and sends password to email, handle incorrect data by invoking incorrect data use case or service unavailable by invoking service unavailable use case, employee must be authenticated in the system.",
            "score": 0.8986540317535401,
            "correct": false
        },
        {
            "ServletEliminaImpiegato": "- delete employee, allow administrator to remove an employee from the system, administrator. administrator enters employee identification number, system verifies employee existence, administrator confirms deletion request, system removes employee record and associated access credentials, administrator must be authenticated in the system, exit conditions include successful deletion or invalid employee id invoking incorrect data use case. employee identification number must exist in system records.",
            "EA21": "employee password recovery, allow employee to recover password, employee. employee forgets password and presses recovery button, system displays form for entering employee id, employee enters id and confirms, system verifies data and sends password to email, handle incorrect data by invoking incorrect data use case or service unavailable by invoking service unavailable use case, employee must be authenticated in the system.",
            "score": 0.8952333390712738,
            "correct": false
        },
        {
            "ServletCaricaPratica": "- load application data, allow employee to access citizen and identity card information for application processing, employee. employee selects citizen application from list, system retrieves citizen data and identity card details, system displays application form with pre-filled data, employee must have valid access permissions, citizen must exist in system with valid identity card.",
            "EA31": "accept identity card request, allow employee to process and confirm citizen's identity card request, employee, citizen. employee views notification, system displays identity card creation request, employee certifies request validity by checking data accuracy and enables creation procedure, system sends confirmation email to citizen, citizen goes to counter, extends request identity card use case when employee confirms citizen's request, system notifies citizen as exit condition, employee must be authenticated in the system.",
            "score": 0.8941344976425171,
            "correct": false
        },
        {
            "ServletRegistraCittadino": "- citizen registration, allow citizen to register into the system, citizen. citizen accesses registration form, system displays data entry fields (name, surname, email, identity card number, tax code, login, password), citizen submits form, system checks identity card existence and login availability, system validates data consistency with existing records, system confirms registration, exit conditions include successful registration or error due to existing login or invalid identity card, identity card number must exist in system, login must be unique with [a-za-z0-9._-] characters under 30 length, personal data must match identity card records.\n- identity card validation, verify citizen's identity document during registration, citizen. system checks identity card number against municipal database, system confirms document validity, exit when validation succeeds or fails, extends citizen registration use case, identity card number must be registered in municipality database.\n- login uniqueness check, ensure citizen's login credentials are unique, citizen. system verifies login availability during registration, system blocks duplicate logins, exit when login availability confirmed or denied, extends citizen registration use case, login must not exist in system before registration.\n- personal data consistency, validate citizen's input against official records, citizen. system compares entered name/surname/tax code with identity card database, system rejects mismatched information, exit when data matches or shows inconsistency error, extends citizen registration use case, tax code must correspond to identity card holder's data.",
            "EA19": "recover password citizen, allow citizen to recover forgotten password, citizen. citizen forgets password and presses recover password button, system shows recovery screen requesting username and identity card code, citizen enters data and confirms, system verifies data correctness and sends password to citizen's email, exit conditions include system sending password, invoking incorrect data use case if administrator enters non-existent registration number, or service unavailable use case if service is down, entry condition requires citizen authentication, username must be valid format [a-za-z0-9.-_] under 30 characters, identity card code must be xxnnnnnnn format with 9 characters.",
            "score": 0.8930569529533385,
            "correct": false
        },
        {
            "ServletModificaImpiegato": "- modify employee personal information, allow administrator to update employee's personal details, administrator. administrator accesses employee modification form, system displays employee search by id, administrator enters valid employee id and submits, system retrieves employee data and displays edit form, administrator modifies details (name, surname, email) and confirms, system saves updated information, administrator must be authenticated, exit conditions include successful update or error if invalid employee id.  \n- update employee access credentials, allow administrator to change employee's login credentials, administrator. administrator selects employee via valid id search, system displays current login/password fields, administrator enters new credentials and confirms, system verifies format and updates records, exit when credentials modified or error if password violates length/special character rules.  \n- employee search by id, enable administrator to locate employee records, administrator. administrator initiates employee modification process, system requires valid employee id input, administrator enters id and submits search, system verifies id existence and retrieves data, invalid id triggers error notification.  \n- handle modification errors, manage database exceptions during employee updates, administrator. system detects database errors during save operation, displays service unavailable message, administrator returns to employee management dashboard, extends modification use cases with error recovery path.",
            "EA18": "modify password employee, allow employee to modify their password, employee. employee presses password modification button, system displays form for old and new password entry, employee enters old and new passwords and confirms, system notifies password updated, exit conditions include password modified, invalid data use case called if password under 8 characters or old password incorrect, service unavailable use case invoked if service down, employee must be authenticated in the system.",
            "score": 0.8901528239250183,
            "correct": false
        },
        {
            "ServletEliminaImpiegato": "- delete employee, allow administrator to remove an employee from the system, administrator. administrator enters employee identification number, system verifies employee existence, administrator confirms deletion request, system removes employee record and associated access credentials, administrator must be authenticated in the system, exit conditions include successful deletion or invalid employee id invoking incorrect data use case. employee identification number must exist in system records.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.8889260947704315,
            "correct": false
        },
        {
            "ServletModificaImpiegato": "- modify employee personal information, allow administrator to update employee's personal details, administrator. administrator accesses employee modification form, system displays employee search by id, administrator enters valid employee id and submits, system retrieves employee data and displays edit form, administrator modifies details (name, surname, email) and confirms, system saves updated information, administrator must be authenticated, exit conditions include successful update or error if invalid employee id.  \n- update employee access credentials, allow administrator to change employee's login credentials, administrator. administrator selects employee via valid id search, system displays current login/password fields, administrator enters new credentials and confirms, system verifies format and updates records, exit when credentials modified or error if password violates length/special character rules.  \n- employee search by id, enable administrator to locate employee records, administrator. administrator initiates employee modification process, system requires valid employee id input, administrator enters id and submits search, system verifies id existence and retrieves data, invalid id triggers error notification.  \n- handle modification errors, manage database exceptions during employee updates, administrator. system detects database errors during save operation, displays service unavailable message, administrator returns to employee management dashboard, extends modification use cases with error recovery path.",
            "EA7": "insert employee, allow administrator to register a new employee, administrator. administrator accesses system via admin terminal, initiates registration, system displays form, administrator enters employee data and submits, system checks for existing employee id, generates password, saves data, confirms registration with password, handle existing id with incorrect data use case or service unavailable via service unavailable use case. administrator must be authenticated. name allows [a-z a-z ' accents], <31 chars, non-empty. surname same as name. email format x@x.x, <31 chars. employee id numeric, 6 chars. username unique, [a-z a-z 0-9 .-_], <31, non-empty. password [a-z a-z 0-9 .-_*+!?,:; accents], 8-15 chars. confirm password matches.",
            "score": 0.888517826795578,
            "correct": false
        },
        {
            "ServletRegistraCittadino": "- citizen registration, allow citizen to register into the system, citizen. citizen accesses registration form, system displays data entry fields (name, surname, email, identity card number, tax code, login, password), citizen submits form, system checks identity card existence and login availability, system validates data consistency with existing records, system confirms registration, exit conditions include successful registration or error due to existing login or invalid identity card, identity card number must exist in system, login must be unique with [a-za-z0-9._-] characters under 30 length, personal data must match identity card records.\n- identity card validation, verify citizen's identity document during registration, citizen. system checks identity card number against municipal database, system confirms document validity, exit when validation succeeds or fails, extends citizen registration use case, identity card number must be registered in municipality database.\n- login uniqueness check, ensure citizen's login credentials are unique, citizen. system verifies login availability during registration, system blocks duplicate logins, exit when login availability confirmed or denied, extends citizen registration use case, login must not exist in system before registration.\n- personal data consistency, validate citizen's input against official records, citizen. system compares entered name/surname/tax code with identity card database, system rejects mismatched information, exit when data matches or shows inconsistency error, extends citizen registration use case, tax code must correspond to identity card holder's data.",
            "EA2": "authenticate citizen, allow citizen to log in handling incorrect data and service unavailability, citizen. citizen accesses authentication session, system displays login form, citizen enters credentials and submits, system verifies and grants access, handle incorrect data by invoking incorrect data use case, handle service unavailable by invoking service unavailable use case, username must exist in system with [a-za-z0-9.-_] characters and length <30, password must exist in system with [a-za-z0-9.-_*+!?,:;àèéìòù] characters and length 8-15.",
            "score": 0.8860409140586852,
            "correct": false
        },
        {
            "ServletLogin": "- administrator authentication, allow administrator to authenticate into the system, administrator. administrator accesses system, system displays login form for credentials input, administrator enters data and submits authentication request, system verifies data and grants access with specified permissions, exit conditions include successful access or invalid credentials invoking invalid data use case or service unavailable invoking service unavailable use case, username must be present with [a-za-z0-9._-] characters under 30 length, password must be present with [a-za-z0-9._-*+!?,:;àèéìòù] characters between 8-15 length.\n- authenticate citizen, allow citizen to log in handling incorrect data and service unavailability, citizen. citizen accesses authentication session, system displays login form, citizen enters credentials and submits, system verifies and grants access, handle incorrect data by invoking incorrect data use case, handle service unavailable by invoking service unavailable use case, username must exist in system with [a-za-z0-9.-_] characters and length <30, password must exist in system with [a-za-z0-9.-_*+!?,:;àèéìòù] characters and length 8-15.\n- employee authentication, allow employee to authenticate into the system, employee. employee accesses authentication session, system displays login form for data entry, employee enters credentials and submits authentication request, system verifies data correctness and grants access, handle incorrect data by invoking incorrect data use case or service unavailable by invoking service unavailable use case, employee must have system access. username must exist, be well-formed with [a-za-z0-9 .-_], length under 30 characters, and not empty. password must exist, be well-formed with [a-za-z0-9.-_*+!?,:;àèéìòù], length between 8-15 characters.\n- incorrect data, handle incorrect input exceptions by redisplaying form, citizen. system displays error message indicating incorrect request, citizen reads notification message, system redisplays input form, exit when form is redisplayed, extends other use cases to handle input error failures.",
            "EA19": "recover password citizen, allow citizen to recover forgotten password, citizen. citizen forgets password and presses recover password button, system shows recovery screen requesting username and identity card code, citizen enters data and confirms, system verifies data correctness and sends password to citizen's email, exit conditions include system sending password, invoking incorrect data use case if administrator enters non-existent registration number, or service unavailable use case if service is down, entry condition requires citizen authentication, username must be valid format [a-za-z0-9.-_] under 30 characters, identity card code must be xxnnnnnnn format with 9 characters.",
            "score": 0.8855704069137573,
            "correct": false
        },
        {
            "Richiesta": "- submit request, allow citizen to submit a formal request or application, citizen. citizen selects request type (application, certificate), system displays submission form, citizen enters required data and confirms, system creates request with pending status, citizen must be authenticated in the system, exit conditions include system storing request with generated id or invoking incorrect data use case for invalid input, request type must be valid (application types: identity card, family status, change of residence), date must be in dd/mm/yyyy format.  \n- view request status, allow citizen to check current status of submitted requests, citizen. citizen accesses request tracking section, system displays list of citizen's requests with status (accepted, refused, pending), citizen selects specific request, system shows detailed status information and document link if available, exit when citizen reviews status or service unavailable case invoked, citizen must own the requested application.  \n- process request, allow employee to update request status and attach documents, employee. employee accesses request management interface, system displays pending requests list, employee selects request and reviews data, employee sets new status (accepted/refused) and uploads document if required, system updates request and notifies citizen, employee must have valid permissions, exit conditions include status updated with timestamp or incorrect data case invoked for invalid document format.  \n- cancel request, allow citizen to withdraw pending requests, citizen. citizen views active requests list, citizen selects pending request and chooses cancel option, system confirms cancellation and updates status to withdrawn, exit when request is canceled or service unavailable case invoked, cancellation only allowed if status is pending.",
            "EA34": "request third party certificates, allow citizen to request certificates for third parties, citizen. citizen selects specific certificate (civil status certificates, registry certificates), system displays data entry form for subject person, citizen enters subject's data (see note), system stores citizen and subject data in dedicated module, system displays requested certificate screen, citizen selects payment and delivery method, system sends certificate, citizen must be authenticated in system, exit conditions include system sending certificate or invoking service unavailable use case, if citizen is not close relative of subject must specify valid request reason.",
            "score": 0.8852825224399566,
            "correct": false
        },
        {
            "ServletInserisciAmministratore": "- register administrator, allow administrator to register new administrator accounts, administrator. administrator accesses registration form, system displays input fields for personal and access data, administrator enters details and submits, system validates and creates account, exit conditions include account creation success or failure due to existing login/matricola or invalid data, administrator must have registration privileges. surname must be [a-za-zàèéìòù] 1-30 characters, name same as surname, email valid format, matricola unique numeric code, login unique [a-za-z0-9._-] under 30 characters, password [a-za-z0-9._-*+!?,:;àèéìòù] 8-15 characters.  \n- incorrect data, handle invalid administrator registration inputs by displaying error, administrator. system shows error message for invalid/missing fields, administrator reviews data, system redisplays form with validation hints, exit when corrected submission occurs, extends registration use case for data correction.",
            "EA1": "administrator authentication, allow administrator to authenticate into the system, administrator. administrator accesses system, system displays login form for credentials input, administrator enters data and submits authentication request, system verifies data and grants access with specified permissions, exit conditions include successful access or invalid credentials invoking invalid data use case or service unavailable invoking service unavailable use case, username must be present with [a-za-z0-9._-] characters under 30 length, password must be present with [a-za-z0-9._-*+!?,:;àèéìòù] characters between 8-15 length.",
            "score": 0.8836562573909759,
            "correct": false
        }
    ],
    "fn": [
        {
            "CartaIdentita": "- create identity card, allow employee to create a new identity card for a citizen, employee. employee accesses identity card creation form, system displays required fields (citizenship, residence, profession), employee enters citizen data and submits, system validates and stores the identity card, employee must have valid access permissions, exit conditions include successful card creation or error handling for invalid data, citizenship must be a valid nation name, residence must match municipal records, profession must adhere to predefined categories.  \n- update identity card details, allow employee to modify existing identity card information, employee. employee selects citizen's identity card, system displays current details, employee edits fields (address, marital status, profession), system validates changes and updates record, exit conditions include successful update or error for invalid modifications, street number must be positive integer, height must be in meters with two decimal places.  \n- view identity card, allow citizen to view their identity card details, citizen. citizen accesses personal profile, system retrieves and displays identity card information (expiry date, distinctive marks), citizen reviews data, exit when citizen closes the view, citizen must be authenticated and have a valid identity card record.  \n- validate expatriation authorization, allow employee to set expatriation validity on identity card, employee. employee selects expatriation validity field during card creation/modification, system toggles authorization status, system enforces legal compliance checks, exit when authorization is saved, validity depends on citizenship and residency status.",
            "EA21": "employee password recovery, allow employee to recover password, employee. employee forgets password and presses recovery button, system displays form for entering employee id, employee enters id and confirms, system verifies data and sends password to email, handle incorrect data by invoking incorrect data use case or service unavailable by invoking service unavailable use case, employee must be authenticated in the system.",
            "score": 0.7703392982482911,
            "correct": true
        },
        {
            "ServletRicercaPratica": "- search by application id, allow employee to search for application using unique code, employee. employee accesses application search form, enters application code, system retrieves application details, employee views application data, employee must be authenticated, exit conditions include displaying application details or invoking invalid data use case if code does not exist.  \n- search by requester id, allow employee to list applications submitted by specific citizen, employee. employee selects requester search option, enters citizen identifier, system retrieves all applications linked to citizen, employee views application list, employee must have valid access permissions.  \n- search by application status, allow employee to filter applications by acceptance state, employee. employee selects status filter (accepted/rejected), system displays applications matching selected status, employee reviews filtered results, applications must exist in selected state.  \n- incorrect data, handle invalid search parameters by redisplaying form, employee. system shows error message for invalid code/status input, employee corrects search criteria, extends search use cases when invalid parameters detected.",
            "EA25": "change of residence, allow citizen to request residence change and employee to process it, citizen and employee. press change residence button, system displays form, citizen enters new residence data, system confirms submission and stores request, employee accesses system to view request, verifies data, completes document, confirms operation, system saves form and updates data, handle service unavailable by invoking service unavailable use case. citizen must be authenticated. new residence municipality name allows [a-z a-z ' àéèìòù .], non-empty. address allows [a-z a-z ' àéèìòù , .], non-empty. civic number allows [0-9 a-z], max 4 chars. phone prefix numeric 2-5 digits. phone number numeric 5-8 digits. family member surname allows [a-z a-z ' àéèìòù], max 30 chars. family member name same as surname. family member birth place allows [a-z a-z ' àéèìòù .], non-empty. family member birth date valid dd/mm/yyyy (1-31,1-12,1900-now). external requester card code format xxnnnnnnn (9 chars).",
            "score": 0.7693588554859161,
            "correct": true
        },
        {
            "DbCittadino": "- register citizen, allow citizen to create a municipal service account, citizen. citizen accesses registration form, enters personal details (name, surname, tax code, birth date/place, email, family unit), submits data, system validates and stores record, exit conditions include successful registration or error handling for duplicate tax code/login or invalid data formats, tax code must follow [a-z0-9] 16-character format, email must contain @ and valid domain structure.  \n- modify citizen profile, allow citizen to update personal information, citizen. citizen accesses profile modification interface, edits editable fields (name, surname, email, family unit), confirms changes, system validates and updates records, citizen must have active authenticated session, exit conditions include successful update or error handling for invalid email format or non-existent family unit.  \n- delete citizen record, allow administrator to remove citizen from system, administrator. administrator searches citizen by id/tax code/name, selects delete action, confirms removal, system removes citizen data and related records, administrator must have deletion privileges, exit conditions include permanent deletion or error handling for non-existent citizen id.  \n- search citizen records, allow employee to retrieve citizen information, employee. employee enters search criteria (full name or tax code), system returns matching citizen profiles with core attributes, employee must have search permissions, exit conditions include displaying results or handling no-match scenarios through empty result set.  \n- manage family unit association, enable citizens to update household membership, citizen. citizen accesses family status section, requests modification to family unit id, system validates new household existence, updates database linkage, exit conditions include successful association change or error handling for invalid family unit id, family unit must be pre-registered in municipal registry.",
            "EA31": "accept identity card request, allow employee to process and confirm citizen's identity card request, employee, citizen. employee views notification, system displays identity card creation request, employee certifies request validity by checking data accuracy and enables creation procedure, system sends confirmation email to citizen, citizen goes to counter, extends request identity card use case when employee confirms citizen's request, system notifies citizen as exit condition, employee must be authenticated in the system.",
            "score": 0.766933262348175,
            "correct": true
        },
        {
            "CIManager": "- retrieve identity card by number, allow employee to retrieve citizen's identity card details using card number, employee. employee accesses identity card retrieval function, system prompts for card number input, employee enters number and submits request, system displays identity card data, employee must have system access, exit conditions include system displaying data or invoking invalid data use case if card not found, card number must exist in system and be valid.  \n- retrieve identity card by citizen id, allow employee to retrieve identity card details by citizen identifier, employee. employee selects citizen identifier, system retrieves associated identity card information, employee views identity card data, exit conditions include system displaying data or invoking invalid data use case if citizen id not found, citizen must have valid identity card registered in system.  \n- incorrect data, handle incorrect input exceptions by redisplaying form, citizen. system displays error message indicating incorrect request, citizen reads notification message, system redisplays input form, exit when form is redisplayed, extends other use cases to handle input error failures.",
            "EA29": "modify application, allow citizen to modify an application if not initialized, citizen. citizen presses modify application button (identity card, change of residence), system displays application modification form, citizen enters data, system saves changes, citizen must be authenticated in the system, extends view application use case when citizen wants to modify application, system modifies application or handles service unavailable by invoking service unavailable use case.",
            "score": 0.7655175685882568,
            "correct": true
        },
        {
            "ServletStatoDiFamiglia": "- view family status, allow citizen to view their family unit composition, citizen. citizen accesses family status section, system requests family unit id, citizen provides id, system retrieves and displays family members list, exit conditions include family members list displayed or invalid id invoking invalid data use case, family unit id must exist in system and be valid.",
            "EA25": "change of residence, allow citizen to request residence change and employee to process it, citizen and employee. press change residence button, system displays form, citizen enters new residence data, system confirms submission and stores request, employee accesses system to view request, verifies data, completes document, confirms operation, system saves form and updates data, handle service unavailable by invoking service unavailable use case. citizen must be authenticated. new residence municipality name allows [a-z a-z ' àéèìòù .], non-empty. address allows [a-z a-z ' àéèìòù , .], non-empty. civic number allows [0-9 a-z], max 4 chars. phone prefix numeric 2-5 digits. phone number numeric 5-8 digits. family member surname allows [a-z a-z ' àéèìòù], max 30 chars. family member name same as surname. family member birth place allows [a-z a-z ' àéèìòù .], non-empty. family member birth date valid dd/mm/yyyy (1-31,1-12,1900-now). external requester card code format xxnnnnnnn (9 chars).",
            "score": 0.7651721119880676,
            "correct": true
        },
        {
            "DbCartaIdentita": "- register identity card, allow employee to create new identity card records, employee. employee accesses identity card registration form, system displays data entry fields, employee inputs card details (number, citizen id, citizenship, residence, etc.), system validates and saves new card, employee must have valid access rights, exit conditions include successful registration or error due to duplicate card number or invalid citizen id.  \n- update identity card address, allow employee to modify residence address on identity card, employee. employee selects identity card by number, system displays current address details, employee enters new street and civic number, system updates record, employee must ensure citizen exists and address data follows municipal format.  \n- delete identity card, allow employee to remove invalid or expired identity cards, employee. employee enters card number for deletion, system verifies card existence and checks for active linkages, system proceeds with deletion if no dependencies found, employee must confirm deletion action.  \n- search identity card by citizen id, allow employee to retrieve citizen's identity card using their id, employee. employee inputs citizen id in search form, system queries database and displays associated identity card details, employee uses information for verification or updates.  \n- modify identity card expiration date, allow employee to update card's expiration date, employee. employee selects card by number, system shows current expiration date, employee enters new valid date, system updates record ensuring new date is after issue date.  \n- validate identity card for expatriation, allow employee to toggle expatriation validity status, employee. employee selects card by number, system displays current expatriation status, employee updates validity flag, system records change for border control reference.",
            "EA2": "authenticate citizen, allow citizen to log in handling incorrect data and service unavailability, citizen. citizen accesses authentication session, system displays login form, citizen enters credentials and submits, system verifies and grants access, handle incorrect data by invoking incorrect data use case, handle service unavailable by invoking service unavailable use case, username must exist in system with [a-za-z0-9.-_] characters and length <30, password must exist in system with [a-za-z0-9.-_*+!?,:;àèéìòù] characters and length 8-15.",
            "score": 0.7642843306064606,
            "correct": true
        },
        {
            "CIManager": "- retrieve identity card by number, allow employee to retrieve citizen's identity card details using card number, employee. employee accesses identity card retrieval function, system prompts for card number input, employee enters number and submits request, system displays identity card data, employee must have system access, exit conditions include system displaying data or invoking invalid data use case if card not found, card number must exist in system and be valid.  \n- retrieve identity card by citizen id, allow employee to retrieve identity card details by citizen identifier, employee. employee selects citizen identifier, system retrieves associated identity card information, employee views identity card data, exit conditions include system displaying data or invoking invalid data use case if citizen id not found, citizen must have valid identity card registered in system.  \n- incorrect data, handle incorrect input exceptions by redisplaying form, citizen. system displays error message indicating incorrect request, citizen reads notification message, system redisplays input form, exit when form is redisplayed, extends other use cases to handle input error failures.",
            "EA27": "change of family status, allow citizen to request a change in family status continued by employee, citizen employee. citizen presses change family status button, system displays form, citizen enters new family unit data and submits request, system sends request to competent employee, system creates document for competent office or handle service unavailable by invoking service unavailable use case, citizen must be authenticated in the system.",
            "score": 0.7573116898536683,
            "correct": true
        },
        {
            "ControllerFiles": "- upload change of residence request documents, allow employee to upload supporting documents for residence change requests, employee. employee selects document upload function, system displays upload form, employee enters document description and selects file, system validates file type and size, employee confirms upload, system saves document to residence change request folder, exit conditions include successful upload or invalid file type/size invoking invalid data use case, maximum file size 500mb, supported file types determined by system mime types.  \n- invalid file upload, handle invalid file upload exceptions by redisplaying form, employee. system detects invalid file type or size exceeding limit, displays error message, employee reviews error and retries upload, exit when form is redisplayed with error notification, extends upload change of residence request documents use case.",
            "EA25": "change of residence, allow citizen to request residence change and employee to process it, citizen and employee. press change residence button, system displays form, citizen enters new residence data, system confirms submission and stores request, employee accesses system to view request, verifies data, completes document, confirms operation, system saves form and updates data, handle service unavailable by invoking service unavailable use case. citizen must be authenticated. new residence municipality name allows [a-z a-z ' àéèìòù .], non-empty. address allows [a-z a-z ' àéèìòù , .], non-empty. civic number allows [0-9 a-z], max 4 chars. phone prefix numeric 2-5 digits. phone number numeric 5-8 digits. family member surname allows [a-z a-z ' àéèìòù], max 30 chars. family member name same as surname. family member birth place allows [a-z a-z ' àéèìòù .], non-empty. family member birth date valid dd/mm/yyyy (1-31,1-12,1900-now). external requester card code format xxnnnnnnn (9 chars).",
            "score": 0.7560293078422546,
            "correct": true
        },
        {
            "CIManager": "- retrieve identity card by number, allow employee to retrieve citizen's identity card details using card number, employee. employee accesses identity card retrieval function, system prompts for card number input, employee enters number and submits request, system displays identity card data, employee must have system access, exit conditions include system displaying data or invoking invalid data use case if card not found, card number must exist in system and be valid.  \n- retrieve identity card by citizen id, allow employee to retrieve identity card details by citizen identifier, employee. employee selects citizen identifier, system retrieves associated identity card information, employee views identity card data, exit conditions include system displaying data or invoking invalid data use case if citizen id not found, citizen must have valid identity card registered in system.  \n- incorrect data, handle incorrect input exceptions by redisplaying form, citizen. system displays error message indicating incorrect request, citizen reads notification message, system redisplays input form, exit when form is redisplayed, extends other use cases to handle input error failures.",
            "EA2": "authenticate citizen, allow citizen to log in handling incorrect data and service unavailability, citizen. citizen accesses authentication session, system displays login form, citizen enters credentials and submits, system verifies and grants access, handle incorrect data by invoking incorrect data use case, handle service unavailable by invoking service unavailable use case, username must exist in system with [a-za-z0-9.-_] characters and length <30, password must exist in system with [a-za-z0-9.-_*+!?,:;àèéìòù] characters and length 8-15.",
            "score": 0.7545917630195618,
            "correct": true
        },
        {
            "ServletRicercaCittadino": "- search citizen by name and surname, allow employee to find citizen records using name and surname, employee. employee accesses search form, system displays input fields for name and surname, employee enters data and submits search request, system retrieves matching citizen records, employee must have valid system access, exit conditions include system displaying matching results or no results message, name must be non-empty with [a-zàèéìòù'] characters, surname same as name.\n\n- search citizen by identity card code, allow employee to retrieve citizen data via identity card number, employee. employee inputs identity card code in search form, system queries database for matching code, system displays citizen details if found, employee must be authenticated, exit conditions include citizen details shown or error message if code not found, identity card code must exist in system and be valid format.\n\n- handle no search results, manage scenarios where citizen search yields no matches, employee. system displays no results message, employee reviews search criteria, system redisplays search form, exit when form is redisplayed, extends citizen search use cases to handle empty result sets.\n\n- session validation for citizen search, ensure employee session is active during search operations, employee. system checks session validity upon search request, redirects to login if session invalid, employee must have active session to perform searches, exit conditions include valid session proceeding to search or invalid session redirecting to login.",
            "EA13": "modify citizen email, allow citizen to modify their email, citizen. citizen accesses email modification form, system displays form for new email entry, citizen enters new email and presses confirm button, system updates email, system saves new email or detects error invoking invalid data use case or handles service unavailable via service unavailable use case, citizen must be authenticated in the system.",
            "score": 0.7507552862167358,
            "correct": true
        },
        {
            "CIManager": "- retrieve identity card by number, allow employee to retrieve citizen's identity card details using card number, employee. employee accesses identity card retrieval function, system prompts for card number input, employee enters number and submits request, system displays identity card data, employee must have system access, exit conditions include system displaying data or invoking invalid data use case if card not found, card number must exist in system and be valid.  \n- retrieve identity card by citizen id, allow employee to retrieve identity card details by citizen identifier, employee. employee selects citizen identifier, system retrieves associated identity card information, employee views identity card data, exit conditions include system displaying data or invoking invalid data use case if citizen id not found, citizen must have valid identity card registered in system.  \n- incorrect data, handle incorrect input exceptions by redisplaying form, citizen. system displays error message indicating incorrect request, citizen reads notification message, system redisplays input form, exit when form is redisplayed, extends other use cases to handle input error failures.",
            "EA25": "change of residence, allow citizen to request residence change and employee to process it, citizen and employee. press change residence button, system displays form, citizen enters new residence data, system confirms submission and stores request, employee accesses system to view request, verifies data, completes document, confirms operation, system saves form and updates data, handle service unavailable by invoking service unavailable use case. citizen must be authenticated. new residence municipality name allows [a-z a-z ' àéèìòù .], non-empty. address allows [a-z a-z ' àéèìòù , .], non-empty. civic number allows [0-9 a-z], max 4 chars. phone prefix numeric 2-5 digits. phone number numeric 5-8 digits. family member surname allows [a-z a-z ' àéèìòù], max 30 chars. family member name same as surname. family member birth place allows [a-z a-z ' àéèìòù .], non-empty. family member birth date valid dd/mm/yyyy (1-31,1-12,1900-now). external requester card code format xxnnnnnnn (9 chars).",
            "score": 0.7503976881504059,
            "correct": true
        },
        {
            "ServletStatoDiFamiglia": "- view family status, allow citizen to view their family unit composition, citizen. citizen accesses family status section, system requests family unit id, citizen provides id, system retrieves and displays family members list, exit conditions include family members list displayed or invalid id invoking invalid data use case, family unit id must exist in system and be valid.",
            "EA6": "insert citizen, allow employee to insert a new citizen, employee. employee accesses system and activates registration procedure, system displays insert form, employee enters citizen data and submits, system receives form and checks for existing citizen, exit conditions include system registers employee or existing id invokes incorrect data use case or service unavailable invokes service unavailable use case, employee must be authenticated, name must contain [a-za-z ' àéèìòù] under 30 chars, surname same, fiscal code 16 chars valid, birth date valid dd/mm/yyyy format, birth place same as name, email valid x@x.x format, family unit id numeric and present in system greater than 0.",
            "score": 0.7498672187328339,
            "correct": true
        },
        {
            "DbAccesso": "- register access, allow administrator to create new system access credentials, administrator. administrator navigates to access registration, system displays form, administrator enters login, password, and user type, system checks login uniqueness and saves credentials, exit conditions include access created or existing login error, login must be unique and follow [a-za-z0-9._-] format with maximum 30 characters, password must comply with [a-za-z0-9._-*+!?,:;àèéìòù] format between 8-15 characters.  \n- delete access, allow administrator to remove user system access, administrator. administrator selects target user login, system confirms deletion request, administrator confirms action, system removes access credentials, exit conditions include access removed or service error, administrator must have valid permissions.  \n- verify credentials, authenticate user login attempts, citizen/employee/administrator. user enters login and password during authentication, system checks credentials against stored data, grants access if valid, exit conditions include successful login or invalid credentials error.  \n- check login existence, validate login uniqueness during registration, citizen/employee/administrator. user enters desired login, system verifies database for existing matches, returns availability status, exit conditions include unique login confirmation or duplicate error.  \n- modify access credentials, allow users to update login/password, citizen/employee/administrator. user navigates to profile settings, edits login/password fields, system validates new credentials and updates database, exit conditions include updated credentials or invalid format error, new login must be unique if changed.  \n- retrieve access details, allow administrators to view user access information, administrator. administrator searches target user login, system displays associated credentials and user type, exit conditions include data retrieval or invalid user error.  \n- list all accesses, enable administrators to view all registered system users, administrator. administrator requests full access list, system displays logins with types, exit conditions include complete list display or database error.",
            "EA13": "modify citizen email, allow citizen to modify their email, citizen. citizen accesses email modification form, system displays form for new email entry, citizen enters new email and presses confirm button, system updates email, system saves new email or detects error invoking invalid data use case or handles service unavailable via service unavailable use case, citizen must be authenticated in the system.",
            "score": 0.746712726354599,
            "correct": true
        },
        {
            "ServletVisualizzaPratiche": "- view applications, allow employee to view all submitted applications, employee. employee accesses application list, system retrieves and displays list of applications, employee scrolls through list to inspect application details, exit when list is displayed or service unavailable invoking service unavailable use case, employee must have system access.",
            "EA41": "view application, allow citizen to view their applications, citizen. citizen clicks view applications button (identity card, change of residence), system displays screen with citizen's applications, exit conditions include viewing screen or invoking delete application when deleting or invoking modify application when modifying or invoking service unavailable use case, citizen must be authenticated in the system.",
            "score": 0.7407759189605713,
            "correct": true
        },
        {
            "DbCittadino": "- register citizen, allow citizen to create a municipal service account, citizen. citizen accesses registration form, enters personal details (name, surname, tax code, birth date/place, email, family unit), submits data, system validates and stores record, exit conditions include successful registration or error handling for duplicate tax code/login or invalid data formats, tax code must follow [a-z0-9] 16-character format, email must contain @ and valid domain structure.  \n- modify citizen profile, allow citizen to update personal information, citizen. citizen accesses profile modification interface, edits editable fields (name, surname, email, family unit), confirms changes, system validates and updates records, citizen must have active authenticated session, exit conditions include successful update or error handling for invalid email format or non-existent family unit.  \n- delete citizen record, allow administrator to remove citizen from system, administrator. administrator searches citizen by id/tax code/name, selects delete action, confirms removal, system removes citizen data and related records, administrator must have deletion privileges, exit conditions include permanent deletion or error handling for non-existent citizen id.  \n- search citizen records, allow employee to retrieve citizen information, employee. employee enters search criteria (full name or tax code), system returns matching citizen profiles with core attributes, employee must have search permissions, exit conditions include displaying results or handling no-match scenarios through empty result set.  \n- manage family unit association, enable citizens to update household membership, citizen. citizen accesses family status section, requests modification to family unit id, system validates new household existence, updates database linkage, exit conditions include successful association change or error handling for invalid family unit id, family unit must be pre-registered in municipal registry.",
            "EA32": "request rejected identity card, allow employee to reject an identity card request when errors are detected, employee, citizen. employee views received notification, system displays identity card creation request, employee detects data error and rejects procedure, system sends email notification to requesting citizen, system must notify citizen as exit condition, employee must be authenticated in the system, extends request identity card use case when employee does not confirm citizen request.",
            "score": 0.7386660814285279,
            "correct": true
        },
        {
            "DbCittadino": "- register citizen, allow citizen to create a municipal service account, citizen. citizen accesses registration form, enters personal details (name, surname, tax code, birth date/place, email, family unit), submits data, system validates and stores record, exit conditions include successful registration or error handling for duplicate tax code/login or invalid data formats, tax code must follow [a-z0-9] 16-character format, email must contain @ and valid domain structure.  \n- modify citizen profile, allow citizen to update personal information, citizen. citizen accesses profile modification interface, edits editable fields (name, surname, email, family unit), confirms changes, system validates and updates records, citizen must have active authenticated session, exit conditions include successful update or error handling for invalid email format or non-existent family unit.  \n- delete citizen record, allow administrator to remove citizen from system, administrator. administrator searches citizen by id/tax code/name, selects delete action, confirms removal, system removes citizen data and related records, administrator must have deletion privileges, exit conditions include permanent deletion or error handling for non-existent citizen id.  \n- search citizen records, allow employee to retrieve citizen information, employee. employee enters search criteria (full name or tax code), system returns matching citizen profiles with core attributes, employee must have search permissions, exit conditions include displaying results or handling no-match scenarios through empty result set.  \n- manage family unit association, enable citizens to update household membership, citizen. citizen accesses family status section, requests modification to family unit id, system validates new household existence, updates database linkage, exit conditions include successful association change or error handling for invalid family unit id, family unit must be pre-registered in municipal registry.",
            "EA38": "loss of identity card, allow citizen to report lost identity card and notify employee with in-person verification, citizen employee. citizen presses identity card loss button, system sends loss notification to responsible employee, citizen visits employee office with loss report copy, system creates document for competent office or handle service unavailable by invoking service unavailable use case, citizen must be authenticated in the system.",
            "score": 0.7215038716793061,
            "correct": true
        },
        {
            "ServletInserisciAmministratore": "- register administrator, allow administrator to register new administrator accounts, administrator. administrator accesses registration form, system displays input fields for personal and access data, administrator enters details and submits, system validates and creates account, exit conditions include account creation success or failure due to existing login/matricola or invalid data, administrator must have registration privileges. surname must be [a-za-zàèéìòù] 1-30 characters, name same as surname, email valid format, matricola unique numeric code, login unique [a-za-z0-9._-] under 30 characters, password [a-za-z0-9._-*+!?,:;àèéìòù] 8-15 characters.  \n- incorrect data, handle invalid administrator registration inputs by displaying error, administrator. system shows error message for invalid/missing fields, administrator reviews data, system redisplays form with validation hints, exit when corrected submission occurs, extends registration use case for data correction.",
            "EA138": "incorrect data, handle incorrect input exceptions by redisplaying form, citizen. system displays error message indicating incorrect request, citizen reads notification message, system redisplays input form, exit when form is redisplayed, extends other use cases to handle input error failures.",
            "score": 0.7177788197994233,
            "correct": true
        },
        {
            "ServletLogin": "- administrator authentication, allow administrator to authenticate into the system, administrator. administrator accesses system, system displays login form for credentials input, administrator enters data and submits authentication request, system verifies data and grants access with specified permissions, exit conditions include successful access or invalid credentials invoking invalid data use case or service unavailable invoking service unavailable use case, username must be present with [a-za-z0-9._-] characters under 30 length, password must be present with [a-za-z0-9._-*+!?,:;àèéìòù] characters between 8-15 length.\n- authenticate citizen, allow citizen to log in handling incorrect data and service unavailability, citizen. citizen accesses authentication session, system displays login form, citizen enters credentials and submits, system verifies and grants access, handle incorrect data by invoking incorrect data use case, handle service unavailable by invoking service unavailable use case, username must exist in system with [a-za-z0-9.-_] characters and length <30, password must exist in system with [a-za-z0-9.-_*+!?,:;àèéìòù] characters and length 8-15.\n- employee authentication, allow employee to authenticate into the system, employee. employee accesses authentication session, system displays login form for data entry, employee enters credentials and submits authentication request, system verifies data correctness and grants access, handle incorrect data by invoking incorrect data use case or service unavailable by invoking service unavailable use case, employee must have system access. username must exist, be well-formed with [a-za-z0-9 .-_], length under 30 characters, and not empty. password must exist, be well-formed with [a-za-z0-9.-_*+!?,:;àèéìòù], length between 8-15 characters.\n- incorrect data, handle incorrect input exceptions by redisplaying form, citizen. system displays error message indicating incorrect request, citizen reads notification message, system redisplays input form, exit when form is redisplayed, extends other use cases to handle input error failures.",
            "EA138": "incorrect data, handle incorrect input exceptions by redisplaying form, citizen. system displays error message indicating incorrect request, citizen reads notification message, system redisplays input form, exit when form is redisplayed, extends other use cases to handle input error failures.",
            "score": 0.7019529521465302,
            "correct": true
        },
        {
            "ServletVisualizzaPratiche": "- view applications, allow employee to view all submitted applications, employee. employee accesses application list, system retrieves and displays list of applications, employee scrolls through list to inspect application details, exit when list is displayed or service unavailable invoking service unavailable use case, employee must have system access.",
            "EA25": "change of residence, allow citizen to request residence change and employee to process it, citizen and employee. press change residence button, system displays form, citizen enters new residence data, system confirms submission and stores request, employee accesses system to view request, verifies data, completes document, confirms operation, system saves form and updates data, handle service unavailable by invoking service unavailable use case. citizen must be authenticated. new residence municipality name allows [a-z a-z ' àéèìòù .], non-empty. address allows [a-z a-z ' àéèìòù , .], non-empty. civic number allows [0-9 a-z], max 4 chars. phone prefix numeric 2-5 digits. phone number numeric 5-8 digits. family member surname allows [a-z a-z ' àéèìòù], max 30 chars. family member name same as surname. family member birth place allows [a-z a-z ' àéèìòù .], non-empty. family member birth date valid dd/mm/yyyy (1-31,1-12,1900-now). external requester card code format xxnnnnnnn (9 chars).",
            "score": 0.6944374024868012,
            "correct": true
        },
        {
            "ControllerFiles": "- upload change of residence request documents, allow employee to upload supporting documents for residence change requests, employee. employee selects document upload function, system displays upload form, employee enters document description and selects file, system validates file type and size, employee confirms upload, system saves document to residence change request folder, exit conditions include successful upload or invalid file type/size invoking invalid data use case, maximum file size 500mb, supported file types determined by system mime types.  \n- invalid file upload, handle invalid file upload exceptions by redisplaying form, employee. system detects invalid file type or size exceeding limit, displays error message, employee reviews error and retries upload, exit when form is redisplayed with error notification, extends upload change of residence request documents use case.",
            "EA34": "request third party certificates, allow citizen to request certificates for third parties, citizen. citizen selects specific certificate (civil status certificates, registry certificates), system displays data entry form for subject person, citizen enters subject's data (see note), system stores citizen and subject data in dedicated module, system displays requested certificate screen, citizen selects payment and delivery method, system sends certificate, citizen must be authenticated in system, exit conditions include system sending certificate or invoking service unavailable use case, if citizen is not close relative of subject must specify valid request reason.",
            "score": 0.671857351064682,
            "correct": true
        }
    ]
}