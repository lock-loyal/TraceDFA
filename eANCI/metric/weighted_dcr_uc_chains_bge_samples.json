{
    "fp": [
        {
            "ServletRicercaImpiegato": "- search employee, allow administrator to search for employee data, administrator. administrator accesses employee search form, system displays search criteria input, administrator enters employee identifier (matricola), system retrieves employee data, administrator must have valid system access, exit conditions include system displaying employee details or invoking employee not found error if identifier invalid or service unavailable use case if database error occurs, employee identifier must exist and follow valid format.\n- employee not found error, handle invalid employee identifier during search, administrator. system displays error message indicating no employee found, administrator reviews error notification, system returns to search form, exit when error message displayed, extends employee search use case when invalid identifier provided.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.8884765625,
            "correct": false
        },
        {
            "ServletRegistraCittadino": "- citizen registration, allow citizen to register into the system, citizen. citizen accesses registration form, system displays data entry fields (name, surname, email, identity card number, tax code, login, password), citizen submits form, system checks identity card existence and login availability, system validates data consistency with existing records, system confirms registration, exit conditions include successful registration or error due to existing login or invalid identity card, identity card number must exist in system, login must be unique with [a-za-z0-9._-] characters under 30 length, personal data must match identity card records.\n- identity card validation, verify citizen's identity document during registration, citizen. system checks identity card number against municipal database, system confirms document validity, exit when validation succeeds or fails, extends citizen registration use case, identity card number must be registered in municipality database.\n- login uniqueness check, ensure citizen's login credentials are unique, citizen. system verifies login availability during registration, system blocks duplicate logins, exit when login availability confirmed or denied, extends citizen registration use case, login must not exist in system before registration.\n- personal data consistency, validate citizen's input against official records, citizen. system compares entered name/surname/tax code with identity card database, system rejects mismatched information, exit when data matches or shows inconsistency error, extends citizen registration use case, tax code must correspond to identity card holder's data.",
            "EA22": "register citizen, allow citizen to register in the system, citizen. citizen accesses registration form, system displays registration form, citizen enters data and confirms, system verifies data correctness, saves data and sends registration email to citizen, entry condition: citizen has accessed the system, exit conditions: system registers citizen or invalid data invoking invalid data use case or service unavailable invoking service unavailable use case, quality requirements: name string matches identity card holder's name with [a-za-z'àéèìòù], length <30, not empty, surname string matches identity card holder's surname with [a-za-z'àéèìòù], length <30, not empty, fiscal code string complies with regulations and 16 characters, identity card string exists in system as xxnnnnnnn format (9 characters), email string follows x@x.x format, length <31, not empty, username not existing in system, contains [a-za-z0-9.-_], length <30, not empty, password contains [a-za-z0-9.-_*+!?,:;àèéìòù], length 8-15.",
            "score": 0.88037109375,
            "correct": false
        },
        {
            "ServletRegistraCittadino": "- citizen registration, allow citizen to register into the system, citizen. citizen accesses registration form, system displays data entry fields (name, surname, email, identity card number, tax code, login, password), citizen submits form, system checks identity card existence and login availability, system validates data consistency with existing records, system confirms registration, exit conditions include successful registration or error due to existing login or invalid identity card, identity card number must exist in system, login must be unique with [a-za-z0-9._-] characters under 30 length, personal data must match identity card records.\n- identity card validation, verify citizen's identity document during registration, citizen. system checks identity card number against municipal database, system confirms document validity, exit when validation succeeds or fails, extends citizen registration use case, identity card number must be registered in municipality database.\n- login uniqueness check, ensure citizen's login credentials are unique, citizen. system verifies login availability during registration, system blocks duplicate logins, exit when login availability confirmed or denied, extends citizen registration use case, login must not exist in system before registration.\n- personal data consistency, validate citizen's input against official records, citizen. system compares entered name/surname/tax code with identity card database, system rejects mismatched information, exit when data matches or shows inconsistency error, extends citizen registration use case, tax code must correspond to identity card holder's data.",
            "EA23": "register citizen, allow citizen to register in the system, citizen. citizen accesses registration form, system displays form, citizen enters data and confirms, system verifies data correctness, saves data and sends registration email, handle invalid data by invoking invalid data use case, handle service unavailable by invoking service unavailable use case, citizen must have system access. name string matches identity card holder, well-formed with [a-za-z'àéèìòù], length <30, not empty. surname string matches identity card holder, well-formed with [a-za-z'àéèìòù], length <30, not empty. fiscal code string complies with regulations, 16 characters. identity card string exists in system, format xxnnnnnnn, 9 characters. email string format x@x.x, length <31, not empty. username string unique, well-formed with [a-za-z0-9.-_], length <30, not empty. password string well-formed with [a-za-z0-9.-_*+!?,:;àèéìòù], length 8-15.",
            "score": 0.87158203125,
            "correct": false
        },
        {
            "ServletCaricaPratica": "- load application data, allow employee to access citizen and identity card information for application processing, employee. employee selects citizen application from list, system retrieves citizen data and identity card details, system displays application form with pre-filled data, employee must have valid access permissions, citizen must exist in system with valid identity card.",
            "EA30": "request identity card, allow citizen to request an identity card and employee to process it, citizen, employee. citizen views family status and selects family member, system displays form for personal data input (height, distinctive features etc.), citizen enters data, selects payment method, confirms, system shows documentation to present at office counter during opening hours, citizen confirms, system notifies employee of request, employee receives application and chooses to accept or reject invoking request identity card rejected or request identity card accepted use cases, handle service unavailable by invoking service unavailable use case, citizen must be authenticated in the system and exercise parental authority over subject.",
            "score": 0.8539550781249999,
            "correct": false
        },
        {
            "ServletVisualizzaPratiche": "- view applications, allow employee to view all submitted applications, employee. employee accesses application list, system retrieves and displays list of applications, employee scrolls through list to inspect application details, exit when list is displayed or service unavailable invoking service unavailable use case, employee must have system access.",
            "EA44": "view pending applications employee, allow employee to view pending applications, employee. employee selects view pending requests, system displays list of pending applications, exit conditions include employee selecting request invoking show pending application employee use case, returning to previous screen, or system invoking service unavailable use case for unexpected errors, employee must be logged in.",
            "score": 0.849755859375,
            "correct": false
        },
        {
            "ServletModificaAccesso": "- modify access credentials, allow citizen to update login and password, citizen. citizen accesses credentials modification form, system displays login and password fields, citizen enters new data and confirms, system updates credentials, exit conditions include successful update or error invoking invalid data use case, password must match confirmation field and comply with length/special character rules.  \n- modify employee access, allow employee to change login credentials, employee. employee accesses modification form, system displays current login and password fields, employee enters new data and submits, system verifies and updates credentials, employee must have active session, exit conditions include success or invalid data error if password mismatch or invalid format.  \n- handle session expiration, redirect unauthenticated users to login page, system. system detects expired or invalid session during access modification, redirects user to appropriate login page based on origin (citizen/employee portal), exit when user reaches login screen.",
            "EA11": "modify citizen, allow employee to modify a citizen's information, employee. employee presses modify citizen button, system displays edit form, employee enters data, system saves changes, handle service unavailable by invoking service unavailable use case, system modifies citizen or service unavailable as exit conditions, employee must be authenticated in the system and use case includes search citizen when modifying.",
            "score": 0.847900390625,
            "correct": false
        },
        {
            "ImpiegatoManager": "- modify employee data, allow administrator to update employee information, administrator. administrator selects employee by employee id, system displays current data, administrator edits data fields and confirms changes, system updates employee record, employee id must exist in system.  \n- search employee by id, allow administrator to retrieve employee details via unique identifier, administrator. administrator enters employee id in search form, system displays employee information, employee must be registered in system.  \n- insert employee, allow administrator to register new employee into system, administrator. administrator navigates to employee creation form, enters employee details (name, surname, id), submits data, system stores new employee record, employee id must be unique.  \n- delete employee, allow administrator to remove employee from system, administrator. administrator selects employee by id, confirms deletion request, system removes employee record, employee must exist in system.  \n- search employees by name, allow administrator to find employees via name criteria, administrator. administrator inputs employee name and surname, system returns matching employee records, at least one search parameter must be provided.  \n- list employees, allow administrator to view all registered employees, administrator. administrator accesses employee directory, system displays complete employee list sorted alphabetically.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.8478515625,
            "correct": false
        },
        {
            "ServletCaricaPratica": "- load application data, allow employee to access citizen and identity card information for application processing, employee. employee selects citizen application from list, system retrieves citizen data and identity card details, system displays application form with pre-filled data, employee must have valid access permissions, citizen must exist in system with valid identity card.",
            "EA31": "accept identity card request, allow employee to process and confirm citizen's identity card request, employee, citizen. employee views notification, system displays identity card creation request, employee certifies request validity by checking data accuracy and enables creation procedure, system sends confirmation email to citizen, citizen goes to counter, extends request identity card use case when employee confirms citizen's request, system notifies citizen as exit condition, employee must be authenticated in the system.",
            "score": 0.842919921875,
            "correct": false
        },
        {
            "CittadinoManager": "- register citizen, allow citizen to register in the system, citizen. citizen accesses registration form, system displays input fields for personal data, citizen enters details and submits, system saves citizen information, exit conditions include successful registration or invalid data invoking error handling, login must be unique and follow [a-za-z0-9.-_] format, email must be valid format.  \n- modify citizen login, allow citizen to update their login credentials, citizen. citizen accesses profile settings, system displays login modification form, citizen enters new login and confirms, system updates login information, citizen must exist in the system, exit includes successful update or error if login already exists.  \n- modify citizen email, allow citizen to change their email address, citizen. citizen navigates to email settings, system displays email update form, citizen enters new email and submits, system validates and saves new email, exit when email updated or invalid format error occurs.  \n- search citizen, allow employee to find citizens by name and surname, employee. employee enters search criteria (name and/or surname), system retrieves matching citizens, employee views results list, exit when results displayed or no matches found.  \n- delete citizen record, allow administrator to remove citizen from system, administrator. administrator selects citizen record, confirms deletion request, system permanently removes citizen data, citizen must exist in the system prior to deletion.  \n- update family unit, allow employee to modify citizen's family unit association, employee. employee selects citizen and new family unit, system updates family unit linkage, exit when association changed or invalid unit error occurs.  \n- modify citizen name, allow citizen to update their legal name, citizen. citizen accesses name change form, enters new name and submits, system validates and updates record, name must contain only [a-zàèéìòù] characters with 1-30 length.  \n- modify citizen surname, allow citizen to update their legal surname, citizen. citizen accesses surname modification form, enters new surname and confirms, system validates and saves changes, surname follows same format constraints as name.",
            "EA23": "register citizen, allow citizen to register in the system, citizen. citizen accesses registration form, system displays form, citizen enters data and confirms, system verifies data correctness, saves data and sends registration email, handle invalid data by invoking invalid data use case, handle service unavailable by invoking service unavailable use case, citizen must have system access. name string matches identity card holder, well-formed with [a-za-z'àéèìòù], length <30, not empty. surname string matches identity card holder, well-formed with [a-za-z'àéèìòù], length <30, not empty. fiscal code string complies with regulations, 16 characters. identity card string exists in system, format xxnnnnnnn, 9 characters. email string format x@x.x, length <31, not empty. username string unique, well-formed with [a-za-z0-9.-_], length <30, not empty. password string well-formed with [a-za-z0-9.-_*+!?,:;àèéìòù], length 8-15.",
            "score": 0.84111328125,
            "correct": false
        },
        {
            "ServletInserisciAmministratore": "- register administrator, allow administrator to register new administrator accounts, administrator. administrator accesses registration form, system displays input fields for personal and access data, administrator enters details and submits, system validates and creates account, exit conditions include account creation success or failure due to existing login/matricola or invalid data, administrator must have registration privileges. surname must be [a-za-zàèéìòù] 1-30 characters, name same as surname, email valid format, matricola unique numeric code, login unique [a-za-z0-9._-] under 30 characters, password [a-za-z0-9._-*+!?,:;àèéìòù] 8-15 characters.  \n- incorrect data, handle invalid administrator registration inputs by displaying error, administrator. system shows error message for invalid/missing fields, administrator reviews data, system redisplays form with validation hints, exit when corrected submission occurs, extends registration use case for data correction.",
            "EA1": "administrator authentication, allow administrator to authenticate into the system, administrator. administrator accesses system, system displays login form for credentials input, administrator enters data and submits authentication request, system verifies data and grants access with specified permissions, exit conditions include successful access or invalid credentials invoking invalid data use case or service unavailable invoking service unavailable use case, username must be present with [a-za-z0-9._-] characters under 30 length, password must be present with [a-za-z0-9._-*+!?,:;àèéìòù] characters between 8-15 length.",
            "score": 0.836376953125,
            "correct": false
        },
        {
            "ServletCreaPdfCambioAbitazione": "- declare residence change, allow citizen to declare change of residence, citizen. citizen accesses residence change form, system displays data entry fields for new address and family unit details, citizen submits declaration, system generates official pdf document with declared information, citizen must provide valid identity document and authenticate in the system, exit conditions include system generating pdf or invoking incorrect data use case if required fields missing, new address must follow [a-zàèéìòù' .] characters with minimum 1 character length, civic number must be numeric 1-5 digits.  \n- update family unit composition, enable citizen to specify family members moving together, citizen. citizen lists family members in declaration form including parentage relations, system validates family status consistency, system records updated family unit data, exit when family member table appears in generated pdf, family member names must use [a-zàèéìòù' .] characters with 1-30 length, birth dates require valid dd/mm/yyyy format.  \n- remove citizen record, handle citizen relocation outside municipality, employee. system detects residence change to external municipality, employee verifies relocation authenticity, system deletes citizen access and family unit records, exit when citizen data removed from database, requires municipal police confirmation of address validity.  \n- validate property occupancy, ensure declared residence occupancy compliance, employee. system cross-checks property ownership/rental status with municipal registry, employee confirms occupancy legitimacy through police municipal report, exit when pdf includes authorized officer's disposition statement, rental properties require active contract registration in municipal archive.",
            "EA26": "change of residence another municipality, allow citizen to change residence to another municipality, citizen and employee. citizen presses change of residence button, system displays form, citizen enters new residence data, system confirms submission and stores request, employee accesses system and views request, employee verifies data completes document confirms operation, system saves form and updates data, employee sends document to other municipality's employee, other municipality's employee verifies document sends positive notification to original employee and citizen, handle service unavailable by invoking service unavailable use case, citizen must be authenticated in the system. new residence municipality name allows [a-z a-z ' àéèìòù .], non-empty. address allows [a-z a-z ' àéèìòù , .], non-empty. civic number allows [0-9 a-z], max 4 characters. phone prefix numeric 2-5 digits. phone number numeric 5-8 digits. family member surname/name allows [a-z a-z ' àéèìòù], max 30 chars non-empty. family member birth place allows [a-z a-z ' àéèìòù .], non-empty. birth date valid format dd/mm/yyyy. external requester card code format xxnnnnnnn (x=letter, n=number), 9 chars.",
            "score": 0.835888671875,
            "correct": false
        },
        {
            "ServletInserisciAmministratore": "- register administrator, allow administrator to register new administrator accounts, administrator. administrator accesses registration form, system displays input fields for personal and access data, administrator enters details and submits, system validates and creates account, exit conditions include account creation success or failure due to existing login/matricola or invalid data, administrator must have registration privileges. surname must be [a-za-zàèéìòù] 1-30 characters, name same as surname, email valid format, matricola unique numeric code, login unique [a-za-z0-9._-] under 30 characters, password [a-za-z0-9._-*+!?,:;àèéìòù] 8-15 characters.  \n- incorrect data, handle invalid administrator registration inputs by displaying error, administrator. system shows error message for invalid/missing fields, administrator reviews data, system redisplays form with validation hints, exit when corrected submission occurs, extends registration use case for data correction.",
            "EA7": "insert employee, allow administrator to register a new employee, administrator. administrator accesses system via admin terminal, initiates registration, system displays form, administrator enters employee data and submits, system checks for existing employee id, generates password, saves data, confirms registration with password, handle existing id with incorrect data use case or service unavailable via service unavailable use case. administrator must be authenticated. name allows [a-z a-z ' accents], <31 chars, non-empty. surname same as name. email format x@x.x, <31 chars. employee id numeric, 6 chars. username unique, [a-z a-z 0-9 .-_], <31, non-empty. password [a-z a-z 0-9 .-_*+!?,:; accents], 8-15 chars. confirm password matches.",
            "score": 0.835205078125,
            "correct": false
        },
        {
            "DbCambioResidenza": "- update residence, allow citizen to change residence address within the same municipality, citizen. citizen submits new address details, system updates identity card with new address, citizen must have valid identity card, exit conditions include system updating address or invalid identity card number invoking incorrect data use case, new address must include valid street name and civic number.  \n- delete identity card, allow system to delete identity card when citizen changes residence to external municipality, administrator. system detects external municipality change, system deletes citizen's identity card, exit conditions include identity card deletion or service unavailable invoking service unavailable use case, citizen must have valid identity card registered in the system.  \n- modify residence data, allow system to update residence information in identity card, employee. employee accesses residence modification function, system retrieves identity card data, employee enters new residence details and confirms, system updates identity card, exit conditions include data updated or invalid input invoking incorrect data use case, new residence must have valid street name and numeric civic number.",
            "EA26": "change of residence another municipality, allow citizen to change residence to another municipality, citizen and employee. citizen presses change of residence button, system displays form, citizen enters new residence data, system confirms submission and stores request, employee accesses system and views request, employee verifies data completes document confirms operation, system saves form and updates data, employee sends document to other municipality's employee, other municipality's employee verifies document sends positive notification to original employee and citizen, handle service unavailable by invoking service unavailable use case, citizen must be authenticated in the system. new residence municipality name allows [a-z a-z ' àéèìòù .], non-empty. address allows [a-z a-z ' àéèìòù , .], non-empty. civic number allows [0-9 a-z], max 4 characters. phone prefix numeric 2-5 digits. phone number numeric 5-8 digits. family member surname/name allows [a-z a-z ' àéèìòù], max 30 chars non-empty. family member birth place allows [a-z a-z ' àéèìòù .], non-empty. birth date valid format dd/mm/yyyy. external requester card code format xxnnnnnnn (x=letter, n=number), 9 chars.",
            "score": 0.833984375,
            "correct": false
        },
        {
            "ServletEliminaImpiegato": "- delete employee, allow administrator to remove an employee from the system, administrator. administrator enters employee identification number, system verifies employee existence, administrator confirms deletion request, system removes employee record and associated access credentials, administrator must be authenticated in the system, exit conditions include successful deletion or invalid employee id invoking incorrect data use case. employee identification number must exist in system records.",
            "EA72": "delete information, allows employee to delete a news item, employee. employee requests news deletion, system displays existing news list, employee selects news, system shows confirmation form, employee confirms via form, system processes form and deletes news data, exit conditions include system completing deletion or invoking service unavailable use case on error, employee must be authenticated.",
            "score": 0.82822265625,
            "correct": false
        },
        {
            "ServletModificaImpiegato": "- modify employee personal information, allow administrator to update employee's personal details, administrator. administrator accesses employee modification form, system displays employee search by id, administrator enters valid employee id and submits, system retrieves employee data and displays edit form, administrator modifies details (name, surname, email) and confirms, system saves updated information, administrator must be authenticated, exit conditions include successful update or error if invalid employee id.  \n- update employee access credentials, allow administrator to change employee's login credentials, administrator. administrator selects employee via valid id search, system displays current login/password fields, administrator enters new credentials and confirms, system verifies format and updates records, exit when credentials modified or error if password violates length/special character rules.  \n- employee search by id, enable administrator to locate employee records, administrator. administrator initiates employee modification process, system requires valid employee id input, administrator enters id and submits search, system verifies id existence and retrieves data, invalid id triggers error notification.  \n- handle modification errors, manage database exceptions during employee updates, administrator. system detects database errors during save operation, displays service unavailable message, administrator returns to employee management dashboard, extends modification use cases with error recovery path.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.8279296875000001,
            "correct": false
        },
        {
            "ServletModificaCittadino": "- modify citizen data, allow employee to update citizen's personal information, employee. employee accesses citizen modification form, system displays current citizen data, employee enters new details (name, surname, email), system validates and updates records, employee must authenticate and have valid citizen identity card code, exit conditions include successful update or error if identity code invalid or database error.\n- change family unit, allow employee to modify citizen's family unit membership, employee. employee selects new family unit for citizen, system checks unit existence and updates member count, system assigns citizen to selected unit, employee must ensure new family unit exists and citizen is not current family head with multiple members, exit on successful reassignment or error if unit invalid.\n- update family head, allow employee to designate new family head when current head changes unit, employee. employee enters new head's identity card code, system verifies code exists and updates family unit head, previous head's unit member count decreases, new unit count increases, exit on success or error if new head's identity code invalid.",
            "EA27": "change of family status, allow citizen to request a change in family status continued by employee, citizen employee. citizen presses change family status button, system displays form, citizen enters new family unit data and submits request, system sends request to competent employee, system creates document for competent office or handle service unavailable by invoking service unavailable use case, citizen must be authenticated in the system.",
            "score": 0.8230468750000001,
            "correct": false
        },
        {
            "ServletEliminaAmministratore": "- delete administrator, allow administrator to remove another administrator from the system, administrator. administrator accesses deletion form, system displays administrator search by employee id, administrator enters id and submits request, system verifies existence and checks if target is not the last administrator, system removes administrator and associated access, exit conditions include successful deletion, last administrator constraint invoking system constraints use case, or service unavailable invoking service unavailable use case, administrator must have proper privileges.  \n- system constraints, prevent deletion of last administrator to maintain system operability, administrator. system checks current administrator count during deletion attempt, detects single remaining administrator, blocks deletion process, displays error message, exit when deletion is aborted, extends delete administrator use case to enforce minimum administrator requirement.  \n- incorrect data, handle invalid employee id input during administrator deletion, administrator. system validates employee id format, detects invalid characters or missing data, displays error message, redisplays search form, exit when form is redisplayed, extends delete administrator use case to handle input errors.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.8218749999999999,
            "correct": false
        },
        {
            "ServletMostraAccessoA": "- view access information, allow citizen to view their access information, citizen. citizen accesses system, system retrieves access details from database, system displays access information on user interface, exit when citizen views data or error occurs, citizen must be authenticated in the system.",
            "EA137": "consult online help, allow citizen to access online help information, citizen. citizen enters online help section, system displays functionality list, citizen clicks relevant link, system presents help information explaining procedures and actions, citizen must be authenticated in the system, exit when citizen accesses specific functionality information.",
            "score": 0.819873046875,
            "correct": false
        },
        {
            "ServletEliminaImpiegato": "- delete employee, allow administrator to remove an employee from the system, administrator. administrator enters employee identification number, system verifies employee existence, administrator confirms deletion request, system removes employee record and associated access credentials, administrator must be authenticated in the system, exit conditions include successful deletion or invalid employee id invoking incorrect data use case. employee identification number must exist in system records.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.81923828125,
            "correct": false
        },
        {
            "ServletRegistraCittadino": "- citizen registration, allow citizen to register into the system, citizen. citizen accesses registration form, system displays data entry fields (name, surname, email, identity card number, tax code, login, password), citizen submits form, system checks identity card existence and login availability, system validates data consistency with existing records, system confirms registration, exit conditions include successful registration or error due to existing login or invalid identity card, identity card number must exist in system, login must be unique with [a-za-z0-9._-] characters under 30 length, personal data must match identity card records.\n- identity card validation, verify citizen's identity document during registration, citizen. system checks identity card number against municipal database, system confirms document validity, exit when validation succeeds or fails, extends citizen registration use case, identity card number must be registered in municipality database.\n- login uniqueness check, ensure citizen's login credentials are unique, citizen. system verifies login availability during registration, system blocks duplicate logins, exit when login availability confirmed or denied, extends citizen registration use case, login must not exist in system before registration.\n- personal data consistency, validate citizen's input against official records, citizen. system compares entered name/surname/tax code with identity card database, system rejects mismatched information, exit when data matches or shows inconsistency error, extends citizen registration use case, tax code must correspond to identity card holder's data.",
            "EA2": "authenticate citizen, allow citizen to log in handling incorrect data and service unavailability, citizen. citizen accesses authentication session, system displays login form, citizen enters credentials and submits, system verifies and grants access, handle incorrect data by invoking incorrect data use case, handle service unavailable by invoking service unavailable use case, username must exist in system with [a-za-z0-9.-_] characters and length <30, password must exist in system with [a-za-z0-9.-_*+!?,:;àèéìòù] characters and length 8-15.",
            "score": 0.8187500000000001,
            "correct": false
        }
    ],
    "fn": [
        {
            "DbNucleoFamiliare": "- create family unit, allow employee to register a new family unit in the system, employee. employee initiates family unit registration, system displays entry form for head member id and notes, employee submits data, system stores new family unit, exit conditions include successful registration or error handling for invalid head id, family head must exist in system and have valid citizen id.  \n- delete family unit, allow employee to remove family unit records, employee. employee selects target family unit id, system verifies existence, employee confirms deletion, system removes family unit data, exit when deletion completes or invalid id invokes error case, family unit must exist and have no active linked services.  \n- view family status, allow citizen or employee to display family member details, employee/citizen. user requests family status via id, system retrieves and lists all members with personal data, exit conditions include displaying member list or handling non-existent family unit error.  \n- verify family unit existence, ensure family unit id validity before operations, employee. system checks database for id presence during processes like deletion/modification, returns confirmation status, extends other use cases to prevent invalid id usage.  \n- update family head, allow employee to modify family unit leadership, employee. employee accesses family unit management, selects new head member id, system validates new head's citizenship status, updates database records, exit conditions include successful update or error for invalid member id.  \n- modify family member count, allow employee to adjust registered family size, employee. employee enters new component number for specific family unit, system validates number consistency with actual members, updates database, exit when count matches registered members or triggers inconsistency error.  \n- retrieve family unit notes, enable employee to access administrative annotations, employee. employee selects family unit id, system displays stored notes field, allows note review for case management, requires valid family unit id.",
            "EA4": "delete citizen, allows employee to delete a citizen, employee. employee presses delete citizen button, system requests confirmation, employee confirms operation, system deletes citizen. employee must be authenticated in the system, includes search citizen use case when employee wants to delete citizen. exit conditions: employee does not confirm operation, system deletes citizen, or invokes service unavailable use case if service is unavailable.",
            "score": 0.706689453125,
            "correct": true
        },
        {
            "CIManager": "- retrieve identity card by number, allow employee to retrieve citizen's identity card details using card number, employee. employee accesses identity card retrieval function, system prompts for card number input, employee enters number and submits request, system displays identity card data, employee must have system access, exit conditions include system displaying data or invoking invalid data use case if card not found, card number must exist in system and be valid.  \n- retrieve identity card by citizen id, allow employee to retrieve identity card details by citizen identifier, employee. employee selects citizen identifier, system retrieves associated identity card information, employee views identity card data, exit conditions include system displaying data or invoking invalid data use case if citizen id not found, citizen must have valid identity card registered in system.  \n- incorrect data, handle incorrect input exceptions by redisplaying form, citizen. system displays error message indicating incorrect request, citizen reads notification message, system redisplays input form, exit when form is redisplayed, extends other use cases to handle input error failures.",
            "EA26": "change of residence another municipality, allow citizen to change residence to another municipality, citizen and employee. citizen presses change of residence button, system displays form, citizen enters new residence data, system confirms submission and stores request, employee accesses system and views request, employee verifies data completes document confirms operation, system saves form and updates data, employee sends document to other municipality's employee, other municipality's employee verifies document sends positive notification to original employee and citizen, handle service unavailable by invoking service unavailable use case, citizen must be authenticated in the system. new residence municipality name allows [a-z a-z ' àéèìòù .], non-empty. address allows [a-z a-z ' àéèìòù , .], non-empty. civic number allows [0-9 a-z], max 4 characters. phone prefix numeric 2-5 digits. phone number numeric 5-8 digits. family member surname/name allows [a-z a-z ' àéèìòù], max 30 chars non-empty. family member birth place allows [a-z a-z ' àéèìòù .], non-empty. birth date valid format dd/mm/yyyy. external requester card code format xxnnnnnnn (x=letter, n=number), 9 chars.",
            "score": 0.705810546875,
            "correct": true
        },
        {
            "AdminManager": "- modify administrator data, allow administrator to update administrator details, administrator. administrator accesses administrator modification form, system displays data entry fields, administrator enters new details and submits, system updates administrator record, administrator must have system access, exit conditions include successful update or error if administrator is only remaining, administrator cannot delete last existing administrator.\n- search administrator, allow administrator to find administrator by name, administrator. administrator accesses search function, system displays name entry fields, administrator enters name and submits, system displays matching administrators, exit when results are displayed or none found, administrator must be authenticated in system.\n- insert administrator, allow administrator to add new administrator, administrator. administrator accesses insertion form, system displays data entry fields, administrator enters required data and submits, system saves new administrator, exit conditions include successful insertion or error if data invalid, new administrator must have unique matricola and login.\n- delete administrator, allow administrator to remove administrator, administrator. administrator selects administrator to delete and confirms, system removes administrator record, exit conditions include successful deletion or error if last administrator, system must retain at least one administrator.",
            "EA8": "logout administrator, allow administrator to end their session, administrator. administrator clicks logout button, system logs out and returns to main screen, administrator must be authenticated in the system.",
            "score": 0.7040039062500001,
            "correct": true
        },
        {
            "AccessManager": "- register user access, allow administrator to create new system user, administrator. administrator navigates to user registration form, enters login, password, and type, system validates login uniqueness and creates access, exit conditions include access created or duplicate login error, login must be unique and conform to [a-za-z0-9._-] characters under 30 length.  \n- modify user access, allow administrator to update user credentials, administrator. administrator selects user from list, modifies login/password/type fields, system validates new data and updates access record, exit conditions include access modified or invalid format error, new login must follow [a-za-z0-9._-] format.  \n- delete user access, allow administrator to remove user from system, administrator. administrator selects target user, confirms deletion action, system deletes access record, exit conditions include access removed or dependency conflict error preventing deletion.  \n- check login existence, validate login uniqueness during registration, administrator. system verifies proposed login against existing records during user creation, administrator receives availability status, exit condition is unique login confirmed or duplicate error triggered.  \n- retrieve access details, allow administrator to view user access information, administrator. administrator searches user by login, system displays associated access type and credentials, exit condition is details shown or invalid login error.  \n- list all accesses, enable administrator to view registered system users, administrator. administrator requests full access list, system retrieves and displays all logins with types, exit condition is list displayed or empty database message.  \n- verify credentials, authenticate users during login process, user. system compares input login/password with stored access records, grants session upon match, exit conditions include successful login or invalid credentials error.",
            "EA17": "modify citizen password, allow citizen to modify their password, citizen. citizen presses modify password button, system displays form for entering old and new password, citizen enters old and new password and confirms, system notifies password modified, citizen must be authenticated in the system, exit conditions include password modified, invalid data use case invoked if password under 8 characters or old password incorrect, service unavailable use case invoked if service down, password must be 8-15 characters from [a-za-z0-9.-_*+!?,:;àèéòù], new password cannot match old.",
            "score": 0.7033203125,
            "correct": true
        },
        {
            "AccessManager": "- register user access, allow administrator to create new system user, administrator. administrator navigates to user registration form, enters login, password, and type, system validates login uniqueness and creates access, exit conditions include access created or duplicate login error, login must be unique and conform to [a-za-z0-9._-] characters under 30 length.  \n- modify user access, allow administrator to update user credentials, administrator. administrator selects user from list, modifies login/password/type fields, system validates new data and updates access record, exit conditions include access modified or invalid format error, new login must follow [a-za-z0-9._-] format.  \n- delete user access, allow administrator to remove user from system, administrator. administrator selects target user, confirms deletion action, system deletes access record, exit conditions include access removed or dependency conflict error preventing deletion.  \n- check login existence, validate login uniqueness during registration, administrator. system verifies proposed login against existing records during user creation, administrator receives availability status, exit condition is unique login confirmed or duplicate error triggered.  \n- retrieve access details, allow administrator to view user access information, administrator. administrator searches user by login, system displays associated access type and credentials, exit condition is details shown or invalid login error.  \n- list all accesses, enable administrator to view registered system users, administrator. administrator requests full access list, system retrieves and displays all logins with types, exit condition is list displayed or empty database message.  \n- verify credentials, authenticate users during login process, user. system compares input login/password with stored access records, grants session upon match, exit conditions include successful login or invalid credentials error.",
            "EA11": "modify citizen, allow employee to modify a citizen's information, employee. employee presses modify citizen button, system displays edit form, employee enters data, system saves changes, handle service unavailable by invoking service unavailable use case, system modifies citizen or service unavailable as exit conditions, employee must be authenticated in the system and use case includes search citizen when modifying.",
            "score": 0.70146484375,
            "correct": true
        },
        {
            "Accesso": "- register citizen access, allow citizen to create system access credentials, citizen. citizen accesses registration form, system displays login, password, and type fields, citizen enters data and submits, system stores credentials with type 'cittadino', citizen must provide unique login and valid password format, exit conditions include successful registration or duplicate login error.  \n- register employee access, allow administrator to create employee system access, administrator. administrator accesses employee registration interface, enters employee login, password, and sets type 'impiegato', system validates and stores credentials, administrator must have valid privileges, login must follow [a-za-z0-9._-] format under 30 characters.  \n- register administrator access, allow system to initialize administrator credentials, administrator. system administrator accesses privileged registration module, inputs login, password, and assigns type 'amministratore', system encrypts and stores credentials, requires unique login matching [a-za-z0-9._-] pattern under 30 characters.",
            "EA13": "modify citizen email, allow citizen to modify their email, citizen. citizen accesses email modification form, system displays form for new email entry, citizen enters new email and presses confirm button, system updates email, system saves new email or detects error invoking invalid data use case or handles service unavailable via service unavailable use case, citizen must be authenticated in the system.",
            "score": 0.70126953125,
            "correct": true
        },
        {
            "AccessManager": "- register user access, allow administrator to create new system user, administrator. administrator navigates to user registration form, enters login, password, and type, system validates login uniqueness and creates access, exit conditions include access created or duplicate login error, login must be unique and conform to [a-za-z0-9._-] characters under 30 length.  \n- modify user access, allow administrator to update user credentials, administrator. administrator selects user from list, modifies login/password/type fields, system validates new data and updates access record, exit conditions include access modified or invalid format error, new login must follow [a-za-z0-9._-] format.  \n- delete user access, allow administrator to remove user from system, administrator. administrator selects target user, confirms deletion action, system deletes access record, exit conditions include access removed or dependency conflict error preventing deletion.  \n- check login existence, validate login uniqueness during registration, administrator. system verifies proposed login against existing records during user creation, administrator receives availability status, exit condition is unique login confirmed or duplicate error triggered.  \n- retrieve access details, allow administrator to view user access information, administrator. administrator searches user by login, system displays associated access type and credentials, exit condition is details shown or invalid login error.  \n- list all accesses, enable administrator to view registered system users, administrator. administrator requests full access list, system retrieves and displays all logins with types, exit condition is list displayed or empty database message.  \n- verify credentials, authenticate users during login process, user. system compares input login/password with stored access records, grants session upon match, exit conditions include successful login or invalid credentials error.",
            "EA4": "delete citizen, allows employee to delete a citizen, employee. employee presses delete citizen button, system requests confirmation, employee confirms operation, system deletes citizen. employee must be authenticated in the system, includes search citizen use case when employee wants to delete citizen. exit conditions: employee does not confirm operation, system deletes citizen, or invokes service unavailable use case if service is unavailable.",
            "score": 0.700048828125,
            "correct": true
        },
        {
            "DbAccesso": "- register access, allow administrator to create new system access credentials, administrator. administrator navigates to access registration, system displays form, administrator enters login, password, and user type, system checks login uniqueness and saves credentials, exit conditions include access created or existing login error, login must be unique and follow [a-za-z0-9._-] format with maximum 30 characters, password must comply with [a-za-z0-9._-*+!?,:;àèéìòù] format between 8-15 characters.  \n- delete access, allow administrator to remove user system access, administrator. administrator selects target user login, system confirms deletion request, administrator confirms action, system removes access credentials, exit conditions include access removed or service error, administrator must have valid permissions.  \n- verify credentials, authenticate user login attempts, citizen/employee/administrator. user enters login and password during authentication, system checks credentials against stored data, grants access if valid, exit conditions include successful login or invalid credentials error.  \n- check login existence, validate login uniqueness during registration, citizen/employee/administrator. user enters desired login, system verifies database for existing matches, returns availability status, exit conditions include unique login confirmation or duplicate error.  \n- modify access credentials, allow users to update login/password, citizen/employee/administrator. user navigates to profile settings, edits login/password fields, system validates new credentials and updates database, exit conditions include updated credentials or invalid format error, new login must be unique if changed.  \n- retrieve access details, allow administrators to view user access information, administrator. administrator searches target user login, system displays associated credentials and user type, exit conditions include data retrieval or invalid user error.  \n- list all accesses, enable administrators to view all registered system users, administrator. administrator requests full access list, system displays logins with types, exit conditions include complete list display or database error.",
            "EA8": "logout administrator, allow administrator to end their session, administrator. administrator clicks logout button, system logs out and returns to main screen, administrator must be authenticated in the system.",
            "score": 0.697998046875,
            "correct": true
        },
        {
            "DbNucleoFamiliare": "- create family unit, allow employee to register a new family unit in the system, employee. employee initiates family unit registration, system displays entry form for head member id and notes, employee submits data, system stores new family unit, exit conditions include successful registration or error handling for invalid head id, family head must exist in system and have valid citizen id.  \n- delete family unit, allow employee to remove family unit records, employee. employee selects target family unit id, system verifies existence, employee confirms deletion, system removes family unit data, exit when deletion completes or invalid id invokes error case, family unit must exist and have no active linked services.  \n- view family status, allow citizen or employee to display family member details, employee/citizen. user requests family status via id, system retrieves and lists all members with personal data, exit conditions include displaying member list or handling non-existent family unit error.  \n- verify family unit existence, ensure family unit id validity before operations, employee. system checks database for id presence during processes like deletion/modification, returns confirmation status, extends other use cases to prevent invalid id usage.  \n- update family head, allow employee to modify family unit leadership, employee. employee accesses family unit management, selects new head member id, system validates new head's citizenship status, updates database records, exit conditions include successful update or error for invalid member id.  \n- modify family member count, allow employee to adjust registered family size, employee. employee enters new component number for specific family unit, system validates number consistency with actual members, updates database, exit when count matches registered members or triggers inconsistency error.  \n- retrieve family unit notes, enable employee to access administrative annotations, employee. employee selects family unit id, system displays stored notes field, allows note review for case management, requires valid family unit id.",
            "EA11": "modify citizen, allow employee to modify a citizen's information, employee. employee presses modify citizen button, system displays edit form, employee enters data, system saves changes, handle service unavailable by invoking service unavailable use case, system modifies citizen or service unavailable as exit conditions, employee must be authenticated in the system and use case includes search citizen when modifying.",
            "score": 0.69755859375,
            "correct": true
        },
        {
            "ServletMostraAccesso": "- view access details, allow administrator and employee to view their access credentials, administrator and employee. user navigates to access details section, system retrieves stored login information from database, system displays login details on interface, user must have active authentication session, exit conditions include successful credential display or database error invoking service unavailable use case.",
            "EA8": "logout administrator, allow administrator to end their session, administrator. administrator clicks logout button, system logs out and returns to main screen, administrator must be authenticated in the system.",
            "score": 0.6941894531249999,
            "correct": true
        },
        {
            "DbNucleoFamiliare": "- create family unit, allow employee to register a new family unit in the system, employee. employee initiates family unit registration, system displays entry form for head member id and notes, employee submits data, system stores new family unit, exit conditions include successful registration or error handling for invalid head id, family head must exist in system and have valid citizen id.  \n- delete family unit, allow employee to remove family unit records, employee. employee selects target family unit id, system verifies existence, employee confirms deletion, system removes family unit data, exit when deletion completes or invalid id invokes error case, family unit must exist and have no active linked services.  \n- view family status, allow citizen or employee to display family member details, employee/citizen. user requests family status via id, system retrieves and lists all members with personal data, exit conditions include displaying member list or handling non-existent family unit error.  \n- verify family unit existence, ensure family unit id validity before operations, employee. system checks database for id presence during processes like deletion/modification, returns confirmation status, extends other use cases to prevent invalid id usage.  \n- update family head, allow employee to modify family unit leadership, employee. employee accesses family unit management, selects new head member id, system validates new head's citizenship status, updates database records, exit conditions include successful update or error for invalid member id.  \n- modify family member count, allow employee to adjust registered family size, employee. employee enters new component number for specific family unit, system validates number consistency with actual members, updates database, exit when count matches registered members or triggers inconsistency error.  \n- retrieve family unit notes, enable employee to access administrative annotations, employee. employee selects family unit id, system displays stored notes field, allows note review for case management, requires valid family unit id.",
            "EA25": "change of residence, allow citizen to request residence change and employee to process it, citizen and employee. press change residence button, system displays form, citizen enters new residence data, system confirms submission and stores request, employee accesses system to view request, verifies data, completes document, confirms operation, system saves form and updates data, handle service unavailable by invoking service unavailable use case. citizen must be authenticated. new residence municipality name allows [a-z a-z ' àéèìòù .], non-empty. address allows [a-z a-z ' àéèìòù , .], non-empty. civic number allows [0-9 a-z], max 4 chars. phone prefix numeric 2-5 digits. phone number numeric 5-8 digits. family member surname allows [a-z a-z ' àéèìòù], max 30 chars. family member name same as surname. family member birth place allows [a-z a-z ' àéèìòù .], non-empty. family member birth date valid dd/mm/yyyy (1-31,1-12,1900-now). external requester card code format xxnnnnnnn (9 chars).",
            "score": 0.6910156249999999,
            "correct": true
        },
        {
            "ServletRecuperoPassword": "- password recovery, allow citizen to reset password using identity card and login, citizen. citizen accesses recovery form, enters identity card number and login, system validates credentials, generates temporary password, sends email with new credentials, identity card number must be uppercase alphanumeric, login must exist and match citizen's records.  \n- handle invalid identity card or login, notify citizen of credential mismatch, citizen. system verifies identity card and login combination, displays error message if invalid, redirects to failure page, identity card must be registered and linked to citizen's account.  \n- temporary password generation, system creates random password upon valid recovery request, citizen. system generates 8-character alphanumeric password, triggers email delivery, password must include uppercase letters and digits.",
            "EA16": "modify administrator password, allow administrator to change their password, administrator. administrator presses password modification button, system displays old password entry form, administrator enters old and new password then confirms, system notifies password changed, exit conditions include password modified or invalid data case invoked if password under 8 characters or incorrect old password or service unavailable case called, administrator must be authenticated in the system.",
            "score": 0.689404296875,
            "correct": true
        },
        {
            "DbNucleoFamiliare": "- create family unit, allow employee to register a new family unit in the system, employee. employee initiates family unit registration, system displays entry form for head member id and notes, employee submits data, system stores new family unit, exit conditions include successful registration or error handling for invalid head id, family head must exist in system and have valid citizen id.  \n- delete family unit, allow employee to remove family unit records, employee. employee selects target family unit id, system verifies existence, employee confirms deletion, system removes family unit data, exit when deletion completes or invalid id invokes error case, family unit must exist and have no active linked services.  \n- view family status, allow citizen or employee to display family member details, employee/citizen. user requests family status via id, system retrieves and lists all members with personal data, exit conditions include displaying member list or handling non-existent family unit error.  \n- verify family unit existence, ensure family unit id validity before operations, employee. system checks database for id presence during processes like deletion/modification, returns confirmation status, extends other use cases to prevent invalid id usage.  \n- update family head, allow employee to modify family unit leadership, employee. employee accesses family unit management, selects new head member id, system validates new head's citizenship status, updates database records, exit conditions include successful update or error for invalid member id.  \n- modify family member count, allow employee to adjust registered family size, employee. employee enters new component number for specific family unit, system validates number consistency with actual members, updates database, exit when count matches registered members or triggers inconsistency error.  \n- retrieve family unit notes, enable employee to access administrative annotations, employee. employee selects family unit id, system displays stored notes field, allows note review for case management, requires valid family unit id.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.6822265625,
            "correct": true
        },
        {
            "CittadinoManager": "- register citizen, allow citizen to register in the system, citizen. citizen accesses registration form, system displays input fields for personal data, citizen enters details and submits, system saves citizen information, exit conditions include successful registration or invalid data invoking error handling, login must be unique and follow [a-za-z0-9.-_] format, email must be valid format.  \n- modify citizen login, allow citizen to update their login credentials, citizen. citizen accesses profile settings, system displays login modification form, citizen enters new login and confirms, system updates login information, citizen must exist in the system, exit includes successful update or error if login already exists.  \n- modify citizen email, allow citizen to change their email address, citizen. citizen navigates to email settings, system displays email update form, citizen enters new email and submits, system validates and saves new email, exit when email updated or invalid format error occurs.  \n- search citizen, allow employee to find citizens by name and surname, employee. employee enters search criteria (name and/or surname), system retrieves matching citizens, employee views results list, exit when results displayed or no matches found.  \n- delete citizen record, allow administrator to remove citizen from system, administrator. administrator selects citizen record, confirms deletion request, system permanently removes citizen data, citizen must exist in the system prior to deletion.  \n- update family unit, allow employee to modify citizen's family unit association, employee. employee selects citizen and new family unit, system updates family unit linkage, exit when association changed or invalid unit error occurs.  \n- modify citizen name, allow citizen to update their legal name, citizen. citizen accesses name change form, enters new name and submits, system validates and updates record, name must contain only [a-zàèéìòù] characters with 1-30 length.  \n- modify citizen surname, allow citizen to update their legal surname, citizen. citizen accesses surname modification form, enters new surname and confirms, system validates and saves changes, surname follows same format constraints as name.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.679150390625,
            "correct": true
        },
        {
            "ServletRicercaCittadino": "- search citizen by name and surname, allow employee to find citizen records using name and surname, employee. employee accesses search form, system displays input fields for name and surname, employee enters data and submits search request, system retrieves matching citizen records, employee must have valid system access, exit conditions include system displaying matching results or no results message, name must be non-empty with [a-zàèéìòù'] characters, surname same as name.\n\n- search citizen by identity card code, allow employee to retrieve citizen data via identity card number, employee. employee inputs identity card code in search form, system queries database for matching code, system displays citizen details if found, employee must be authenticated, exit conditions include citizen details shown or error message if code not found, identity card code must exist in system and be valid format.\n\n- handle no search results, manage scenarios where citizen search yields no matches, employee. system displays no results message, employee reviews search criteria, system redisplays search form, exit when form is redisplayed, extends citizen search use cases to handle empty result sets.\n\n- session validation for citizen search, ensure employee session is active during search operations, employee. system checks session validity upon search request, redirects to login if session invalid, employee must have active session to perform searches, exit conditions include valid session proceeding to search or invalid session redirecting to login.",
            "EA21": "employee password recovery, allow employee to recover password, employee. employee forgets password and presses recovery button, system displays form for entering employee id, employee enters id and confirms, system verifies data and sends password to email, handle incorrect data by invoking incorrect data use case or service unavailable by invoking service unavailable use case, employee must be authenticated in the system.",
            "score": 0.675244140625,
            "correct": true
        },
        {
            "DbNucleoFamiliare": "- create family unit, allow employee to register a new family unit in the system, employee. employee initiates family unit registration, system displays entry form for head member id and notes, employee submits data, system stores new family unit, exit conditions include successful registration or error handling for invalid head id, family head must exist in system and have valid citizen id.  \n- delete family unit, allow employee to remove family unit records, employee. employee selects target family unit id, system verifies existence, employee confirms deletion, system removes family unit data, exit when deletion completes or invalid id invokes error case, family unit must exist and have no active linked services.  \n- view family status, allow citizen or employee to display family member details, employee/citizen. user requests family status via id, system retrieves and lists all members with personal data, exit conditions include displaying member list or handling non-existent family unit error.  \n- verify family unit existence, ensure family unit id validity before operations, employee. system checks database for id presence during processes like deletion/modification, returns confirmation status, extends other use cases to prevent invalid id usage.  \n- update family head, allow employee to modify family unit leadership, employee. employee accesses family unit management, selects new head member id, system validates new head's citizenship status, updates database records, exit conditions include successful update or error for invalid member id.  \n- modify family member count, allow employee to adjust registered family size, employee. employee enters new component number for specific family unit, system validates number consistency with actual members, updates database, exit when count matches registered members or triggers inconsistency error.  \n- retrieve family unit notes, enable employee to access administrative annotations, employee. employee selects family unit id, system displays stored notes field, allows note review for case management, requires valid family unit id.",
            "EA26": "change of residence another municipality, allow citizen to change residence to another municipality, citizen and employee. citizen presses change of residence button, system displays form, citizen enters new residence data, system confirms submission and stores request, employee accesses system and views request, employee verifies data completes document confirms operation, system saves form and updates data, employee sends document to other municipality's employee, other municipality's employee verifies document sends positive notification to original employee and citizen, handle service unavailable by invoking service unavailable use case, citizen must be authenticated in the system. new residence municipality name allows [a-z a-z ' àéèìòù .], non-empty. address allows [a-z a-z ' àéèìòù , .], non-empty. civic number allows [0-9 a-z], max 4 characters. phone prefix numeric 2-5 digits. phone number numeric 5-8 digits. family member surname/name allows [a-z a-z ' àéèìòù], max 30 chars non-empty. family member birth place allows [a-z a-z ' àéèìòù .], non-empty. birth date valid format dd/mm/yyyy. external requester card code format xxnnnnnnn (x=letter, n=number), 9 chars.",
            "score": 0.6701171875,
            "correct": true
        },
        {
            "AdminManager": "- modify administrator data, allow administrator to update administrator details, administrator. administrator accesses administrator modification form, system displays data entry fields, administrator enters new details and submits, system updates administrator record, administrator must have system access, exit conditions include successful update or error if administrator is only remaining, administrator cannot delete last existing administrator.\n- search administrator, allow administrator to find administrator by name, administrator. administrator accesses search function, system displays name entry fields, administrator enters name and submits, system displays matching administrators, exit when results are displayed or none found, administrator must be authenticated in system.\n- insert administrator, allow administrator to add new administrator, administrator. administrator accesses insertion form, system displays data entry fields, administrator enters required data and submits, system saves new administrator, exit conditions include successful insertion or error if data invalid, new administrator must have unique matricola and login.\n- delete administrator, allow administrator to remove administrator, administrator. administrator selects administrator to delete and confirms, system removes administrator record, exit conditions include successful deletion or error if last administrator, system must retain at least one administrator.",
            "EA13": "modify citizen email, allow citizen to modify their email, citizen. citizen accesses email modification form, system displays form for new email entry, citizen enters new email and presses confirm button, system updates email, system saves new email or detects error invoking invalid data use case or handles service unavailable via service unavailable use case, citizen must be authenticated in the system.",
            "score": 0.6685546875,
            "correct": true
        },
        {
            "ServletMostraAccesso": "- view access details, allow administrator and employee to view their access credentials, administrator and employee. user navigates to access details section, system retrieves stored login information from database, system displays login details on interface, user must have active authentication session, exit conditions include successful credential display or database error invoking service unavailable use case.",
            "EA10": "employee logout, allow employee to end work session, employee. employee clicks logout button, system disconnects and returns to main screen, employee must be authenticated in the system.",
            "score": 0.6677734375,
            "correct": true
        },
        {
            "AccessManager": "- register user access, allow administrator to create new system user, administrator. administrator navigates to user registration form, enters login, password, and type, system validates login uniqueness and creates access, exit conditions include access created or duplicate login error, login must be unique and conform to [a-za-z0-9._-] characters under 30 length.  \n- modify user access, allow administrator to update user credentials, administrator. administrator selects user from list, modifies login/password/type fields, system validates new data and updates access record, exit conditions include access modified or invalid format error, new login must follow [a-za-z0-9._-] format.  \n- delete user access, allow administrator to remove user from system, administrator. administrator selects target user, confirms deletion action, system deletes access record, exit conditions include access removed or dependency conflict error preventing deletion.  \n- check login existence, validate login uniqueness during registration, administrator. system verifies proposed login against existing records during user creation, administrator receives availability status, exit condition is unique login confirmed or duplicate error triggered.  \n- retrieve access details, allow administrator to view user access information, administrator. administrator searches user by login, system displays associated access type and credentials, exit condition is details shown or invalid login error.  \n- list all accesses, enable administrator to view registered system users, administrator. administrator requests full access list, system retrieves and displays all logins with types, exit condition is list displayed or empty database message.  \n- verify credentials, authenticate users during login process, user. system compares input login/password with stored access records, grants session upon match, exit conditions include successful login or invalid credentials error.",
            "EA21": "employee password recovery, allow employee to recover password, employee. employee forgets password and presses recovery button, system displays form for entering employee id, employee enters id and confirms, system verifies data and sends password to email, handle incorrect data by invoking incorrect data use case or service unavailable by invoking service unavailable use case, employee must be authenticated in the system.",
            "score": 0.665869140625,
            "correct": true
        },
        {
            "ServletCreaPdfCertificati": "- generate certificate, allow citizen to generate a certificate pdf with entered data, citizen. citizen submits certificate request form, system validates input data, generates pdf with citizen's declaration and current date, system displays pdf for download, exit conditions include successful pdf generation or document exception invoking service unavailable use case, surname must contain [a-z, àéèìòù, '] uppercase with length 1-30, name same as surname, birth place same characters, birth province uppercase 1-30 characters, birth date in valid dd/mm/yyyy format, residence same characters as birth place, province same as birth province, address uppercase with [a-z, àéèìòù, ', .] 1-30 characters, declaration text uppercase 1-100 characters.  \n- incorrect data, handle incorrect input exceptions by redisplaying form, citizen. system displays error message indicating invalid data entry, citizen reviews error, system redisplays certificate request form, exit when form is redisplayed, extends certificate generation to handle input validation failures.",
            "EA138": "incorrect data, handle incorrect input exceptions by redisplaying form, citizen. system displays error message indicating incorrect request, citizen reads notification message, system redisplays input form, exit when form is redisplayed, extends other use cases to handle input error failures.",
            "score": 0.663623046875,
            "correct": true
        }
    ]
}