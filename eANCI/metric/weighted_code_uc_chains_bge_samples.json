{
    "fp": [
        {
            "ServletRegistraCittadino": "- citizen registration, allow citizen to register into the system, citizen. citizen accesses registration form, system displays data entry fields (name, surname, email, identity card number, tax code, login, password), citizen submits form, system checks identity card existence and login availability, system validates data consistency with existing records, system confirms registration, exit conditions include successful registration or error due to existing login or invalid identity card, identity card number must exist in system, login must be unique with [a-za-z0-9._-] characters under 30 length, personal data must match identity card records.\n- identity card validation, verify citizen's identity document during registration, citizen. system checks identity card number against municipal database, system confirms document validity, exit when validation succeeds or fails, extends citizen registration use case, identity card number must be registered in municipality database.\n- login uniqueness check, ensure citizen's login credentials are unique, citizen. system verifies login availability during registration, system blocks duplicate logins, exit when login availability confirmed or denied, extends citizen registration use case, login must not exist in system before registration.\n- personal data consistency, validate citizen's input against official records, citizen. system compares entered name/surname/tax code with identity card database, system rejects mismatched information, exit when data matches or shows inconsistency error, extends citizen registration use case, tax code must correspond to identity card holder's data.",
            "EA22": "register citizen, allow citizen to register in the system, citizen. citizen accesses registration form, system displays registration form, citizen enters data and confirms, system verifies data correctness, saves data and sends registration email to citizen, entry condition: citizen has accessed the system, exit conditions: system registers citizen or invalid data invoking invalid data use case or service unavailable invoking service unavailable use case, quality requirements: name string matches identity card holder's name with [a-za-z'àéèìòù], length <30, not empty, surname string matches identity card holder's surname with [a-za-z'àéèìòù], length <30, not empty, fiscal code string complies with regulations and 16 characters, identity card string exists in system as xxnnnnnnn format (9 characters), email string follows x@x.x format, length <31, not empty, username not existing in system, contains [a-za-z0-9.-_], length <30, not empty, password contains [a-za-z0-9.-_*+!?,:;àèéìòù], length 8-15.",
            "score": 0.91708984375,
            "correct": false
        },
        {
            "ServletRegistraCittadino": "- citizen registration, allow citizen to register into the system, citizen. citizen accesses registration form, system displays data entry fields (name, surname, email, identity card number, tax code, login, password), citizen submits form, system checks identity card existence and login availability, system validates data consistency with existing records, system confirms registration, exit conditions include successful registration or error due to existing login or invalid identity card, identity card number must exist in system, login must be unique with [a-za-z0-9._-] characters under 30 length, personal data must match identity card records.\n- identity card validation, verify citizen's identity document during registration, citizen. system checks identity card number against municipal database, system confirms document validity, exit when validation succeeds or fails, extends citizen registration use case, identity card number must be registered in municipality database.\n- login uniqueness check, ensure citizen's login credentials are unique, citizen. system verifies login availability during registration, system blocks duplicate logins, exit when login availability confirmed or denied, extends citizen registration use case, login must not exist in system before registration.\n- personal data consistency, validate citizen's input against official records, citizen. system compares entered name/surname/tax code with identity card database, system rejects mismatched information, exit when data matches or shows inconsistency error, extends citizen registration use case, tax code must correspond to identity card holder's data.",
            "EA23": "register citizen, allow citizen to register in the system, citizen. citizen accesses registration form, system displays form, citizen enters data and confirms, system verifies data correctness, saves data and sends registration email, handle invalid data by invoking invalid data use case, handle service unavailable by invoking service unavailable use case, citizen must have system access. name string matches identity card holder, well-formed with [a-za-z'àéèìòù], length <30, not empty. surname string matches identity card holder, well-formed with [a-za-z'àéèìòù], length <30, not empty. fiscal code string complies with regulations, 16 characters. identity card string exists in system, format xxnnnnnnn, 9 characters. email string format x@x.x, length <31, not empty. username string unique, well-formed with [a-za-z0-9.-_], length <30, not empty. password string well-formed with [a-za-z0-9.-_*+!?,:;àèéìòù], length 8-15.",
            "score": 0.908935546875,
            "correct": false
        },
        {
            "CIManager": "- retrieve identity card by number, allow employee to retrieve citizen's identity card details using card number, employee. employee accesses identity card retrieval function, system prompts for card number input, employee enters number and submits request, system displays identity card data, employee must have system access, exit conditions include system displaying data or invoking invalid data use case if card not found, card number must exist in system and be valid.  \n- retrieve identity card by citizen id, allow employee to retrieve identity card details by citizen identifier, employee. employee selects citizen identifier, system retrieves associated identity card information, employee views identity card data, exit conditions include system displaying data or invoking invalid data use case if citizen id not found, citizen must have valid identity card registered in system.  \n- incorrect data, handle incorrect input exceptions by redisplaying form, citizen. system displays error message indicating incorrect request, citizen reads notification message, system redisplays input form, exit when form is redisplayed, extends other use cases to handle input error failures.",
            "EA139": "service unavailable, handle technical failure exceptions by displaying notification messages, citizen. system displays terminal message indicating request cannot be processed, citizen reads notification message, system redisplays input form, use case extends other cases to handle technical failure exceptions, exit when input form is redisplayed.",
            "score": 0.8853515625000001,
            "correct": false
        },
        {
            "ServletLogin": "- administrator authentication, allow administrator to authenticate into the system, administrator. administrator accesses system, system displays login form for credentials input, administrator enters data and submits authentication request, system verifies data and grants access with specified permissions, exit conditions include successful access or invalid credentials invoking invalid data use case or service unavailable invoking service unavailable use case, username must be present with [a-za-z0-9._-] characters under 30 length, password must be present with [a-za-z0-9._-*+!?,:;àèéìòù] characters between 8-15 length.\n- authenticate citizen, allow citizen to log in handling incorrect data and service unavailability, citizen. citizen accesses authentication session, system displays login form, citizen enters credentials and submits, system verifies and grants access, handle incorrect data by invoking incorrect data use case, handle service unavailable by invoking service unavailable use case, username must exist in system with [a-za-z0-9.-_] characters and length <30, password must exist in system with [a-za-z0-9.-_*+!?,:;àèéìòù] characters and length 8-15.\n- employee authentication, allow employee to authenticate into the system, employee. employee accesses authentication session, system displays login form for data entry, employee enters credentials and submits authentication request, system verifies data correctness and grants access, handle incorrect data by invoking incorrect data use case or service unavailable by invoking service unavailable use case, employee must have system access. username must exist, be well-formed with [a-za-z0-9 .-_], length under 30 characters, and not empty. password must exist, be well-formed with [a-za-z0-9.-_*+!?,:;àèéìòù], length between 8-15 characters.\n- incorrect data, handle incorrect input exceptions by redisplaying form, citizen. system displays error message indicating incorrect request, citizen reads notification message, system redisplays input form, exit when form is redisplayed, extends other use cases to handle input error failures.",
            "EA139": "service unavailable, handle technical failure exceptions by displaying notification messages, citizen. system displays terminal message indicating request cannot be processed, citizen reads notification message, system redisplays input form, use case extends other cases to handle technical failure exceptions, exit when input form is redisplayed.",
            "score": 0.8853515625000001,
            "correct": false
        },
        {
            "ServletRisposta": "- change of residence, allow citizen to declare residence change with family unit details, citizen. citizen accesses residence change form, system displays data entry fields for old and new address, family members, and occupancy status, citizen enters data and submits, system generates pdf declaration, citizen must be authenticated, exit conditions include system storing declaration as pending request, invoking incorrect data use case if mandatory fields missing or invalid dates, invoking service unavailable use case if pdf generation fails. surname must be [a-zàéèìòù'] uppercase, name same as surname, birth city same characters, birth date valid dd/mm/yyyy, new address same characters, new municipality same characters, family members require name, surname, birth details, occupancy status must be specified.\n- declare third party occupants, allow citizen to list occupants in new residence, citizen. citizen selects occupied residence option, system displays occupant entry form, citizen enters occupant names and relationships, system includes occupants in declaration, exit conditions include system saving occupant details or invoking incorrect data use case if occupant names invalid, citizen must declare occupancy status as occupied. occupant names must be [a-zàéèìòù'] uppercase, minimum 1 character, relationship must be specified.\n- incorrect data, handle incorrect input exceptions by redisplaying form, citizen. system displays error message indicating incorrect request, citizen reads notification message, system redisplays input form, exit when form is redisplayed, extends other use cases to handle input error failures.",
            "EA139": "service unavailable, handle technical failure exceptions by displaying notification messages, citizen. system displays terminal message indicating request cannot be processed, citizen reads notification message, system redisplays input form, use case extends other cases to handle technical failure exceptions, exit when input form is redisplayed.",
            "score": 0.8853515625000001,
            "correct": false
        },
        {
            "ServletRicercaImpiegato": "- search employee, allow administrator to search for employee data, administrator. administrator accesses employee search form, system displays search criteria input, administrator enters employee identifier (matricola), system retrieves employee data, administrator must have valid system access, exit conditions include system displaying employee details or invoking employee not found error if identifier invalid or service unavailable use case if database error occurs, employee identifier must exist and follow valid format.\n- employee not found error, handle invalid employee identifier during search, administrator. system displays error message indicating no employee found, administrator reviews error notification, system returns to search form, exit when error message displayed, extends employee search use case when invalid identifier provided.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.883642578125,
            "correct": false
        },
        {
            "ImpiegatoManager": "- modify employee data, allow administrator to update employee information, administrator. administrator selects employee by employee id, system displays current data, administrator edits data fields and confirms changes, system updates employee record, employee id must exist in system.  \n- search employee by id, allow administrator to retrieve employee details via unique identifier, administrator. administrator enters employee id in search form, system displays employee information, employee must be registered in system.  \n- insert employee, allow administrator to register new employee into system, administrator. administrator navigates to employee creation form, enters employee details (name, surname, id), submits data, system stores new employee record, employee id must be unique.  \n- delete employee, allow administrator to remove employee from system, administrator. administrator selects employee by id, confirms deletion request, system removes employee record, employee must exist in system.  \n- search employees by name, allow administrator to find employees via name criteria, administrator. administrator inputs employee name and surname, system returns matching employee records, at least one search parameter must be provided.  \n- list employees, allow administrator to view all registered employees, administrator. administrator accesses employee directory, system displays complete employee list sorted alphabetically.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.878173828125,
            "correct": false
        },
        {
            "CittadinoManager": "- register citizen, allow citizen to register in the system, citizen. citizen accesses registration form, system displays input fields for personal data, citizen enters details and submits, system saves citizen information, exit conditions include successful registration or invalid data invoking error handling, login must be unique and follow [a-za-z0-9.-_] format, email must be valid format.  \n- modify citizen login, allow citizen to update their login credentials, citizen. citizen accesses profile settings, system displays login modification form, citizen enters new login and confirms, system updates login information, citizen must exist in the system, exit includes successful update or error if login already exists.  \n- modify citizen email, allow citizen to change their email address, citizen. citizen navigates to email settings, system displays email update form, citizen enters new email and submits, system validates and saves new email, exit when email updated or invalid format error occurs.  \n- search citizen, allow employee to find citizens by name and surname, employee. employee enters search criteria (name and/or surname), system retrieves matching citizens, employee views results list, exit when results displayed or no matches found.  \n- delete citizen record, allow administrator to remove citizen from system, administrator. administrator selects citizen record, confirms deletion request, system permanently removes citizen data, citizen must exist in the system prior to deletion.  \n- update family unit, allow employee to modify citizen's family unit association, employee. employee selects citizen and new family unit, system updates family unit linkage, exit when association changed or invalid unit error occurs.  \n- modify citizen name, allow citizen to update their legal name, citizen. citizen accesses name change form, enters new name and submits, system validates and updates record, name must contain only [a-zàèéìòù] characters with 1-30 length.  \n- modify citizen surname, allow citizen to update their legal surname, citizen. citizen accesses surname modification form, enters new surname and confirms, system validates and saves changes, surname follows same format constraints as name.",
            "EA23": "register citizen, allow citizen to register in the system, citizen. citizen accesses registration form, system displays form, citizen enters data and confirms, system verifies data correctness, saves data and sends registration email, handle invalid data by invoking invalid data use case, handle service unavailable by invoking service unavailable use case, citizen must have system access. name string matches identity card holder, well-formed with [a-za-z'àéèìòù], length <30, not empty. surname string matches identity card holder, well-formed with [a-za-z'àéèìòù], length <30, not empty. fiscal code string complies with regulations, 16 characters. identity card string exists in system, format xxnnnnnnn, 9 characters. email string format x@x.x, length <31, not empty. username string unique, well-formed with [a-za-z0-9.-_], length <30, not empty. password string well-formed with [a-za-z0-9.-_*+!?,:;àèéìòù], length 8-15.",
            "score": 0.869775390625,
            "correct": false
        },
        {
            "ServletRicercaAmministratore": "- search administrator, allow administrator to search for another administrator by id, administrator. administrator accesses search function, system displays search form, administrator enters administrator id and submits, system retrieves and displays administrator details, exit conditions include displaying details or invoking invalid data use case if id not found, administrator must be authenticated in the system.  \n- invalid administrator id, handle non-existent administrator id during search, administrator. system displays error message indicating id not found, administrator reads notification, system returns to search form, exit when form is redisplayed, extends search administrator use case to handle invalid id.  \n- unauthenticated access prevention, redirect unauthenticated users to login page when accessing administrator search, administrator. user attempts to access administrator search without valid session, system redirects to login page, exit when login page is displayed, user must have active session for administrator functions.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.867138671875,
            "correct": false
        },
        {
            "ServletModificaImpiegato": "- modify employee personal information, allow administrator to update employee's personal details, administrator. administrator accesses employee modification form, system displays employee search by id, administrator enters valid employee id and submits, system retrieves employee data and displays edit form, administrator modifies details (name, surname, email) and confirms, system saves updated information, administrator must be authenticated, exit conditions include successful update or error if invalid employee id.  \n- update employee access credentials, allow administrator to change employee's login credentials, administrator. administrator selects employee via valid id search, system displays current login/password fields, administrator enters new credentials and confirms, system verifies format and updates records, exit when credentials modified or error if password violates length/special character rules.  \n- employee search by id, enable administrator to locate employee records, administrator. administrator initiates employee modification process, system requires valid employee id input, administrator enters id and submits search, system verifies id existence and retrieves data, invalid id triggers error notification.  \n- handle modification errors, manage database exceptions during employee updates, administrator. system detects database errors during save operation, displays service unavailable message, administrator returns to employee management dashboard, extends modification use cases with error recovery path.",
            "EA12": "modify administrator email, allow administrator to update their email address, administrator. administrator accesses email modification form, system displays new email entry form, administrator enters new email and confirms, system updates email, administrator must be authenticated in the system, exit conditions include system saving new email, detecting error invoking invalid data use case, or service unavailable invoking service unavailable use case.",
            "score": 0.86591796875,
            "correct": false
        },
        {
            "ServletModificaImpiegato": "- modify employee personal information, allow administrator to update employee's personal details, administrator. administrator accesses employee modification form, system displays employee search by id, administrator enters valid employee id and submits, system retrieves employee data and displays edit form, administrator modifies details (name, surname, email) and confirms, system saves updated information, administrator must be authenticated, exit conditions include successful update or error if invalid employee id.  \n- update employee access credentials, allow administrator to change employee's login credentials, administrator. administrator selects employee via valid id search, system displays current login/password fields, administrator enters new credentials and confirms, system verifies format and updates records, exit when credentials modified or error if password violates length/special character rules.  \n- employee search by id, enable administrator to locate employee records, administrator. administrator initiates employee modification process, system requires valid employee id input, administrator enters id and submits search, system verifies id existence and retrieves data, invalid id triggers error notification.  \n- handle modification errors, manage database exceptions during employee updates, administrator. system detects database errors during save operation, displays service unavailable message, administrator returns to employee management dashboard, extends modification use cases with error recovery path.",
            "EA78": "modify information, allow employee to modify a news information, employee. employee requests news modification, system displays existing news list, employee selects news, system displays edit form, employee enters news data in form, system receives form and updates news data, handle errors by invoking service unavailable use case, employee must be authenticated in the system.",
            "score": 0.861083984375,
            "correct": false
        },
        {
            "Cittadino": "- citizen registration, allow citizen to register in the system, citizen. citizen accesses registration form, system displays personal data entry fields (tax code, surname, name, birth date, birth place, email), citizen submits data, system stores citizen profile, citizen must provide valid tax code and birth details, exit conditions include successful registration or invalid data invoking error handling.  \n- update citizen profile, allow citizen to modify personal information, citizen. citizen accesses profile management, system displays editable fields (email, communication preferences), citizen updates data and confirms, system saves changes, citizen must be authenticated, exit conditions include profile updated or service unavailable error.  \n- manage family unit association, allow citizen to link to family unit, citizen. citizen accesses family unit section, system displays current association or input form, citizen enters family unit identifier, system validates and links citizen, exit conditions include successful linkage or invalid family unit invoking error handling.  \n- communication preference management, allow citizen to set advertisement subscription, citizen. citizen accesses settings, system displays subscription toggle, citizen enables/disables preference, system updates subscription status, exit conditions include preference saved or service error.",
            "EA23": "register citizen, allow citizen to register in the system, citizen. citizen accesses registration form, system displays form, citizen enters data and confirms, system verifies data correctness, saves data and sends registration email, handle invalid data by invoking invalid data use case, handle service unavailable by invoking service unavailable use case, citizen must have system access. name string matches identity card holder, well-formed with [a-za-z'àéèìòù], length <30, not empty. surname string matches identity card holder, well-formed with [a-za-z'àéèìòù], length <30, not empty. fiscal code string complies with regulations, 16 characters. identity card string exists in system, format xxnnnnnnn, 9 characters. email string format x@x.x, length <31, not empty. username string unique, well-formed with [a-za-z0-9.-_], length <30, not empty. password string well-formed with [a-za-z0-9.-_*+!?,:;àèéìòù], length 8-15.",
            "score": 0.859375,
            "correct": false
        },
        {
            "ServletCaricaPratica": "- load application data, allow employee to access citizen and identity card information for application processing, employee. employee selects citizen application from list, system retrieves citizen data and identity card details, system displays application form with pre-filled data, employee must have valid access permissions, citizen must exist in system with valid identity card.",
            "EA30": "request identity card, allow citizen to request an identity card and employee to process it, citizen, employee. citizen views family status and selects family member, system displays form for personal data input (height, distinctive features etc.), citizen enters data, selects payment method, confirms, system shows documentation to present at office counter during opening hours, citizen confirms, system notifies employee of request, employee receives application and chooses to accept or reject invoking request identity card rejected or request identity card accepted use cases, handle service unavailable by invoking service unavailable use case, citizen must be authenticated in the system and exercise parental authority over subject.",
            "score": 0.858154296875,
            "correct": false
        },
        {
            "DbCittadino": "- register citizen, allow citizen to create a municipal service account, citizen. citizen accesses registration form, enters personal details (name, surname, tax code, birth date/place, email, family unit), submits data, system validates and stores record, exit conditions include successful registration or error handling for duplicate tax code/login or invalid data formats, tax code must follow [a-z0-9] 16-character format, email must contain @ and valid domain structure.  \n- modify citizen profile, allow citizen to update personal information, citizen. citizen accesses profile modification interface, edits editable fields (name, surname, email, family unit), confirms changes, system validates and updates records, citizen must have active authenticated session, exit conditions include successful update or error handling for invalid email format or non-existent family unit.  \n- delete citizen record, allow administrator to remove citizen from system, administrator. administrator searches citizen by id/tax code/name, selects delete action, confirms removal, system removes citizen data and related records, administrator must have deletion privileges, exit conditions include permanent deletion or error handling for non-existent citizen id.  \n- search citizen records, allow employee to retrieve citizen information, employee. employee enters search criteria (full name or tax code), system returns matching citizen profiles with core attributes, employee must have search permissions, exit conditions include displaying results or handling no-match scenarios through empty result set.  \n- manage family unit association, enable citizens to update household membership, citizen. citizen accesses family status section, requests modification to family unit id, system validates new household existence, updates database linkage, exit conditions include successful association change or error handling for invalid family unit id, family unit must be pre-registered in municipal registry.",
            "EA23": "register citizen, allow citizen to register in the system, citizen. citizen accesses registration form, system displays form, citizen enters data and confirms, system verifies data correctness, saves data and sends registration email, handle invalid data by invoking invalid data use case, handle service unavailable by invoking service unavailable use case, citizen must have system access. name string matches identity card holder, well-formed with [a-za-z'àéèìòù], length <30, not empty. surname string matches identity card holder, well-formed with [a-za-z'àéèìòù], length <30, not empty. fiscal code string complies with regulations, 16 characters. identity card string exists in system, format xxnnnnnnn, 9 characters. email string format x@x.x, length <31, not empty. username string unique, well-formed with [a-za-z0-9.-_], length <30, not empty. password string well-formed with [a-za-z0-9.-_*+!?,:;àèéìòù], length 8-15.",
            "score": 0.8578125000000001,
            "correct": false
        },
        {
            "Amministratore": "- view administrator profile, allow administrator to view their personal details, administrator. administrator accesses profile section, system displays name, surname, matriculation number, email, and login, administrator reviews information, exit when details are displayed, administrator must be authenticated in the system, email must follow valid format (e.g., user@domain.com), matricola must be unique system-wide.\n- modify administrator email, allow administrator to update their email address, administrator. administrator accesses email modification form, enters new valid email, system updates and confirms change, exit when email is updated or invalid format triggers error, email must comply with standard format and be unique if required.",
            "EA14": "modify employee email, allow employee to modify their email address, employee. employee accesses email modification form, system displays new email input form, employee enters new email and confirms, system updates email, employee must be authenticated in the system, exit conditions include system saving new email, detecting error invoking invalid data use case, or handling service unavailability via service unavailable use case.",
            "score": 0.8570312499999999,
            "correct": false
        },
        {
            "ServletModificaAccesso": "- modify access credentials, allow citizen to update login and password, citizen. citizen accesses credentials modification form, system displays login and password fields, citizen enters new data and confirms, system updates credentials, exit conditions include successful update or error invoking invalid data use case, password must match confirmation field and comply with length/special character rules.  \n- modify employee access, allow employee to change login credentials, employee. employee accesses modification form, system displays current login and password fields, employee enters new data and submits, system verifies and updates credentials, employee must have active session, exit conditions include success or invalid data error if password mismatch or invalid format.  \n- handle session expiration, redirect unauthenticated users to login page, system. system detects expired or invalid session during access modification, redirects user to appropriate login page based on origin (citizen/employee portal), exit when user reaches login screen.",
            "EA78": "modify information, allow employee to modify a news information, employee. employee requests news modification, system displays existing news list, employee selects news, system displays edit form, employee enters news data in form, system receives form and updates news data, handle errors by invoking service unavailable use case, employee must be authenticated in the system.",
            "score": 0.856982421875,
            "correct": false
        },
        {
            "ServletModificaAccesso": "- modify access credentials, allow citizen to update login and password, citizen. citizen accesses credentials modification form, system displays login and password fields, citizen enters new data and confirms, system updates credentials, exit conditions include successful update or error invoking invalid data use case, password must match confirmation field and comply with length/special character rules.  \n- modify employee access, allow employee to change login credentials, employee. employee accesses modification form, system displays current login and password fields, employee enters new data and submits, system verifies and updates credentials, employee must have active session, exit conditions include success or invalid data error if password mismatch or invalid format.  \n- handle session expiration, redirect unauthenticated users to login page, system. system detects expired or invalid session during access modification, redirects user to appropriate login page based on origin (citizen/employee portal), exit when user reaches login screen.",
            "EA14": "modify employee email, allow employee to modify their email address, employee. employee accesses email modification form, system displays new email input form, employee enters new email and confirms, system updates email, employee must be authenticated in the system, exit conditions include system saving new email, detecting error invoking invalid data use case, or handling service unavailability via service unavailable use case.",
            "score": 0.85546875,
            "correct": false
        },
        {
            "ServletLogin": "- administrator authentication, allow administrator to authenticate into the system, administrator. administrator accesses system, system displays login form for credentials input, administrator enters data and submits authentication request, system verifies data and grants access with specified permissions, exit conditions include successful access or invalid credentials invoking invalid data use case or service unavailable invoking service unavailable use case, username must be present with [a-za-z0-9._-] characters under 30 length, password must be present with [a-za-z0-9._-*+!?,:;àèéìòù] characters between 8-15 length.\n- authenticate citizen, allow citizen to log in handling incorrect data and service unavailability, citizen. citizen accesses authentication session, system displays login form, citizen enters credentials and submits, system verifies and grants access, handle incorrect data by invoking incorrect data use case, handle service unavailable by invoking service unavailable use case, username must exist in system with [a-za-z0-9.-_] characters and length <30, password must exist in system with [a-za-z0-9.-_*+!?,:;àèéìòù] characters and length 8-15.\n- employee authentication, allow employee to authenticate into the system, employee. employee accesses authentication session, system displays login form for data entry, employee enters credentials and submits authentication request, system verifies data correctness and grants access, handle incorrect data by invoking incorrect data use case or service unavailable by invoking service unavailable use case, employee must have system access. username must exist, be well-formed with [a-za-z0-9 .-_], length under 30 characters, and not empty. password must exist, be well-formed with [a-za-z0-9.-_*+!?,:;àèéìòù], length between 8-15 characters.\n- incorrect data, handle incorrect input exceptions by redisplaying form, citizen. system displays error message indicating incorrect request, citizen reads notification message, system redisplays input form, exit when form is redisplayed, extends other use cases to handle input error failures.",
            "EA23": "register citizen, allow citizen to register in the system, citizen. citizen accesses registration form, system displays form, citizen enters data and confirms, system verifies data correctness, saves data and sends registration email, handle invalid data by invoking invalid data use case, handle service unavailable by invoking service unavailable use case, citizen must have system access. name string matches identity card holder, well-formed with [a-za-z'àéèìòù], length <30, not empty. surname string matches identity card holder, well-formed with [a-za-z'àéèìòù], length <30, not empty. fiscal code string complies with regulations, 16 characters. identity card string exists in system, format xxnnnnnnn, 9 characters. email string format x@x.x, length <31, not empty. username string unique, well-formed with [a-za-z0-9.-_], length <30, not empty. password string well-formed with [a-za-z0-9.-_*+!?,:;àèéìòù], length 8-15.",
            "score": 0.85439453125,
            "correct": false
        },
        {
            "ServletModificaAccesso": "- modify access credentials, allow citizen to update login and password, citizen. citizen accesses credentials modification form, system displays login and password fields, citizen enters new data and confirms, system updates credentials, exit conditions include successful update or error invoking invalid data use case, password must match confirmation field and comply with length/special character rules.  \n- modify employee access, allow employee to change login credentials, employee. employee accesses modification form, system displays current login and password fields, employee enters new data and submits, system verifies and updates credentials, employee must have active session, exit conditions include success or invalid data error if password mismatch or invalid format.  \n- handle session expiration, redirect unauthenticated users to login page, system. system detects expired or invalid session during access modification, redirects user to appropriate login page based on origin (citizen/employee portal), exit when user reaches login screen.",
            "EA11": "modify citizen, allow employee to modify a citizen's information, employee. employee presses modify citizen button, system displays edit form, employee enters data, system saves changes, handle service unavailable by invoking service unavailable use case, system modifies citizen or service unavailable as exit conditions, employee must be authenticated in the system and use case includes search citizen when modifying.",
            "score": 0.8516601562500001,
            "correct": false
        },
        {
            "ServletVisualizzaPratiche": "- view applications, allow employee to view all submitted applications, employee. employee accesses application list, system retrieves and displays list of applications, employee scrolls through list to inspect application details, exit when list is displayed or service unavailable invoking service unavailable use case, employee must have system access.",
            "EA44": "view pending applications employee, allow employee to view pending applications, employee. employee selects view pending requests, system displays list of pending applications, exit conditions include employee selecting request invoking show pending application employee use case, returning to previous screen, or system invoking service unavailable use case for unexpected errors, employee must be logged in.",
            "score": 0.85048828125,
            "correct": false
        }
    ],
    "fn": [
        {
            "AccessManager": "- register user access, allow administrator to create new system user, administrator. administrator navigates to user registration form, enters login, password, and type, system validates login uniqueness and creates access, exit conditions include access created or duplicate login error, login must be unique and conform to [a-za-z0-9._-] characters under 30 length.  \n- modify user access, allow administrator to update user credentials, administrator. administrator selects user from list, modifies login/password/type fields, system validates new data and updates access record, exit conditions include access modified or invalid format error, new login must follow [a-za-z0-9._-] format.  \n- delete user access, allow administrator to remove user from system, administrator. administrator selects target user, confirms deletion action, system deletes access record, exit conditions include access removed or dependency conflict error preventing deletion.  \n- check login existence, validate login uniqueness during registration, administrator. system verifies proposed login against existing records during user creation, administrator receives availability status, exit condition is unique login confirmed or duplicate error triggered.  \n- retrieve access details, allow administrator to view user access information, administrator. administrator searches user by login, system displays associated access type and credentials, exit condition is details shown or invalid login error.  \n- list all accesses, enable administrator to view registered system users, administrator. administrator requests full access list, system retrieves and displays all logins with types, exit condition is list displayed or empty database message.  \n- verify credentials, authenticate users during login process, user. system compares input login/password with stored access records, grants session upon match, exit conditions include successful login or invalid credentials error.",
            "EA10": "employee logout, allow employee to end work session, employee. employee clicks logout button, system disconnects and returns to main screen, employee must be authenticated in the system.",
            "score": 0.68837890625,
            "correct": true
        },
        {
            "ServletRisposta": "- change of residence, allow citizen to declare residence change with family unit details, citizen. citizen accesses residence change form, system displays data entry fields for old and new address, family members, and occupancy status, citizen enters data and submits, system generates pdf declaration, citizen must be authenticated, exit conditions include system storing declaration as pending request, invoking incorrect data use case if mandatory fields missing or invalid dates, invoking service unavailable use case if pdf generation fails. surname must be [a-zàéèìòù'] uppercase, name same as surname, birth city same characters, birth date valid dd/mm/yyyy, new address same characters, new municipality same characters, family members require name, surname, birth details, occupancy status must be specified.\n- declare third party occupants, allow citizen to list occupants in new residence, citizen. citizen selects occupied residence option, system displays occupant entry form, citizen enters occupant names and relationships, system includes occupants in declaration, exit conditions include system saving occupant details or invoking incorrect data use case if occupant names invalid, citizen must declare occupancy status as occupied. occupant names must be [a-zàéèìòù'] uppercase, minimum 1 character, relationship must be specified.\n- incorrect data, handle incorrect input exceptions by redisplaying form, citizen. system displays error message indicating incorrect request, citizen reads notification message, system redisplays input form, exit when form is redisplayed, extends other use cases to handle input error failures.",
            "EA37": "renew identity card, allow citizen to request identity card renewal processed by employee, citizen employee. citizen presses identity card renewal button, system sends renewal request to competent employee, citizen goes to office counter to renew identity card, service unavailable invokes service unavailable use case, system creates document for competent office, citizen must be authenticated in the system.",
            "score": 0.688232421875,
            "correct": true
        },
        {
            "ServletVisualizzaPratiche": "- view applications, allow employee to view all submitted applications, employee. employee accesses application list, system retrieves and displays list of applications, employee scrolls through list to inspect application details, exit when list is displayed or service unavailable invoking service unavailable use case, employee must have system access.",
            "EA29": "modify application, allow citizen to modify an application if not initialized, citizen. citizen presses modify application button (identity card, change of residence), system displays application modification form, citizen enters data, system saves changes, citizen must be authenticated in the system, extends view application use case when citizen wants to modify application, system modifies application or handles service unavailable by invoking service unavailable use case.",
            "score": 0.688134765625,
            "correct": true
        },
        {
            "ServletStatoDiFamiglia": "- view family status, allow citizen to view their family unit composition, citizen. citizen accesses family status section, system requests family unit id, citizen provides id, system retrieves and displays family members list, exit conditions include family members list displayed or invalid id invoking invalid data use case, family unit id must exist in system and be valid.",
            "EA4": "delete citizen, allows employee to delete a citizen, employee. employee presses delete citizen button, system requests confirmation, employee confirms operation, system deletes citizen. employee must be authenticated in the system, includes search citizen use case when employee wants to delete citizen. exit conditions: employee does not confirm operation, system deletes citizen, or invokes service unavailable use case if service is unavailable.",
            "score": 0.686474609375,
            "correct": true
        },
        {
            "DbImpiegato": "- register employee, allow administrator to add new employee records, administrator. administrator accesses employee registration form, enters employee details (name, surname, email, matricola, login), system validates and stores data, administrator must ensure unique matricola and valid login credentials, exit conditions include successful registration or error for duplicate entries.\n- delete employee record, allow administrator to remove employee from system, administrator. administrator selects employee via matricola, system verifies identity, removes employee data, exit when deletion confirmed or error occurs for invalid matricola.\n- search employee by name, allow employee to find colleagues via name criteria, employee. employee enters name and surname in search form, system returns matching records, exit when results displayed or no matches found.\n- view employee details, allow employee to access colleague profiles, employee. employee selects colleague via matricola/login, system displays full profile (name, surname, email, credentials), exit when data appears or invalid identifier error occurs.\n- modify employee information, allow administrator to update employee data, administrator. administrator selects target employee, edits fields (matricola, email, login), system validates changes and updates records, exit when changes saved or error occurs for invalid formats.",
            "EA23": "register citizen, allow citizen to register in the system, citizen. citizen accesses registration form, system displays form, citizen enters data and confirms, system verifies data correctness, saves data and sends registration email, handle invalid data by invoking invalid data use case, handle service unavailable by invoking service unavailable use case, citizen must have system access. name string matches identity card holder, well-formed with [a-za-z'àéèìòù], length <30, not empty. surname string matches identity card holder, well-formed with [a-za-z'àéèìòù], length <30, not empty. fiscal code string complies with regulations, 16 characters. identity card string exists in system, format xxnnnnnnn, 9 characters. email string format x@x.x, length <31, not empty. username string unique, well-formed with [a-za-z0-9.-_], length <30, not empty. password string well-formed with [a-za-z0-9.-_*+!?,:;àèéìòù], length 8-15.",
            "score": 0.685302734375,
            "correct": true
        },
        {
            "ServletModificaCittadino": "- modify citizen data, allow employee to update citizen's personal information, employee. employee accesses citizen modification form, system displays current citizen data, employee enters new details (name, surname, email), system validates and updates records, employee must authenticate and have valid citizen identity card code, exit conditions include successful update or error if identity code invalid or database error.\n- change family unit, allow employee to modify citizen's family unit membership, employee. employee selects new family unit for citizen, system checks unit existence and updates member count, system assigns citizen to selected unit, employee must ensure new family unit exists and citizen is not current family head with multiple members, exit on successful reassignment or error if unit invalid.\n- update family head, allow employee to designate new family head when current head changes unit, employee. employee enters new head's identity card code, system verifies code exists and updates family unit head, previous head's unit member count decreases, new unit count increases, exit on success or error if new head's identity code invalid.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.6833984375,
            "correct": true
        },
        {
            "NucleoFamiliareManager": "- create family unit, allow employee to register a new family unit in the system, employee. employee accesses family unit registration form, system displays data entry fields, employee submits family composition details, system stores new family record, employee must have valid permissions to manage civil records, family unit must not pre-exist in the system.  \n- verify family existence, enable employee to confirm family unit validity before administrative operations, employee. employee enters family unit identifier during record processing, system checks database for matching entry, returns existence status, family identifier must be numeric and correspond to valid format.  \n- update family head, permit employee to designate new head of household for existing family unit, employee. employee selects target family unit, system displays current head information, employee inputs new head credentials, system updates leadership data, target citizen must belong to same family unit.  \n- adjust family membership count, let employee increment/decrement member numbers during lifecycle changes, employee. employee accesses family profile management, system shows current member count, employee triggers add/remove action based on civil events, system updates official composition records, changes require valid justification documentation.  \n- view family composition details, allow employee to inspect complete household member information, employee. employee searches family unit via identifier, system retrieves stored data including head and members, displays structured household overview, access limited to authorized personnel with civil registry privileges.",
            "EA37": "renew identity card, allow citizen to request identity card renewal processed by employee, citizen employee. citizen presses identity card renewal button, system sends renewal request to competent employee, citizen goes to office counter to renew identity card, service unavailable invokes service unavailable use case, system creates document for competent office, citizen must be authenticated in the system.",
            "score": 0.682861328125,
            "correct": true
        },
        {
            "DbNucleoFamiliare": "- create family unit, allow employee to register a new family unit in the system, employee. employee initiates family unit registration, system displays entry form for head member id and notes, employee submits data, system stores new family unit, exit conditions include successful registration or error handling for invalid head id, family head must exist in system and have valid citizen id.  \n- delete family unit, allow employee to remove family unit records, employee. employee selects target family unit id, system verifies existence, employee confirms deletion, system removes family unit data, exit when deletion completes or invalid id invokes error case, family unit must exist and have no active linked services.  \n- view family status, allow citizen or employee to display family member details, employee/citizen. user requests family status via id, system retrieves and lists all members with personal data, exit conditions include displaying member list or handling non-existent family unit error.  \n- verify family unit existence, ensure family unit id validity before operations, employee. system checks database for id presence during processes like deletion/modification, returns confirmation status, extends other use cases to prevent invalid id usage.  \n- update family head, allow employee to modify family unit leadership, employee. employee accesses family unit management, selects new head member id, system validates new head's citizenship status, updates database records, exit conditions include successful update or error for invalid member id.  \n- modify family member count, allow employee to adjust registered family size, employee. employee enters new component number for specific family unit, system validates number consistency with actual members, updates database, exit when count matches registered members or triggers inconsistency error.  \n- retrieve family unit notes, enable employee to access administrative annotations, employee. employee selects family unit id, system displays stored notes field, allows note review for case management, requires valid family unit id.",
            "EA26": "change of residence another municipality, allow citizen to change residence to another municipality, citizen and employee. citizen presses change of residence button, system displays form, citizen enters new residence data, system confirms submission and stores request, employee accesses system and views request, employee verifies data completes document confirms operation, system saves form and updates data, employee sends document to other municipality's employee, other municipality's employee verifies document sends positive notification to original employee and citizen, handle service unavailable by invoking service unavailable use case, citizen must be authenticated in the system. new residence municipality name allows [a-z a-z ' àéèìòù .], non-empty. address allows [a-z a-z ' àéèìòù , .], non-empty. civic number allows [0-9 a-z], max 4 characters. phone prefix numeric 2-5 digits. phone number numeric 5-8 digits. family member surname/name allows [a-z a-z ' àéèìòù], max 30 chars non-empty. family member birth place allows [a-z a-z ' àéèìòù .], non-empty. birth date valid format dd/mm/yyyy. external requester card code format xxnnnnnnn (x=letter, n=number), 9 chars.",
            "score": 0.6783691406250001,
            "correct": true
        },
        {
            "ServletAnnulla": "- cancel operation, allow administrator and employee to cancel ongoing administrative operation, administrator, employee. user initiates cancel action during operation, system removes temporary session data and redirects to main menu, user must be authenticated in the system.",
            "EA11": "modify citizen, allow employee to modify a citizen's information, employee. employee presses modify citizen button, system displays edit form, employee enters data, system saves changes, handle service unavailable by invoking service unavailable use case, system modifies citizen or service unavailable as exit conditions, employee must be authenticated in the system and use case includes search citizen when modifying.",
            "score": 0.673193359375,
            "correct": true
        },
        {
            "ImpiegatoManager": "- modify employee data, allow administrator to update employee information, administrator. administrator selects employee by employee id, system displays current data, administrator edits data fields and confirms changes, system updates employee record, employee id must exist in system.  \n- search employee by id, allow administrator to retrieve employee details via unique identifier, administrator. administrator enters employee id in search form, system displays employee information, employee must be registered in system.  \n- insert employee, allow administrator to register new employee into system, administrator. administrator navigates to employee creation form, enters employee details (name, surname, id), submits data, system stores new employee record, employee id must be unique.  \n- delete employee, allow administrator to remove employee from system, administrator. administrator selects employee by id, confirms deletion request, system removes employee record, employee must exist in system.  \n- search employees by name, allow administrator to find employees via name criteria, administrator. administrator inputs employee name and surname, system returns matching employee records, at least one search parameter must be provided.  \n- list employees, allow administrator to view all registered employees, administrator. administrator accesses employee directory, system displays complete employee list sorted alphabetically.",
            "EA23": "register citizen, allow citizen to register in the system, citizen. citizen accesses registration form, system displays form, citizen enters data and confirms, system verifies data correctness, saves data and sends registration email, handle invalid data by invoking invalid data use case, handle service unavailable by invoking service unavailable use case, citizen must have system access. name string matches identity card holder, well-formed with [a-za-z'àéèìòù], length <30, not empty. surname string matches identity card holder, well-formed with [a-za-z'àéèìòù], length <30, not empty. fiscal code string complies with regulations, 16 characters. identity card string exists in system, format xxnnnnnnn, 9 characters. email string format x@x.x, length <31, not empty. username string unique, well-formed with [a-za-z0-9.-_], length <30, not empty. password string well-formed with [a-za-z0-9.-_*+!?,:;àèéìòù], length 8-15.",
            "score": 0.672314453125,
            "correct": true
        },
        {
            "NucleoFamiliareManager": "- create family unit, allow employee to register a new family unit in the system, employee. employee accesses family unit registration form, system displays data entry fields, employee submits family composition details, system stores new family record, employee must have valid permissions to manage civil records, family unit must not pre-exist in the system.  \n- verify family existence, enable employee to confirm family unit validity before administrative operations, employee. employee enters family unit identifier during record processing, system checks database for matching entry, returns existence status, family identifier must be numeric and correspond to valid format.  \n- update family head, permit employee to designate new head of household for existing family unit, employee. employee selects target family unit, system displays current head information, employee inputs new head credentials, system updates leadership data, target citizen must belong to same family unit.  \n- adjust family membership count, let employee increment/decrement member numbers during lifecycle changes, employee. employee accesses family profile management, system shows current member count, employee triggers add/remove action based on civil events, system updates official composition records, changes require valid justification documentation.  \n- view family composition details, allow employee to inspect complete household member information, employee. employee searches family unit via identifier, system retrieves stored data including head and members, displays structured household overview, access limited to authorized personnel with civil registry privileges.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.6689453125,
            "correct": true
        },
        {
            "CartaIdentita": "- create identity card, allow employee to create a new identity card for a citizen, employee. employee accesses identity card creation form, system displays required fields (citizenship, residence, profession), employee enters citizen data and submits, system validates and stores the identity card, employee must have valid access permissions, exit conditions include successful card creation or error handling for invalid data, citizenship must be a valid nation name, residence must match municipal records, profession must adhere to predefined categories.  \n- update identity card details, allow employee to modify existing identity card information, employee. employee selects citizen's identity card, system displays current details, employee edits fields (address, marital status, profession), system validates changes and updates record, exit conditions include successful update or error for invalid modifications, street number must be positive integer, height must be in meters with two decimal places.  \n- view identity card, allow citizen to view their identity card details, citizen. citizen accesses personal profile, system retrieves and displays identity card information (expiry date, distinctive marks), citizen reviews data, exit when citizen closes the view, citizen must be authenticated and have a valid identity card record.  \n- validate expatriation authorization, allow employee to set expatriation validity on identity card, employee. employee selects expatriation validity field during card creation/modification, system toggles authorization status, system enforces legal compliance checks, exit when authorization is saved, validity depends on citizenship and residency status.",
            "EA24": "search employee, allow administrator to search for an employee, administrator. press employee search button, system displays search form, administrator performs search via employee data, system returns searched employee data, employee id string must be present in system containing only numeric characters with 6-digit length, administrator must be authenticated in the system, exit conditions include displaying employee screen, invoking incorrect data use case if employee not found, calling delete employee or modify employee use cases if requested, handling service unavailable via service unavailable use case.",
            "score": 0.66865234375,
            "correct": true
        },
        {
            "ServletMostraAccesso": "- view access details, allow administrator and employee to view their access credentials, administrator and employee. user navigates to access details section, system retrieves stored login information from database, system displays login details on interface, user must have active authentication session, exit conditions include successful credential display or database error invoking service unavailable use case.",
            "EA10": "employee logout, allow employee to end work session, employee. employee clicks logout button, system disconnects and returns to main screen, employee must be authenticated in the system.",
            "score": 0.66865234375,
            "correct": true
        },
        {
            "ServletVisualizzaPratiche": "- view applications, allow employee to view all submitted applications, employee. employee accesses application list, system retrieves and displays list of applications, employee scrolls through list to inspect application details, exit when list is displayed or service unavailable invoking service unavailable use case, employee must have system access.",
            "EA27": "change of family status, allow citizen to request a change in family status continued by employee, citizen employee. citizen presses change family status button, system displays form, citizen enters new family unit data and submits request, system sends request to competent employee, system creates document for competent office or handle service unavailable by invoking service unavailable use case, citizen must be authenticated in the system.",
            "score": 0.66806640625,
            "correct": true
        },
        {
            "DbCittadino": "- register citizen, allow citizen to create a municipal service account, citizen. citizen accesses registration form, enters personal details (name, surname, tax code, birth date/place, email, family unit), submits data, system validates and stores record, exit conditions include successful registration or error handling for duplicate tax code/login or invalid data formats, tax code must follow [a-z0-9] 16-character format, email must contain @ and valid domain structure.  \n- modify citizen profile, allow citizen to update personal information, citizen. citizen accesses profile modification interface, edits editable fields (name, surname, email, family unit), confirms changes, system validates and updates records, citizen must have active authenticated session, exit conditions include successful update or error handling for invalid email format or non-existent family unit.  \n- delete citizen record, allow administrator to remove citizen from system, administrator. administrator searches citizen by id/tax code/name, selects delete action, confirms removal, system removes citizen data and related records, administrator must have deletion privileges, exit conditions include permanent deletion or error handling for non-existent citizen id.  \n- search citizen records, allow employee to retrieve citizen information, employee. employee enters search criteria (full name or tax code), system returns matching citizen profiles with core attributes, employee must have search permissions, exit conditions include displaying results or handling no-match scenarios through empty result set.  \n- manage family unit association, enable citizens to update household membership, citizen. citizen accesses family status section, requests modification to family unit id, system validates new household existence, updates database linkage, exit conditions include successful association change or error handling for invalid family unit id, family unit must be pre-registered in municipal registry.",
            "EA21": "employee password recovery, allow employee to recover password, employee. employee forgets password and presses recovery button, system displays form for entering employee id, employee enters id and confirms, system verifies data and sends password to email, handle incorrect data by invoking incorrect data use case or service unavailable by invoking service unavailable use case, employee must be authenticated in the system.",
            "score": 0.66513671875,
            "correct": true
        },
        {
            "AdminManager": "- modify administrator data, allow administrator to update administrator details, administrator. administrator accesses administrator modification form, system displays data entry fields, administrator enters new details and submits, system updates administrator record, administrator must have system access, exit conditions include successful update or error if administrator is only remaining, administrator cannot delete last existing administrator.\n- search administrator, allow administrator to find administrator by name, administrator. administrator accesses search function, system displays name entry fields, administrator enters name and submits, system displays matching administrators, exit when results are displayed or none found, administrator must be authenticated in system.\n- insert administrator, allow administrator to add new administrator, administrator. administrator accesses insertion form, system displays data entry fields, administrator enters required data and submits, system saves new administrator, exit conditions include successful insertion or error if data invalid, new administrator must have unique matricola and login.\n- delete administrator, allow administrator to remove administrator, administrator. administrator selects administrator to delete and confirms, system removes administrator record, exit conditions include successful deletion or error if last administrator, system must retain at least one administrator.",
            "EA3": "employee authentication, allow employee to authenticate into the system, employee. employee accesses authentication session, system displays login form for data entry, employee enters credentials and submits authentication request, system verifies data correctness and grants access, handle incorrect data by invoking incorrect data use case or service unavailable by invoking service unavailable use case, employee must have system access. username must exist, be well-formed with [a-za-z0-9 .-_], length under 30 characters, and not empty. password must exist, be well-formed with [a-za-z0-9.-_*+!?,:;àèéìòù], length between 8-15 characters.",
            "score": 0.6611328125,
            "correct": true
        },
        {
            "NucleoFamiliareManager": "- create family unit, allow employee to register a new family unit in the system, employee. employee accesses family unit registration form, system displays data entry fields, employee submits family composition details, system stores new family record, employee must have valid permissions to manage civil records, family unit must not pre-exist in the system.  \n- verify family existence, enable employee to confirm family unit validity before administrative operations, employee. employee enters family unit identifier during record processing, system checks database for matching entry, returns existence status, family identifier must be numeric and correspond to valid format.  \n- update family head, permit employee to designate new head of household for existing family unit, employee. employee selects target family unit, system displays current head information, employee inputs new head credentials, system updates leadership data, target citizen must belong to same family unit.  \n- adjust family membership count, let employee increment/decrement member numbers during lifecycle changes, employee. employee accesses family profile management, system shows current member count, employee triggers add/remove action based on civil events, system updates official composition records, changes require valid justification documentation.  \n- view family composition details, allow employee to inspect complete household member information, employee. employee searches family unit via identifier, system retrieves stored data including head and members, displays structured household overview, access limited to authorized personnel with civil registry privileges.",
            "EA38": "loss of identity card, allow citizen to report lost identity card and notify employee with in-person verification, citizen employee. citizen presses identity card loss button, system sends loss notification to responsible employee, citizen visits employee office with loss report copy, system creates document for competent office or handle service unavailable by invoking service unavailable use case, citizen must be authenticated in the system.",
            "score": 0.6607421875,
            "correct": true
        },
        {
            "AccessManager": "- register user access, allow administrator to create new system user, administrator. administrator navigates to user registration form, enters login, password, and type, system validates login uniqueness and creates access, exit conditions include access created or duplicate login error, login must be unique and conform to [a-za-z0-9._-] characters under 30 length.  \n- modify user access, allow administrator to update user credentials, administrator. administrator selects user from list, modifies login/password/type fields, system validates new data and updates access record, exit conditions include access modified or invalid format error, new login must follow [a-za-z0-9._-] format.  \n- delete user access, allow administrator to remove user from system, administrator. administrator selects target user, confirms deletion action, system deletes access record, exit conditions include access removed or dependency conflict error preventing deletion.  \n- check login existence, validate login uniqueness during registration, administrator. system verifies proposed login against existing records during user creation, administrator receives availability status, exit condition is unique login confirmed or duplicate error triggered.  \n- retrieve access details, allow administrator to view user access information, administrator. administrator searches user by login, system displays associated access type and credentials, exit condition is details shown or invalid login error.  \n- list all accesses, enable administrator to view registered system users, administrator. administrator requests full access list, system retrieves and displays all logins with types, exit condition is list displayed or empty database message.  \n- verify credentials, authenticate users during login process, user. system compares input login/password with stored access records, grants session upon match, exit conditions include successful login or invalid credentials error.",
            "EA9": "logout citizen, allow citizen to log out from the system, citizen. citizen clicks logout button, system logs out citizen and returns to main screen, citizen must be authenticated in the system.",
            "score": 0.6568359374999999,
            "correct": true
        },
        {
            "NucleoFamiliareManager": "- create family unit, allow employee to register a new family unit in the system, employee. employee accesses family unit registration form, system displays data entry fields, employee submits family composition details, system stores new family record, employee must have valid permissions to manage civil records, family unit must not pre-exist in the system.  \n- verify family existence, enable employee to confirm family unit validity before administrative operations, employee. employee enters family unit identifier during record processing, system checks database for matching entry, returns existence status, family identifier must be numeric and correspond to valid format.  \n- update family head, permit employee to designate new head of household for existing family unit, employee. employee selects target family unit, system displays current head information, employee inputs new head credentials, system updates leadership data, target citizen must belong to same family unit.  \n- adjust family membership count, let employee increment/decrement member numbers during lifecycle changes, employee. employee accesses family profile management, system shows current member count, employee triggers add/remove action based on civil events, system updates official composition records, changes require valid justification documentation.  \n- view family composition details, allow employee to inspect complete household member information, employee. employee searches family unit via identifier, system retrieves stored data including head and members, displays structured household overview, access limited to authorized personnel with civil registry privileges.",
            "EA11": "modify citizen, allow employee to modify a citizen's information, employee. employee presses modify citizen button, system displays edit form, employee enters data, system saves changes, handle service unavailable by invoking service unavailable use case, system modifies citizen or service unavailable as exit conditions, employee must be authenticated in the system and use case includes search citizen when modifying.",
            "score": 0.649658203125,
            "correct": true
        },
        {
            "Cittadino": "- citizen registration, allow citizen to register in the system, citizen. citizen accesses registration form, system displays personal data entry fields (tax code, surname, name, birth date, birth place, email), citizen submits data, system stores citizen profile, citizen must provide valid tax code and birth details, exit conditions include successful registration or invalid data invoking error handling.  \n- update citizen profile, allow citizen to modify personal information, citizen. citizen accesses profile management, system displays editable fields (email, communication preferences), citizen updates data and confirms, system saves changes, citizen must be authenticated, exit conditions include profile updated or service unavailable error.  \n- manage family unit association, allow citizen to link to family unit, citizen. citizen accesses family unit section, system displays current association or input form, citizen enters family unit identifier, system validates and links citizen, exit conditions include successful linkage or invalid family unit invoking error handling.  \n- communication preference management, allow citizen to set advertisement subscription, citizen. citizen accesses settings, system displays subscription toggle, citizen enables/disables preference, system updates subscription status, exit conditions include preference saved or service error.",
            "EA21": "employee password recovery, allow employee to recover password, employee. employee forgets password and presses recovery button, system displays form for entering employee id, employee enters id and confirms, system verifies data and sends password to email, handle incorrect data by invoking incorrect data use case or service unavailable by invoking service unavailable use case, employee must be authenticated in the system.",
            "score": 0.638916015625,
            "correct": true
        }
    ]
}